// ==UserScript==
// @name         WPlace Auto-Image embeded
// @namespace    https://wplace.live/
// @version      1.0.2
// @description  Runs WPlace Auto-Image from an embedded payload by injecting a blob script tag.
// @author       Wplace-AutoBot + community modified by azpektdev
// @match        https://wplace.live/*
// @match        https://www.wplace.live/*
// @run-at       document-idle
// @icon         https://www.google.com/s2/favicons?sz=64&domain=wplace.live
// @grant        GM_addElement
// @grant        unsafeWindow
// ==/UserScript==

(function () {
  "use strict";
  const log = (...a) => console.log("[WPlace Auto-Image Blob]", ...a);
  const err = (...a) => console.error("[WPlace Auto-Image Blob]", ...a);

  function whenReady(predicate, { interval = 500, timeout = 30000 } = {}) {
    return new Promise((resolve, reject) => {
      const start = Date.now();
      const t = setInterval(() => {
        try {
          if (predicate()) {
            clearInterval(t);
            resolve();
            return;
          }
          if (Date.now() - start > timeout) {
            clearInterval(t);
            reject(new Error("Timeout waiting for WPlace DOM"));
          }
        } catch (e) {
          clearInterval(t);
          reject(e);
        }
      }, interval);
    });
  }

  // Embedded payload (base64)
  const PAYLOAD_B64 =
    "Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZXR0aWVyL3ByZXR0aWVyCjsgKGFzeW5jICgpID0+IHsKICAvLyBDT05GSUdVUkFUSU9OIENPTlNUQU5UUwogIGNvbnN0IENPTkZJRyA9IHsKICAgIENPT0xET1dOX0RFRkFVTFQ6IDMxMDAwLAogICAgVFJBTlNQQVJFTkNZX1RIUkVTSE9MRDogMTAwLAogICAgV0hJVEVfVEhSRVNIT0xEOiAyNTAsCiAgICBMT0dfSU5URVJWQUw6IDEwLAogICAgUEFJTlRJTkdfU1BFRUQ6IHsKICAgICAgTUlOOiAxLCAvLyBNaW5pbXVtIDEgcGl4ZWwgYmF0Y2ggc2l6ZQogICAgICBNQVg6IDEwMDAsIC8vIE1heGltdW0gMTAwMCBwaXhlbHMgYmF0Y2ggc2l6ZQogICAgICBERUZBVUxUOiA1LCAvLyBEZWZhdWx0IDUgcGl4ZWxzIGJhdGNoIHNpemUKICAgIH0sCiAgICBCQVRDSF9NT0RFOiAnbm9ybWFsJywgLy8gIm5vcm1hbCIgb3IgInJhbmRvbSIgLSBkZWZhdWx0IHRvIG5vcm1hbAogICAgUkFORE9NX0JBVENIX1JBTkdFOiB7CiAgICAgIE1JTjogMywgLy8gUmFuZG9tIHJhbmdlIG1pbmltdW0KICAgICAgTUFYOiAyMCwgLy8gUmFuZG9tIHJhbmdlIG1heGltdW0KICAgIH0sCiAgICBQQUlOVElOR19TUEVFRF9FTkFCTEVEOiB0cnVlLCAvLyBPbiBieSBkZWZhdWx0CiAgICBBVVRPX0NBUFRDSEFfRU5BQkxFRDogdHJ1ZSwgLy8gVHVybnN0aWxlIGdlbmVyYXRvciBlbmFibGVkIGJ5IGRlZmF1bHQKICAgIFRPS0VOX1NPVVJDRTogJ2dlbmVyYXRvcicsIC8vICJnZW5lcmF0b3IiLCAibWFudWFsIiwgb3IgImh5YnJpZCIgLSBkZWZhdWx0IHRvIGdlbmVyYXRvcgogICAgQ09PTERPV05fQ0hBUkdFX1RIUkVTSE9MRDogMSwgLy8gRGVmYXVsdCB3YWl0IHRocmVzaG9sZAogICAgLy8gRGVza3RvcCBOb3RpZmljYXRpb25zIChkZWZhdWx0cykKICAgIE5PVElGSUNBVElPTlM6IHsKICAgICAgRU5BQkxFRDogZmFsc2UsCiAgICAgIE9OX0NIQVJHRVNfUkVBQ0hFRDogdHJ1ZSwKICAgICAgT05MWV9XSEVOX1VORk9DVVNFRDogdHJ1ZSwKICAgICAgUkVQRUFUX01JTlVURVM6IDUsIC8vIHJlcGVhdCByZW1pbmRlciB3aGlsZSB0aHJlc2hvbGQgY29uZGl0aW9uIGhvbGRzCiAgICB9LAogICAgT1ZFUkxBWTogewogICAgICBPUEFDSVRZX0RFRkFVTFQ6IDAuMiwKICAgICAgQkxVRV9NQVJCTEVfREVGQVVMVDogZmFsc2UsCiAgICAgIGRpdGhlcmluZ0VuYWJsZWQ6IGZhbHNlLAogICAgfSwgLy8gLS0tIFNUQVJUOiBDb2xvciBkYXRhIGZyb20gY29sb3VyLWNvbnZlcnRlci5qcyAtLS0KICAgIC8vIE5ldyBjb2xvciBzdHJ1Y3R1cmUgd2l0aCBwcm9wZXIgSUQgbWFwcGluZwogICAgQ09MT1JfTUFQOiB7CiAgICAgIDA6IHsgaWQ6IDEsIG5hbWU6ICdCbGFjaycsIHJnYjogeyByOiAwLCBnOiAwLCBiOiAwIH0gfSwKICAgICAgMTogeyBpZDogMiwgbmFtZTogJ0RhcmsgR3JheScsIHJnYjogeyByOiA2MCwgZzogNjAsIGI6IDYwIH0gfSwKICAgICAgMjogeyBpZDogMywgbmFtZTogJ0dyYXknLCByZ2I6IHsgcjogMTIwLCBnOiAxMjAsIGI6IDEyMCB9IH0sCiAgICAgIDM6IHsgaWQ6IDQsIG5hbWU6ICdMaWdodCBHcmF5JywgcmdiOiB7IHI6IDIxMCwgZzogMjEwLCBiOiAyMTAgfSB9LAogICAgICA0OiB7IGlkOiA1LCBuYW1lOiAnV2hpdGUnLCByZ2I6IHsgcjogMjU1LCBnOiAyNTUsIGI6IDI1NSB9IH0sCiAgICAgIDU6IHsgaWQ6IDYsIG5hbWU6ICdEZWVwIFJlZCcsIHJnYjogeyByOiA5NiwgZzogMCwgYjogMjQgfSB9LAogICAgICA2OiB7IGlkOiA3LCBuYW1lOiAnUmVkJywgcmdiOiB7IHI6IDIzNywgZzogMjgsIGI6IDM2IH0gfSwKICAgICAgNzogeyBpZDogOCwgbmFtZTogJ09yYW5nZScsIHJnYjogeyByOiAyNTUsIGc6IDEyNywgYjogMzkgfSB9LAogICAgICA4OiB7IGlkOiA5LCBuYW1lOiAnR29sZCcsIHJnYjogeyByOiAyNDYsIGc6IDE3MCwgYjogOSB9IH0sCiAgICAgIDk6IHsgaWQ6IDEwLCBuYW1lOiAnWWVsbG93JywgcmdiOiB7IHI6IDI0OSwgZzogMjIxLCBiOiA1OSB9IH0sCiAgICAgIDEwOiB7IGlkOiAxMSwgbmFtZTogJ0xpZ2h0IFllbGxvdycsIHJnYjogeyByOiAyNTUsIGc6IDI1MCwgYjogMTg4IH0gfSwKICAgICAgMTE6IHsgaWQ6IDEyLCBuYW1lOiAnRGFyayBHcmVlbicsIHJnYjogeyByOiAxNCwgZzogMTg1LCBiOiAxMDQgfSB9LAogICAgICAxMjogeyBpZDogMTMsIG5hbWU6ICdHcmVlbicsIHJnYjogeyByOiAxOSwgZzogMjMwLCBiOiAxMjMgfSB9LAogICAgICAxMzogeyBpZDogMTQsIG5hbWU6ICdMaWdodCBHcmVlbicsIHJnYjogeyByOiAxMzUsIGc6IDI1NSwgYjogOTQgfSB9LAogICAgICAxNDogeyBpZDogMTUsIG5hbWU6ICdEYXJrIFRlYWwnLCByZ2I6IHsgcjogMTIsIGc6IDEyOSwgYjogMTEwIH0gfSwKICAgICAgMTU6IHsgaWQ6IDE2LCBuYW1lOiAnVGVhbCcsIHJnYjogeyByOiAxNiwgZzogMTc0LCBiOiAxNjYgfSB9LAogICAgICAxNjogeyBpZDogMTcsIG5hbWU6ICdMaWdodCBUZWFsJywgcmdiOiB7IHI6IDE5LCBnOiAyMjUsIGI6IDE5MCB9IH0sCiAgICAgIDE3OiB7IGlkOiAyMCwgbmFtZTogJ0N5YW4nLCByZ2I6IHsgcjogOTYsIGc6IDI0NywgYjogMjQyIH0gfSwKICAgICAgMTg6IHsgaWQ6IDQ0LCBuYW1lOiAnTGlnaHQgQ3lhbicsIHJnYjogeyByOiAxODcsIGc6IDI1MCwgYjogMjQyIH0gfSwKICAgICAgMTk6IHsgaWQ6IDE4LCBuYW1lOiAnRGFyayBCbHVlJywgcmdiOiB7IHI6IDQwLCBnOiA4MCwgYjogMTU4IH0gfSwKICAgICAgMjA6IHsgaWQ6IDE5LCBuYW1lOiAnQmx1ZScsIHJnYjogeyByOiA2NCwgZzogMTQ3LCBiOiAyMjggfSB9LAogICAgICAyMTogeyBpZDogMjEsIG5hbWU6ICdJbmRpZ28nLCByZ2I6IHsgcjogMTA3LCBnOiA4MCwgYjogMjQ2IH0gfSwKICAgICAgMjI6IHsgaWQ6IDIyLCBuYW1lOiAnTGlnaHQgSW5kaWdvJywgcmdiOiB7IHI6IDE1MywgZzogMTc3LCBiOiAyNTEgfSB9LAogICAgICAyMzogeyBpZDogMjMsIG5hbWU6ICdEYXJrIFB1cnBsZScsIHJnYjogeyByOiAxMjAsIGc6IDEyLCBiOiAxNTMgfSB9LAogICAgICAyNDogeyBpZDogMjQsIG5hbWU6ICdQdXJwbGUnLCByZ2I6IHsgcjogMTcwLCBnOiA1NiwgYjogMTg1IH0gfSwKICAgICAgMjU6IHsgaWQ6IDI1LCBuYW1lOiAnTGlnaHQgUHVycGxlJywgcmdiOiB7IHI6IDIyNCwgZzogMTU5LCBiOiAyNDkgfSB9LAogICAgICAyNjogeyBpZDogMjYsIG5hbWU6ICdEYXJrIFBpbmsnLCByZ2I6IHsgcjogMjAzLCBnOiAwLCBiOiAxMjIgfSB9LAogICAgICAyNzogeyBpZDogMjcsIG5hbWU6ICdQaW5rJywgcmdiOiB7IHI6IDIzNiwgZzogMzEsIGI6IDEyOCB9IH0sCiAgICAgIDI4OiB7IGlkOiAyOCwgbmFtZTogJ0xpZ2h0IFBpbmsnLCByZ2I6IHsgcjogMjQzLCBnOiAxNDEsIGI6IDE2OSB9IH0sCiAgICAgIDI5OiB7IGlkOiAyOSwgbmFtZTogJ0RhcmsgQnJvd24nLCByZ2I6IHsgcjogMTA0LCBnOiA3MCwgYjogNTIgfSB9LAogICAgICAzMDogeyBpZDogMzAsIG5hbWU6ICdCcm93bicsIHJnYjogeyByOiAxNDksIGc6IDEwNCwgYjogNDIgfSB9LAogICAgICAzMTogeyBpZDogMzEsIG5hbWU6ICdCZWlnZScsIHJnYjogeyByOiAyNDgsIGc6IDE3OCwgYjogMTE5IH0gfSwKICAgICAgMzI6IHsgaWQ6IDUyLCBuYW1lOiAnTGlnaHQgQmVpZ2UnLCByZ2I6IHsgcjogMjU1LCBnOiAxOTcsIGI6IDE2NSB9IH0sCiAgICAgIDMzOiB7IGlkOiAzMiwgbmFtZTogJ01lZGl1bSBHcmF5JywgcmdiOiB7IHI6IDE3MCwgZzogMTcwLCBiOiAxNzAgfSB9LAogICAgICAzNDogeyBpZDogMzMsIG5hbWU6ICdEYXJrIFJlZCcsIHJnYjogeyByOiAxNjUsIGc6IDE0LCBiOiAzMCB9IH0sCiAgICAgIDM1OiB7IGlkOiAzNCwgbmFtZTogJ0xpZ2h0IFJlZCcsIHJnYjogeyByOiAyNTAsIGc6IDEyOCwgYjogMTE0IH0gfSwKICAgICAgMzY6IHsgaWQ6IDM1LCBuYW1lOiAnRGFyayBPcmFuZ2UnLCByZ2I6IHsgcjogMjI4LCBnOiA5MiwgYjogMjYgfSB9LAogICAgICAzNzogeyBpZDogMzcsIG5hbWU6ICdEYXJrIEdvbGRlbnJvZCcsIHJnYjogeyByOiAxNTYsIGc6IDEzMiwgYjogNDkgfSB9LAogICAgICAzODogeyBpZDogMzgsIG5hbWU6ICdHb2xkZW5yb2QnLCByZ2I6IHsgcjogMTk3LCBnOiAxNzMsIGI6IDQ5IH0gfSwKICAgICAgMzk6IHsgaWQ6IDM5LCBuYW1lOiAnTGlnaHQgR29sZGVucm9kJywgcmdiOiB7IHI6IDIzMiwgZzogMjEyLCBiOiA5NSB9IH0sCiAgICAgIDQwOiB7IGlkOiA0MCwgbmFtZTogJ0RhcmsgT2xpdmUnLCByZ2I6IHsgcjogNzQsIGc6IDEwNywgYjogNTggfSB9LAogICAgICA0MTogeyBpZDogNDEsIG5hbWU6ICdPbGl2ZScsIHJnYjogeyByOiA5MCwgZzogMTQ4LCBiOiA3NCB9IH0sCiAgICAgIDQyOiB7IGlkOiA0MiwgbmFtZTogJ0xpZ2h0IE9saXZlJywgcmdiOiB7IHI6IDEzMiwgZzogMTk3LCBiOiAxMTUgfSB9LAogICAgICA0MzogeyBpZDogNDMsIG5hbWU6ICdEYXJrIEN5YW4nLCByZ2I6IHsgcjogMTUsIGc6IDEyMSwgYjogMTU5IH0gfSwKICAgICAgNDQ6IHsgaWQ6IDQ1LCBuYW1lOiAnTGlnaHQgQmx1ZScsIHJnYjogeyByOiAxMjUsIGc6IDE5OSwgYjogMjU1IH0gfSwKICAgICAgNDU6IHsgaWQ6IDQ2LCBuYW1lOiAnRGFyayBJbmRpZ28nLCByZ2I6IHsgcjogNzcsIGc6IDQ5LCBiOiAxODQgfSB9LAogICAgICA0NjogeyBpZDogNDcsIG5hbWU6ICdEYXJrIFNsYXRlIEJsdWUnLCByZ2I6IHsgcjogNzQsIGc6IDY2LCBiOiAxMzIgfSB9LAogICAgICA0NzogeyBpZDogNDgsIG5hbWU6ICdTbGF0ZSBCbHVlJywgcmdiOiB7IHI6IDEyMiwgZzogMTEzLCBiOiAxOTYgfSB9LAogICAgICA0ODogeyBpZDogNDksIG5hbWU6ICdMaWdodCBTbGF0ZSBCbHVlJywgcmdiOiB7IHI6IDE4MSwgZzogMTc0LCBiOiAyNDEgfSB9LAogICAgICA0OTogeyBpZDogNTMsIG5hbWU6ICdEYXJrIFBlYWNoJywgcmdiOiB7IHI6IDE1NSwgZzogODIsIGI6IDczIH0gfSwKICAgICAgNTA6IHsgaWQ6IDU0LCBuYW1lOiAnUGVhY2gnLCByZ2I6IHsgcjogMjA5LCBnOiAxMjgsIGI6IDEyMCB9IH0sCiAgICAgIDUxOiB7IGlkOiA1NSwgbmFtZTogJ0xpZ2h0IFBlYWNoJywgcmdiOiB7IHI6IDI1MCwgZzogMTgyLCBiOiAxNjQgfSB9LAogICAgICA1MjogeyBpZDogNTAsIG5hbWU6ICdMaWdodCBCcm93bicsIHJnYjogeyByOiAyMTksIGc6IDE2NCwgYjogOTkgfSB9LAogICAgICA1MzogeyBpZDogNTYsIG5hbWU6ICdEYXJrIFRhbicsIHJnYjogeyByOiAxMjMsIGc6IDk5LCBiOiA4MiB9IH0sCiAgICAgIDU0OiB7IGlkOiA1NywgbmFtZTogJ1RhbicsIHJnYjogeyByOiAxNTYsIGc6IDEzMiwgYjogMTA3IH0gfSwKICAgICAgNTU6IHsgaWQ6IDM2LCBuYW1lOiAnTGlnaHQgVGFuJywgcmdiOiB7IHI6IDIxNCwgZzogMTgxLCBiOiAxNDggfSB9LAogICAgICA1NjogeyBpZDogNTEsIG5hbWU6ICdEYXJrIEJlaWdlJywgcmdiOiB7IHI6IDIwOSwgZzogMTI4LCBiOiA4MSB9IH0sCiAgICAgIDU3OiB7IGlkOiA2MSwgbmFtZTogJ0RhcmsgU3RvbmUnLCByZ2I6IHsgcjogMTA5LCBnOiAxMDAsIGI6IDYzIH0gfSwKICAgICAgNTg6IHsgaWQ6IDYyLCBuYW1lOiAnU3RvbmUnLCByZ2I6IHsgcjogMTQ4LCBnOiAxNDAsIGI6IDEwNyB9IH0sCiAgICAgIDU5OiB7IGlkOiA2MywgbmFtZTogJ0xpZ2h0IFN0b25lJywgcmdiOiB7IHI6IDIwNSwgZzogMTk3LCBiOiAxNTggfSB9LAogICAgICA2MDogeyBpZDogNTgsIG5hbWU6ICdEYXJrIFNsYXRlJywgcmdiOiB7IHI6IDUxLCBnOiA1NywgYjogNjUgfSB9LAogICAgICA2MTogeyBpZDogNTksIG5hbWU6ICdTbGF0ZScsIHJnYjogeyByOiAxMDksIGc6IDExNywgYjogMTQxIH0gfSwKICAgICAgNjI6IHsgaWQ6IDYwLCBuYW1lOiAnTGlnaHQgU2xhdGUnLCByZ2I6IHsgcjogMTc5LCBnOiAxODUsIGI6IDIwOSB9IH0sCiAgICAgIDYzOiB7IGlkOiAwLCBuYW1lOiAnVHJhbnNwYXJlbnQnLCByZ2I6IG51bGwgfSwKICAgIH0sIC8vIC0tLSBFTkQ6IENvbG9yIGRhdGEgLS0tCiAgICAvLyBPcHRpbWl6ZWQgQ1NTIENsYXNzZXMgZm9yIHJldXNlCiAgICBDU1NfQ0xBU1NFUzogewogICAgICBCVVRUT05fUFJJTUFSWTogYAogICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICM0ZmFjZmUgMCUsICMwMGYyZmUgMTAwJSk7CiAgICAgICAgY29sb3I6IHdoaXRlOyBib3JkZXI6IG5vbmU7IGJvcmRlci1yYWRpdXM6IDhweDsgcGFkZGluZzogMTBweCAxNnB4OwogICAgICAgIGN1cnNvcjogcG9pbnRlcjsgZm9udC13ZWlnaHQ6IDUwMDsgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZTsKICAgICAgICBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyBnYXA6IDhweDsKICAgICAgYCwKICAgICAgQlVUVE9OX1NFQ09OREFSWTogYAogICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LDI1NSwyNTUsMC4xKTsgY29sb3I6IHdoaXRlOwogICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsMC4yKTsgYm9yZGVyLXJhZGl1czogOHB4OwogICAgICAgIHBhZGRpbmc6IDhweCAxMnB4OyBjdXJzb3I6IHBvaW50ZXI7IHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7CiAgICAgIGAsCiAgICAgIE1PREVSTl9DQVJEOiBgCiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjEpOyBib3JkZXItcmFkaXVzOiAxMnB4OwogICAgICAgIHBhZGRpbmc6IDE4cHg7IGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LDI1NSwyNTUsMC4xKTsKICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTsKICAgICAgYCwKICAgICAgR1JBRElFTlRfVEVYVDogYAogICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICM0ZmFjZmUgMCUsICMwMGYyZmUgMTAwJSk7CiAgICAgICAgLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHQ7IC13ZWJraXQtdGV4dC1maWxsLWNvbG9yOiB0cmFuc3BhcmVudDsKICAgICAgICBiYWNrZ3JvdW5kLWNsaXA6IHRleHQ7IGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICBgLAogICAgfSwKICAgIFRIRU1FUzogewogICAgICAnQ2xhc3NpYyBBdXRvYm90JzogewogICAgICAgIHByaW1hcnk6ICcjMDAwMDAwJywKICAgICAgICBzZWNvbmRhcnk6ICcjMTExMTExJywKICAgICAgICBhY2NlbnQ6ICcjMjIyMjIyJywKICAgICAgICB0ZXh0OiAnI2ZmZmZmZicsCiAgICAgICAgaGlnaGxpZ2h0OiAnIzc3NWNlMycsCiAgICAgICAgc3VjY2VzczogJyMwMGZmMDAnLAogICAgICAgIGVycm9yOiAnI2ZmMDAwMCcsCiAgICAgICAgd2FybmluZzogJyNmZmFhMDAnLAogICAgICAgIGZvbnRGYW1pbHk6ICInU2Vnb2UgVUknLCBSb2JvdG8sIHNhbnMtc2VyaWYiLAogICAgICAgIGJvcmRlclJhZGl1czogJzEycHgnLAogICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLAogICAgICAgIGJvcmRlcldpZHRoOiAnMXB4JywKICAgICAgICBib3hTaGFkb3c6ICcwIDhweCAzMnB4IHJnYmEoMCwwLDAsMC42KSwgMCAwIDAgMXB4IHJnYmEoMjU1LDI1NSwyNTUsMC4xKScsCiAgICAgICAgYmFja2Ryb3BGaWx0ZXI6ICdibHVyKDEwcHgpJywKICAgICAgICBhbmltYXRpb25zOiB7CiAgICAgICAgICBnbG93OiBmYWxzZSwKICAgICAgICAgIHNjYW5saW5lOiBmYWxzZSwKICAgICAgICAgICdwaXhlbC1ibGluayc6IGZhbHNlLAogICAgICAgIH0sCiAgICAgIH0sCiAgICAgICdDbGFzc2ljIExpZ2h0JzogewogICAgICAgIHByaW1hcnk6ICcjZmZmZmZmJywKICAgICAgICBzZWNvbmRhcnk6ICcjZjhmOWZhJywKICAgICAgICBhY2NlbnQ6ICcjZTllY2VmJywKICAgICAgICB0ZXh0OiAnIzIxMjUyOScsCiAgICAgICAgaGlnaGxpZ2h0OiAnIzZmNDJjMScsCiAgICAgICAgc3VjY2VzczogJyMyOGE3NDUnLAogICAgICAgIGVycm9yOiAnI2RjMzU0NScsCiAgICAgICAgd2FybmluZzogJyNmZmMxMDcnLAogICAgICAgIGZvbnRGYW1pbHk6ICInU2Vnb2UgVUknLCBSb2JvdG8sIHNhbnMtc2VyaWYiLAogICAgICAgIGJvcmRlclJhZGl1czogJzEycHgnLAogICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLAogICAgICAgIGJvcmRlcldpZHRoOiAnMXB4JywKICAgICAgICBib3hTaGFkb3c6ICcwIDhweCAzMnB4IHJnYmEoMCwwLDAsMC4xNSksIDAgMCAwIDFweCByZ2JhKDAsMCwwLDAuMDgpJywKICAgICAgICBiYWNrZHJvcEZpbHRlcjogJ2JsdXIoMTBweCknLAogICAgICAgIGFuaW1hdGlvbnM6IHsKICAgICAgICAgIGdsb3c6IGZhbHNlLAogICAgICAgICAgc2NhbmxpbmU6IGZhbHNlLAogICAgICAgICAgJ3BpeGVsLWJsaW5rJzogZmFsc2UsCiAgICAgICAgfSwKICAgICAgfSwKICAgICAgJ05lb24gUmV0cm8nOiB7CiAgICAgICAgcHJpbWFyeTogJyMxYTFhMmUnLAogICAgICAgIHNlY29uZGFyeTogJyMxNjIxM2UnLAogICAgICAgIGFjY2VudDogJyMwZjM0NjAnLAogICAgICAgIHRleHQ6ICcjMDBmZjQxJywKICAgICAgICBoaWdobGlnaHQ6ICcjZmY2YjM1JywKICAgICAgICBzdWNjZXNzOiAnIzM5ZmYxNCcsCiAgICAgICAgZXJyb3I6ICcjZmYwNzNhJywKICAgICAgICB3YXJuaW5nOiAnI2ZmZmYwMCcsCiAgICAgICAgbmVvbjogJyMwMGZmZmYnLAogICAgICAgIHB1cnBsZTogJyNiZjAwZmYnLAogICAgICAgIHBpbms6ICcjZmYxNDkzJywKICAgICAgICBmb250RmFtaWx5OiAiJ1ByZXNzIFN0YXJ0IDJQJywgbW9ub3NwYWNlIiwKICAgICAgICBib3JkZXJSYWRpdXM6ICcwJywKICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJywKICAgICAgICBib3JkZXJXaWR0aDogJzNweCcsCiAgICAgICAgYm94U2hhZG93OiAnMCAwIDIwcHggcmdiYSgwLCAyNTUsIDY1LCAwLjMpLCBpbnNldCAwIDAgMjBweCByZ2JhKDAsIDI1NSwgNjUsIDAuMSknLAogICAgICAgIGJhY2tkcm9wRmlsdGVyOiAnbm9uZScsCiAgICAgICAgYW5pbWF0aW9uczogewogICAgICAgICAgZ2xvdzogdHJ1ZSwKICAgICAgICAgIHNjYW5saW5lOiB0cnVlLAogICAgICAgICAgJ3BpeGVsLWJsaW5rJzogdHJ1ZSwKICAgICAgICB9LAogICAgICB9LAogICAgfSwKICAgIGN1cnJlbnRUaGVtZTogJ0NsYXNzaWMgQXV0b2JvdCcsCiAgICBQQUlOVF9VTkFWQUlMQUJMRTogdHJ1ZSwKICAgIENPT1JESU5BVEVfTU9ERTogJ3Jvd3MnLAogICAgQ09PUkRJTkFURV9ESVJFQ1RJT046ICd0b3AtbGVmdCcsCiAgICBDT09SRElOQVRFX1NOQUtFOiB0cnVlLAogICAgQ09PUkRJTkFURV9CTE9DS19XSURUSDogNiwKICAgIENPT1JESU5BVEVfQkxPQ0tfSEVJR0hUOiAyLAogIH07CgogIGNvbnN0IGdldEN1cnJlbnRUaGVtZSA9ICgpID0+IENPTkZJRy5USEVNRVNbQ09ORklHLmN1cnJlbnRUaGVtZV07CgogIGNvbnN0IHN3aXRjaFRoZW1lID0gKHRoZW1lTmFtZSkgPT4gewogICAgaWYgKENPTkZJRy5USEVNRVNbdGhlbWVOYW1lXSkgewogICAgICBDT05GSUcuY3VycmVudFRoZW1lID0gdGhlbWVOYW1lOwogICAgICBzYXZlVGhlbWVQcmVmZXJlbmNlKCk7CgogICAgICAvLyBBUFBMWSBUSEVNRSBWQVJTL0NMQVNTIChuZXcpCiAgICAgIGFwcGx5VGhlbWUoKTsKCiAgICAgIC8vIFJlY3JlYXRlIFVJIChrZXB0IGZvciBub3cpCiAgICAgIGNyZWF0ZVVJKCk7CiAgICB9CiAgfTsKCiAgLy8gQWRkIHRoaXMgaGVscGVyIChwbGFjZSBpdCBhZnRlciBnZXRDdXJyZW50VGhlbWUvc3dpdGNoVGhlbWUgZGVmaW5pdGlvbnMpCiAgZnVuY3Rpb24gYXBwbHlUaGVtZSgpIHsKICAgIGNvbnN0IHRoZW1lID0gZ2V0Q3VycmVudFRoZW1lKCk7CiAgICAvLyBUb2dnbGUgdGhlbWUgY2xhc3Mgb24gZG9jdW1lbnRFbGVtZW50IHNvIENTUyB2YXJzIGNhc2NhZGUgdG8gb3VyIFVJCiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgKICAgICAgJ3dwbGFjZS10aGVtZS1jbGFzc2ljJywKICAgICAgJ3dwbGFjZS10aGVtZS1jbGFzc2ljLWxpZ2h0JywKICAgICAgJ3dwbGFjZS10aGVtZS1uZW9uJwogICAgKTsKCiAgICBsZXQgdGhlbWVDbGFzcyA9ICd3cGxhY2UtdGhlbWUtY2xhc3NpYyc7IC8vIGRlZmF1bHQKICAgIGlmIChDT05GSUcuY3VycmVudFRoZW1lID09PSAnTmVvbiBSZXRybycpIHsKICAgICAgdGhlbWVDbGFzcyA9ICd3cGxhY2UtdGhlbWUtbmVvbic7CiAgICB9IGVsc2UgaWYgKENPTkZJRy5jdXJyZW50VGhlbWUgPT09ICdDbGFzc2ljIExpZ2h0JykgewogICAgICB0aGVtZUNsYXNzID0gJ3dwbGFjZS10aGVtZS1jbGFzc2ljLWxpZ2h0JzsKICAgIH0KCiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGVtZUNsYXNzKTsKCiAgICAvLyBBbHNvIHNldCBDU1MgdmFyaWFibGVzIGV4cGxpY2l0bHkgaW4gY2FzZSB5b3Ugd2FudCBydW50aW1lIG92ZXJyaWRlcwogICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgIGNvbnN0IHNldFZhciA9IChrLCB2KSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eShrLCB2KTsKICAgICAgfSBjYXRjaCB7fQogICAgfTsKCiAgICBzZXRWYXIoJy0td3BsYWNlLXByaW1hcnknLCB0aGVtZS5wcmltYXJ5KTsKICAgIHNldFZhcignLS13cGxhY2Utc2Vjb25kYXJ5JywgdGhlbWUuc2Vjb25kYXJ5KTsKICAgIHNldFZhcignLS13cGxhY2UtYWNjZW50JywgdGhlbWUuYWNjZW50KTsKICAgIHNldFZhcignLS13cGxhY2UtdGV4dCcsIHRoZW1lLnRleHQpOwogICAgc2V0VmFyKCctLXdwbGFjZS1oaWdobGlnaHQnLCB0aGVtZS5oaWdobGlnaHQpOwogICAgc2V0VmFyKCctLXdwbGFjZS1zdWNjZXNzJywgdGhlbWUuc3VjY2Vzcyk7CiAgICBzZXRWYXIoJy0td3BsYWNlLWVycm9yJywgdGhlbWUuZXJyb3IpOwogICAgc2V0VmFyKCctLXdwbGFjZS13YXJuaW5nJywgdGhlbWUud2FybmluZyk7CgogICAgLy8gVHlwb2dyYXBoeSArIGxvb2sKICAgIHNldFZhcignLS13cGxhY2UtZm9udCcsIHRoZW1lLmZvbnRGYW1pbHkgfHwgIidTZWdvZSBVSScsIFJvYm90bywgc2Fucy1zZXJpZiIpOwogICAgc2V0VmFyKCctLXdwbGFjZS1yYWRpdXMnLCAnJyArICh0aGVtZS5ib3JkZXJSYWRpdXMgfHwgJzEycHgnKSk7CiAgICBzZXRWYXIoJy0td3BsYWNlLWJvcmRlci1zdHlsZScsICcnICsgKHRoZW1lLmJvcmRlclN0eWxlIHx8ICdzb2xpZCcpKTsKICAgIHNldFZhcignLS13cGxhY2UtYm9yZGVyLXdpZHRoJywgJycgKyAodGhlbWUuYm9yZGVyV2lkdGggfHwgJzFweCcpKTsKICAgIHNldFZhcignLS13cGxhY2UtYmFja2Ryb3AnLCAnJyArICh0aGVtZS5iYWNrZHJvcEZpbHRlciB8fCAnYmx1cigxMHB4KScpKTsKICAgIHNldFZhcignLS13cGxhY2UtYm9yZGVyLWNvbG9yJywgJ3JnYmEoMjU1LDI1NSwyNTUsMC4xKScpOwogIH0KCiAgY29uc3Qgc2F2ZVRoZW1lUHJlZmVyZW5jZSA9ICgpID0+IHsKICAgIHRyeSB7CiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3cGxhY2UtdGhlbWUnLCBDT05GSUcuY3VycmVudFRoZW1lKTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3Qgc2F2ZSB0aGVtZSBwcmVmZXJlbmNlOicsIGUpOwogICAgfQogIH07CgogIGNvbnN0IGxvYWRUaGVtZVByZWZlcmVuY2UgPSAoKSA9PiB7CiAgICB0cnkgewogICAgICBjb25zdCBzYXZlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd3cGxhY2UtdGhlbWUnKTsKICAgICAgaWYgKHNhdmVkICYmIENPTkZJRy5USEVNRVNbc2F2ZWRdKSB7CiAgICAgICAgQ09ORklHLmN1cnJlbnRUaGVtZSA9IHNhdmVkOwogICAgICB9CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgdGhlbWUgcHJlZmVyZW5jZTonLCBlKTsKICAgIH0KICB9OwoKICAvLyBTaW1wbGUgdHJhbnNsYXRpb24gY2FjaGUKICBjb25zdCB0cmFuc2xhdGlvbkNhY2hlID0gbmV3IE1hcCgpOwoKICAvLyBEeW5hbWljYWxseSBsb2FkZWQgdHJhbnNsYXRpb25zCiAgbGV0IGxvYWRlZFRyYW5zbGF0aW9ucyA9IHt9OwoKICAvLyBBdmFpbGFibGUgbGFuZ3VhZ2VzCiAgY29uc3QgQVZBSUxBQkxFX0xBTkdVQUdFUyA9IFsKICAgICdlbicsCiAgICAncnUnLAogICAgJ3B0JywKICAgICd2aScsCiAgICAnZnInLAogICAgJ2lkJywKICAgICd0cicsCiAgICAnemgtQ04nLAogICAgJ3poLVRXJywKICAgICdqYScsCiAgICAna28nLAogICAgJ3VrJywKICBdOwoKICAvLyBGdW5jdGlvbiB0byBsb2FkIHRyYW5zbGF0aW9ucyBmcm9tIEpTT04gZmlsZSB3aXRoIHJldHJ5IG1lY2hhbmlzbQogIGNvbnN0IGxvYWRUcmFuc2xhdGlvbnMgPSBhc3luYyAobGFuZ3VhZ2UsIHJldHJ5Q291bnQgPSAwKSA9PiB7CiAgICBpZiAobG9hZGVkVHJhbnNsYXRpb25zW2xhbmd1YWdlXSkgewogICAgICByZXR1cm4gbG9hZGVkVHJhbnNsYXRpb25zW2xhbmd1YWdlXTsKICAgIH0KCiAgICAvLyBMb2FkIHRyYW5zbGF0aW9ucyBmcm9tIENETgogICAgY29uc3QgdXJsID0gYGh0dHBzOi8vd3BsYWNlLWF1dG9ib3QuZ2l0aHViLmlvL1dQbGFjZS1BdXRvQk9UL21haW4vbGFuZy8ke2xhbmd1YWdlfS5qc29uYDsKICAgIGNvbnN0IG1heFJldHJpZXMgPSAzOwogICAgY29uc3QgYmFzZURlbGF5ID0gMTAwMDsgLy8gMSBzZWNvbmQKCiAgICB0cnkgewogICAgICBpZiAocmV0cnlDb3VudCA9PT0gMCkgewogICAgICAgIGNvbnNvbGUubG9nKGDwn5SEIExvYWRpbmcgJHtsYW5ndWFnZX0gdHJhbnNsYXRpb25zIGZyb20gQ0ROLi4uYCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICBg8J+UhCBSZXRyeWluZyAke2xhbmd1YWdlfSB0cmFuc2xhdGlvbnMgKGF0dGVtcHQgJHtyZXRyeUNvdW50ICsgMX0vJHttYXhSZXRyaWVzICsgMX0pLi4uYAogICAgICAgICk7CiAgICAgIH0KCiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTsKICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgY29uc3QgdHJhbnNsYXRpb25zID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRyYW5zbGF0aW9ucyBpcyBhbiBvYmplY3Qgd2l0aCBrZXlzCiAgICAgICAgaWYgKAogICAgICAgICAgdHlwZW9mIHRyYW5zbGF0aW9ucyA9PT0gJ29iamVjdCcgJiYKICAgICAgICAgIHRyYW5zbGF0aW9ucyAhPT0gbnVsbCAmJgogICAgICAgICAgT2JqZWN0LmtleXModHJhbnNsYXRpb25zKS5sZW5ndGggPiAwCiAgICAgICAgKSB7CiAgICAgICAgICBsb2FkZWRUcmFuc2xhdGlvbnNbbGFuZ3VhZ2VdID0gdHJhbnNsYXRpb25zOwogICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgIGDwn5OaIExvYWRlZCAke2xhbmd1YWdlfSB0cmFuc2xhdGlvbnMgc3VjY2Vzc2Z1bGx5IGZyb20gQ0ROICgkewogICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRyYW5zbGF0aW9ucykubGVuZ3RoCiAgICAgICAgICAgIH0ga2V5cylgCiAgICAgICAgICApOwogICAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS53YXJuKGDinYwgSW52YWxpZCB0cmFuc2xhdGlvbiBmb3JtYXQgZm9yICR7bGFuZ3VhZ2V9YCk7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdHJhbnNsYXRpb24gZm9ybWF0Jyk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUud2FybigKICAgICAgICAgIGDinYwgQ0ROIHJldHVybmVkIEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9IGZvciAke2xhbmd1YWdlfSB0cmFuc2xhdGlvbnNgCiAgICAgICAgKTsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoCiAgICAgICAgYOKdjCBGYWlsZWQgdG8gbG9hZCAke2xhbmd1YWdlfSB0cmFuc2xhdGlvbnMgZnJvbSBDRE4gKGF0dGVtcHQgJHtyZXRyeUNvdW50ICsgMX0pOmAsCiAgICAgICAgZXJyb3IKICAgICAgKTsKCiAgICAgIC8vIFJldHJ5IHdpdGggZXhwb25lbnRpYWwgYmFja29mZgogICAgICBpZiAocmV0cnlDb3VudCA8IG1heFJldHJpZXMpIHsKICAgICAgICBjb25zdCBkZWxheSA9IGJhc2VEZWxheSAqIE1hdGgucG93KDIsIHJldHJ5Q291bnQpOwogICAgICAgIGNvbnNvbGUubG9nKGDij7MgUmV0cnlpbmcgaW4gJHtkZWxheX1tcy4uLmApOwogICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7CiAgICAgICAgcmV0dXJuIGxvYWRUcmFuc2xhdGlvbnMobGFuZ3VhZ2UsIHJldHJ5Q291bnQgKyAxKTsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBudWxsOwogIH07CgogIGNvbnN0IGxvYWRMYW5ndWFnZVByZWZlcmVuY2UgPSBhc3luYyAoKSA9PiB7CiAgICBjb25zdCBzYXZlZExhbmd1YWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3dwbGFjZV9sYW5ndWFnZScpOwogICAgY29uc3QgYnJvd3NlckxvY2FsZSA9IG5hdmlnYXRvci5sYW5ndWFnZTsKICAgIGNvbnN0IGJyb3dzZXJMYW5ndWFnZSA9IGJyb3dzZXJMb2NhbGUuc3BsaXQoJy0nKVswXTsKCiAgICBsZXQgc2VsZWN0ZWRMYW5ndWFnZSA9ICdlbic7IC8vIERlZmF1bHQgZmFsbGJhY2sKCiAgICB0cnkgewogICAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIHRoZSBzYXZlZCBsYW5ndWFnZSBhdmFpbGFibGUKICAgICAgaWYgKHNhdmVkTGFuZ3VhZ2UgJiYgQVZBSUxBQkxFX0xBTkdVQUdFUy5pbmNsdWRlcyhzYXZlZExhbmd1YWdlKSkgewogICAgICAgIHNlbGVjdGVkTGFuZ3VhZ2UgPSBzYXZlZExhbmd1YWdlOwogICAgICAgIGNvbnNvbGUubG9nKGDwn5SEIFVzaW5nIHNhdmVkIGxhbmd1YWdlIHByZWZlcmVuY2U6ICR7c2VsZWN0ZWRMYW5ndWFnZX1gKTsKICAgICAgfQogICAgICAvLyBUcnkgZnVsbCBsb2NhbGUgbWF0Y2ggKGUuZy4gInpoLUNOIiwgInpoLVRXIiBldGMpCiAgICAgIGVsc2UgaWYgKEFWQUlMQUJMRV9MQU5HVUFHRVMuaW5jbHVkZXMoYnJvd3NlckxvY2FsZSkpIHsKICAgICAgICBzZWxlY3RlZExhbmd1YWdlID0gYnJvd3NlckxvY2FsZTsKICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd3BsYWNlX2xhbmd1YWdlJywgYnJvd3NlckxvY2FsZSk7CiAgICAgICAgY29uc29sZS5sb2coYPCflIQgVXNpbmcgYnJvd3NlciBsb2NhbGU6ICR7c2VsZWN0ZWRMYW5ndWFnZX1gKTsKICAgICAgfQogICAgICAvLyBUcnkgYmFzZSBsYW5ndWFnZSBtYXRjaCAoZS5nLiAiZW4iIGZvciAiZW4tVVMiIG9yICJlbi1HQiIgZXRjKQogICAgICBlbHNlIGlmIChBVkFJTEFCTEVfTEFOR1VBR0VTLmluY2x1ZGVzKGJyb3dzZXJMYW5ndWFnZSkpIHsKICAgICAgICBzZWxlY3RlZExhbmd1YWdlID0gYnJvd3Nlckxhbmd1YWdlOwogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3cGxhY2VfbGFuZ3VhZ2UnLCBicm93c2VyTGFuZ3VhZ2UpOwogICAgICAgIGNvbnNvbGUubG9nKGDwn5SEIFVzaW5nIGJyb3dzZXIgbGFuZ3VhZ2U6ICR7c2VsZWN0ZWRMYW5ndWFnZX1gKTsKICAgICAgfQogICAgICAvLyBVc2UgRW5nbGlzaCBhcyBmYWxsYmFjawogICAgICBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBObyBtYXRjaGluZyBsYW5ndWFnZSBmb3VuZCwgdXNpbmcgRW5nbGlzaCBmYWxsYmFja2ApOwogICAgICB9CgogICAgICAvLyBTZXQgdGhlIGxhbmd1YWdlIGluIHN0YXRlIGZpcnN0CiAgICAgIHN0YXRlLmxhbmd1YWdlID0gc2VsZWN0ZWRMYW5ndWFnZTsKCiAgICAgIC8vIE9ubHkgbG9hZCB0cmFuc2xhdGlvbnMgaWYgbm90IGFscmVhZHkgbG9hZGVkIGFuZCBub3QgRW5nbGlzaCAod2hpY2ggc2hvdWxkIGFscmVhZHkgYmUgbG9hZGVkKQogICAgICBpZiAoc2VsZWN0ZWRMYW5ndWFnZSAhPT0gJ2VuJyAmJiAhbG9hZGVkVHJhbnNsYXRpb25zW3NlbGVjdGVkTGFuZ3VhZ2VdKSB7CiAgICAgICAgY29uc3QgbG9hZGVkID0gYXdhaXQgbG9hZFRyYW5zbGF0aW9ucyhzZWxlY3RlZExhbmd1YWdlKTsKICAgICAgICBpZiAoIWxvYWRlZCkgewogICAgICAgICAgY29uc29sZS53YXJuKAogICAgICAgICAgICBg4pqg77iPIEZhaWxlZCB0byBsb2FkICR7c2VsZWN0ZWRMYW5ndWFnZX0gdHJhbnNsYXRpb25zLCBmYWxsaW5nIGJhY2sgdG8gRW5nbGlzaGAKICAgICAgICAgICk7CiAgICAgICAgICBzdGF0ZS5sYW5ndWFnZSA9ICdlbic7CiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd3BsYWNlX2xhbmd1YWdlJywgJ2VuJyk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKGDinYwgRXJyb3IgaW4gbG9hZExhbmd1YWdlUHJlZmVyZW5jZTpgLCBlcnJvcik7CiAgICAgIHN0YXRlLmxhbmd1YWdlID0gJ2VuJzsgLy8gQWx3YXlzIGVuc3VyZSB3ZSBoYXZlIGEgdmFsaWQgbGFuZ3VhZ2UKICAgIH0KICB9OwoKICAvLyBTaW1wbGUgdXNlciBub3RpZmljYXRpb24gZnVuY3Rpb24gZm9yIGNyaXRpY2FsIGlzc3VlcwogIGNvbnN0IHNob3dUcmFuc2xhdGlvbldhcm5pbmcgPSAobWVzc2FnZSkgPT4gewogICAgdHJ5IHsKICAgICAgLy8gQ3JlYXRlIGEgc2ltcGxlIHRlbXBvcmFyeSBub3RpZmljYXRpb24gYmFubmVyCiAgICAgIGNvbnN0IHdhcm5pbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgd2FybmluZy5zdHlsZS5jc3NUZXh0ID0gYAogICAgICAgIHBvc2l0aW9uOiBmaXhlZDsgdG9wOiAxMHB4OyByaWdodDogMTBweDsgei1pbmRleDogMTAwMDE7CiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDE5MywgNywgMC45NSk7IGNvbG9yOiAjMjEyNTI5OyBwYWRkaW5nOiAxMnB4IDE2cHg7CiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4OyBmb250LXNpemU6IDE0cHg7IGZvbnQtd2VpZ2h0OiA1MDA7CiAgICAgICAgYm94LXNoYWRvdzogMCA0cHggMTJweCByZ2JhKDAsMCwwLDAuMyk7IGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMjU1LCAxOTMsIDcsIDAuOCk7CiAgICAgICAgbWF4LXdpZHRoOiAzMDBweDsgd29yZC13cmFwOiBicmVhay13b3JkOwogICAgICBgOwogICAgICB3YXJuaW5nLnRleHRDb250ZW50ID0gbWVzc2FnZTsKICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh3YXJuaW5nKTsKCiAgICAgIC8vIEF1dG8tcmVtb3ZlIGFmdGVyIDggc2Vjb25kcwogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBpZiAod2FybmluZy5wYXJlbnROb2RlKSB7CiAgICAgICAgICB3YXJuaW5nLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgfSwgODAwMCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIC8vIElmIERPTSBtYW5pcHVsYXRpb24gZmFpbHMsIGp1c3QgbG9nCiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHNob3cgdHJhbnNsYXRpb24gd2FybmluZyBVSTonLCBlKTsKICAgIH0KICB9OwoKICAvLyBJbml0aWFsaXplIHRyYW5zbGF0aW9ucyBmdW5jdGlvbgogIGNvbnN0IGluaXRpYWxpemVUcmFuc2xhdGlvbnMgPSBhc3luYyAoKSA9PiB7CiAgICB0cnkgewogICAgICBjb25zb2xlLmxvZygn8J+MkCBJbml0aWFsaXppbmcgdHJhbnNsYXRpb24gc3lzdGVtLi4uJyk7CgogICAgICAvLyBBbHdheXMgZW5zdXJlIEVuZ2xpc2ggaXMgbG9hZGVkIGFzIGZhbGxiYWNrIGZpcnN0CiAgICAgIGlmICghbG9hZGVkVHJhbnNsYXRpb25zWydlbiddKSB7CiAgICAgICAgY29uc3QgZW5nbGlzaExvYWRlZCA9IGF3YWl0IGxvYWRUcmFuc2xhdGlvbnMoJ2VuJyk7CiAgICAgICAgaWYgKCFlbmdsaXNoTG9hZGVkKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBGYWlsZWQgdG8gbG9hZCBFbmdsaXNoIHRyYW5zbGF0aW9ucyBmcm9tIENETiwgdXNpbmcgZmFsbGJhY2snKTsKICAgICAgICAgIHNob3dUcmFuc2xhdGlvbldhcm5pbmcoJ+KaoO+4jyBUcmFuc2xhdGlvbiBsb2FkaW5nIGZhaWxlZCwgdXNpbmcgYmFzaWMgZmFsbGJhY2tzJyk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBUaGVuIGxvYWQgdXNlcidzIGxhbmd1YWdlIHByZWZlcmVuY2UKICAgICAgYXdhaXQgbG9hZExhbmd1YWdlUHJlZmVyZW5jZSgpOwoKICAgICAgY29uc29sZS5sb2coYOKchSBUcmFuc2xhdGlvbiBzeXN0ZW0gaW5pdGlhbGl6ZWQuIEFjdGl2ZSBsYW5ndWFnZTogJHtzdGF0ZS5sYW5ndWFnZX1gKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBUcmFuc2xhdGlvbiBpbml0aWFsaXphdGlvbiBmYWlsZWQ6JywgZXJyb3IpOwogICAgICAvLyBFbnN1cmUgc3RhdGUgaGFzIGEgdmFsaWQgbGFuZ3VhZ2UgZXZlbiBpZiBsb2FkaW5nIGZhaWxzCiAgICAgIGlmICghc3RhdGUubGFuZ3VhZ2UpIHsKICAgICAgICBzdGF0ZS5sYW5ndWFnZSA9ICdlbic7CiAgICAgIH0KICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gVXNpbmcgZmFsbGJhY2sgdHJhbnNsYXRpb25zIGR1ZSB0byBpbml0aWFsaXphdGlvbiBmYWlsdXJlJyk7CiAgICAgIHNob3dUcmFuc2xhdGlvbldhcm5pbmcoJ+KaoO+4jyBUcmFuc2xhdGlvbiBzeXN0ZW0gZXJyb3IsIHVzaW5nIGJhc2ljIEVuZ2xpc2gnKTsKICAgIH0KICB9OwoKICAvLyBFbWVyZ2VuY3kgZmFsbGJhY2sgVEVYVCAobWluaW1hbCkKICBjb25zdCBGQUxMQkFDS19URVhUID0gewogICAgZW46IHsKICAgICAgdGl0bGU6ICdXUGxhY2UgQXV0by1JbWFnZScsCiAgICAgIHRvZ2dsZU92ZXJsYXk6ICdUb2dnbGUgT3ZlcmxheScsCiAgICAgIHNjYW5Db2xvcnM6ICdTY2FuIENvbG9ycycsCiAgICAgIHVwbG9hZEltYWdlOiAnVXBsb2FkIEltYWdlJywKICAgICAgcmVzaXplSW1hZ2U6ICdSZXNpemUgSW1hZ2UnLAogICAgICBzZWxlY3RQb3NpdGlvbjogJ1NlbGVjdCBQb3NpdGlvbicsCiAgICAgIHN0YXJ0UGFpbnRpbmc6ICdTdGFydCBQYWludGluZycsCiAgICAgIHN0b3BQYWludGluZzogJ1N0b3AgUGFpbnRpbmcnLAogICAgICBwcm9ncmVzczogJ1Byb2dyZXNzJywKICAgICAgcGl4ZWxzOiAnUGl4ZWxzJywKICAgICAgY2hhcmdlczogJ0NoYXJnZXMnLAogICAgICBiYXRjaFNpemU6ICdCYXRjaCBTaXplJywKICAgICAgY29vbGRvd25TZXR0aW5nczogJ0Nvb2xkb3duIFNldHRpbmdzJywKICAgICAgd2FpdENoYXJnZXM6ICdXYWl0IGZvciBDaGFyZ2VzJywKICAgICAgc2V0dGluZ3M6ICdTZXR0aW5ncycsCiAgICAgIHNob3dTdGF0czogJ1Nob3cgU3RhdGlzdGljcycsCiAgICAgIGNvbXBhY3RNb2RlOiAnQ29tcGFjdCBNb2RlJywKICAgICAgbWluaW1pemU6ICdNaW5pbWl6ZScsCiAgICAgIHRva2VuQ2FwdHVyZWRTdWNjZXNzOiAnVG9rZW4gY2FwdHVyZWQgc3VjY2Vzc2Z1bGx5JywKICAgICAgdHVybnN0aWxlSW5zdHJ1Y3Rpb25zOiAnQ29tcGxldGUgdGhlIHZlcmlmaWNhdGlvbicsCiAgICAgIGhpZGVUdXJuc3RpbGVCdG46ICdIaWRlJywKICAgICAgbm90aWZpY2F0aW9uc05vdFN1cHBvcnRlZDogJ05vdGlmaWNhdGlvbnMgbm90IHN1cHBvcnRlZCcsCiAgICAgIGNoYXJnZXNSZWFkeU1lc3NhZ2U6ICdDaGFyZ2VzIGFyZSByZWFkeScsCiAgICAgIGNoYXJnZXNSZWFkeU5vdGlmaWNhdGlvbjogJ1dQbGFjZSBBdXRvQm90JywKICAgICAgaW5pdE1lc3NhZ2U6ICJDbGljayAnVXBsb2FkIEltYWdlJyB0byBiZWdpbiIsCiAgICB9LAogIH07CgogIC8vIFNhZmUgdHJhbnNsYXRpb24gZnVuY3Rpb24gd2l0aCBtdWx0aXBsZSBmYWxsYmFjayBsZXZlbHMKICBjb25zdCBnZXRUZXh0ID0gKGtleSwgcmVwbGFjZW1lbnRzID0ge30pID0+IHsKICAgIC8vIFRyeSBjdXJyZW50IGxhbmd1YWdlIGZpcnN0CiAgICBsZXQgdGV4dCA9IGxvYWRlZFRyYW5zbGF0aW9uc1tzdGF0ZS5sYW5ndWFnZV0/LltrZXldOwoKICAgIC8vIEZhbGxiYWNrIHRvIEVuZ2xpc2ggdHJhbnNsYXRpb25zCiAgICBpZiAoIXRleHQgJiYgc3RhdGUubGFuZ3VhZ2UgIT09ICdlbicpIHsKICAgICAgdGV4dCA9IGxvYWRlZFRyYW5zbGF0aW9uc1snZW4nXT8uW2tleV07CiAgICB9CgogICAgLy8gRmFsbGJhY2sgdG8gaGFyZGNvZGVkIEVuZ2xpc2gKICAgIGlmICghdGV4dCkgewogICAgICB0ZXh0ID0gRkFMTEJBQ0tfVEVYVFsnZW4nXT8uW2tleV07CiAgICB9CgogICAgLy8gTGFzdCByZXNvcnQgLSByZXR1cm4gdGhlIGtleSBpdHNlbGYKICAgIGlmICghdGV4dCkgewogICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyBNaXNzaW5nIHRyYW5zbGF0aW9uIGZvciBrZXk6ICR7a2V5fWApOwogICAgICByZXR1cm4ga2V5OwogICAgfQoKICAgIC8vIEhhbmRsZSBzdHJpbmcgcmVwbGFjZW1lbnRzIGxpa2Uge2NvdW50fSwge3RpbWV9LCBldGMuCiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMocmVwbGFjZW1lbnRzKS5yZWR1Y2UoKHJlc3VsdCwgW3BsYWNlaG9sZGVyLCB2YWx1ZV0pID0+IHsKICAgICAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKG5ldyBSZWdFeHAoYFxceyR7cGxhY2Vob2xkZXJ9XFx9YCwgJ2cnKSwgdmFsdWUpOwogICAgfSwgdGV4dCk7CiAgfTsKCiAgLy8gR0xPQkFMIFNUQVRFCiAgY29uc3Qgc3RhdGUgPSB7CiAgICBydW5uaW5nOiBmYWxzZSwKICAgIGltYWdlTG9hZGVkOiBmYWxzZSwKICAgIHByb2Nlc3Npbmc6IGZhbHNlLAogICAgdG90YWxQaXhlbHM6IDAsCiAgICBwYWludGVkUGl4ZWxzOiAwLAogICAgYXZhaWxhYmxlQ29sb3JzOiBbXSwKICAgIGFjdGl2ZUNvbG9yUGFsZXR0ZTogW10sIC8vIFVzZXItc2VsZWN0ZWQgY29sb3JzIGZvciBjb252ZXJzaW9uCiAgICBwYWludFdoaXRlUGl4ZWxzOiB0cnVlLCAvLyBEZWZhdWx0IHRvIE9OCiAgICBmdWxsQ2hhcmdlRGF0YTogbnVsbCwKICAgIGZ1bGxDaGFyZ2VJbnRlcnZhbDogbnVsbCwKICAgIHBhaW50VHJhbnNwYXJlbnRQaXhlbHM6IGZhbHNlLCAvLyBEZWZhdWx0IHRvIE9GRgogICAgZGlzcGxheUNoYXJnZXM6IDAsCiAgICBwcmVjaXNlQ3VycmVudENoYXJnZXM6IDAsCiAgICBtYXhDaGFyZ2VzOiAxLCAvLyBEZWZhdWx0IG1heCBjaGFyZ2VzCiAgICBjb29sZG93bjogQ09ORklHLkNPT0xET1dOX0RFRkFVTFQsCiAgICBpbWFnZURhdGE6IG51bGwsCiAgICBzdG9wRmxhZzogZmFsc2UsCiAgICBjb2xvcnNDaGVja2VkOiBmYWxzZSwKICAgIHN0YXJ0UG9zaXRpb246IG51bGwsCiAgICBzZWxlY3RpbmdQb3NpdGlvbjogZmFsc2UsCiAgICByZWdpb246IG51bGwsCiAgICBtaW5pbWl6ZWQ6IGZhbHNlLAogICAgbGFzdFBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSwKICAgIGVzdGltYXRlZFRpbWU6IDAsCiAgICBsYW5ndWFnZTogJ2VuJywKICAgIHBhaW50aW5nU3BlZWQ6IENPTkZJRy5QQUlOVElOR19TUEVFRC5ERUZBVUxULCAvLyBwaXhlbHMgYmF0Y2ggc2l6ZQogICAgYmF0Y2hNb2RlOiBDT05GSUcuQkFUQ0hfTU9ERSwgLy8gIm5vcm1hbCIgb3IgInJhbmRvbSIKICAgIHJhbmRvbUJhdGNoTWluOiBDT05GSUcuUkFORE9NX0JBVENIX1JBTkdFLk1JTiwgLy8gUmFuZG9tIHJhbmdlIG1pbmltdW0KICAgIHJhbmRvbUJhdGNoTWF4OiBDT05GSUcuUkFORE9NX0JBVENIX1JBTkdFLk1BWCwgLy8gUmFuZG9tIHJhbmdlIG1heGltdW0KICAgIGNvb2xkb3duQ2hhcmdlVGhyZXNob2xkOiBDT05GSUcuQ09PTERPV05fQ0hBUkdFX1RIUkVTSE9MRCwKICAgIGNoYXJnZXNUaHJlc2hvbGRJbnRlcnZhbDogbnVsbCwKICAgIHRva2VuU291cmNlOiBDT05GSUcuVE9LRU5fU09VUkNFLCAvLyAiZ2VuZXJhdG9yIiBvciAibWFudWFsIgogICAgaW5pdGlhbFNldHVwQ29tcGxldGU6IGZhbHNlLCAvLyBUcmFjayBpZiBpbml0aWFsIHN0YXJ0dXAgc2V0dXAgaXMgY29tcGxldGUgKG9ubHkgaGFwcGVucyBvbmNlKQogICAgb3ZlcmxheU9wYWNpdHk6IENPTkZJRy5PVkVSTEFZLk9QQUNJVFlfREVGQVVMVCwKICAgIGJsdWVNYXJibGVFbmFibGVkOiBDT05GSUcuT1ZFUkxBWS5CTFVFX01BUkJMRV9ERUZBVUxULAogICAgZGl0aGVyaW5nRW5hYmxlZDogdHJ1ZSwKICAgIC8vIEFkdmFuY2VkIGNvbG9yIG1hdGNoaW5nIHNldHRpbmdzCiAgICBjb2xvck1hdGNoaW5nQWxnb3JpdGhtOiAnbGFiJywKICAgIGVuYWJsZUNocm9tYVBlbmFsdHk6IHRydWUsCiAgICBjaHJvbWFQZW5hbHR5V2VpZ2h0OiAwLjE1LAogICAgY3VzdG9tVHJhbnNwYXJlbmN5VGhyZXNob2xkOiBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRCwKICAgIGN1c3RvbVdoaXRlVGhyZXNob2xkOiBDT05GSUcuV0hJVEVfVEhSRVNIT0xELAogICAgcmVzaXplU2V0dGluZ3M6IG51bGwsCiAgICBvcmlnaW5hbEltYWdlOiBudWxsLAogICAgcmVzaXplSWdub3JlTWFzazogbnVsbCwKICAgIHBhaW50VW5hdmFpbGFibGVQaXhlbHM6IENPTkZJRy5QQUlOVF9VTkFWQUlMQUJMRSwKICAgIC8vIENvb3JkaW5hdGUgZ2VuZXJhdGlvbiBzZXR0aW5ncwogICAgY29vcmRpbmF0ZU1vZGU6IENPTkZJRy5DT09SRElOQVRFX01PREUsCiAgICBjb29yZGluYXRlRGlyZWN0aW9uOiBDT05GSUcuQ09PUkRJTkFURV9ESVJFQ1RJT04sCiAgICBjb29yZGluYXRlU25ha2U6IENPTkZJRy5DT09SRElOQVRFX1NOQUtFLAogICAgYmxvY2tXaWR0aDogQ09ORklHLkNPT1JESU5BVEVfQkxPQ0tfV0lEVEgsCiAgICBibG9ja0hlaWdodDogQ09ORklHLkNPT1JESU5BVEVfQkxPQ0tfSEVJR0hULAogICAgbm90aWZpY2F0aW9uc0VuYWJsZWQ6IENPTkZJRy5OT1RJRklDQVRJT05TLkVOQUJMRUQsCiAgICBub3RpZnlPbkNoYXJnZXNSZWFjaGVkOiBDT05GSUcuTk9USUZJQ0FUSU9OUy5PTl9DSEFSR0VTX1JFQUNIRUQsCiAgICBub3RpZnlPbmx5V2hlblVuZm9jdXNlZDogQ09ORklHLk5PVElGSUNBVElPTlMuT05MWV9XSEVOX1VORk9DVVNFRCwKICAgIG5vdGlmaWNhdGlvbkludGVydmFsTWludXRlczogQ09ORklHLk5PVElGSUNBVElPTlMuUkVQRUFUX01JTlVURVMsCiAgICBfbGFzdENoYXJnZXNOb3RpZnlBdDogMCwKICAgIF9sYXN0Q2hhcmdlc0JlbG93OiB0cnVlLAogICAgLy8gU21hcnQgc2F2ZSB0cmFja2luZwogICAgX2xhc3RTYXZlUGl4ZWxDb3VudDogMCwKICAgIF9sYXN0U2F2ZVRpbWU6IDAsCiAgICBfc2F2ZUluUHJvZ3Jlc3M6IGZhbHNlLAogICAgcGFpbnRlZE1hcDogbnVsbCwKICB9OwoKICBsZXQgX3VwZGF0ZVJlc2l6ZVByZXZpZXcgPSAoKSA9PiB7fTsKICBsZXQgX3Jlc2l6ZURpYWxvZ0NsZWFudXAgPSBudWxsOwoKICAvLyAtLS0gT1ZFUkxBWSBVUERBVEU6IE9wdGltaXplZCBPdmVybGF5TWFuYWdlciBjbGFzcyB3aXRoIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyAtLS0KICBjbGFzcyBPdmVybGF5TWFuYWdlciB7CiAgICBjb25zdHJ1Y3RvcigpIHsKICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTsKICAgICAgdGhpcy5zdGFydENvb3JkcyA9IG51bGw7IC8vIHsgcmVnaW9uOiB7eCwgeX0sIHBpeGVsOiB7eCwgeX0gfQogICAgICB0aGlzLmltYWdlQml0bWFwID0gbnVsbDsKICAgICAgdGhpcy5jaHVua2VkVGlsZXMgPSBuZXcgTWFwKCk7IC8vIE1hcDwidGlsZVgsdGlsZVkiLCBJbWFnZUJpdG1hcD4KICAgICAgdGhpcy5vcmlnaW5hbFRpbGVzID0gbmV3IE1hcCgpOyAvLyBNYXA8InRpbGVYLHRpbGVZIiwgSW1hZ2VCaXRtYXA+IHN0b3JlIGxhdGVzdCBvcmlnaW5hbCB0aWxlIGJpdG1hcHMKICAgICAgdGhpcy5vcmlnaW5hbFRpbGVzRGF0YSA9IG5ldyBNYXAoKTsgLy8gTWFwPCJ0aWxlWCx0aWxlWSIsIHt3LGgsZGF0YTpVaW50OENsYW1wZWRBcnJheX0+IGNhY2hlIGZ1bGwgSW1hZ2VEYXRhIGZvciBmYXN0IHBpeGVsIHJlYWRzCiAgICAgIHRoaXMudGlsZVNpemUgPSAxMDAwOwogICAgICB0aGlzLnByb2Nlc3NQcm9taXNlID0gbnVsbDsgLy8gVHJhY2sgb25nb2luZyBwcm9jZXNzaW5nCiAgICAgIHRoaXMubGFzdFByb2Nlc3NlZEhhc2ggPSBudWxsOyAvLyBDYWNoZSBpbnZhbGlkYXRpb24KICAgICAgdGhpcy53b3JrZXJQb29sID0gbnVsbDsgLy8gV2ViIHdvcmtlciBwb29sIGZvciBoZWF2eSBwcm9jZXNzaW5nCiAgICB9CgogICAgdG9nZ2xlKCkgewogICAgICB0aGlzLmlzRW5hYmxlZCA9ICF0aGlzLmlzRW5hYmxlZDsKICAgICAgY29uc29sZS5sb2coYE92ZXJsYXkgJHt0aGlzLmlzRW5hYmxlZCA/ICdlbmFibGVkJyA6ICdkaXNhYmxlZCd9LmApOwogICAgICByZXR1cm4gdGhpcy5pc0VuYWJsZWQ7CiAgICB9CgogICAgZW5hYmxlKCkgewogICAgICB0aGlzLmlzRW5hYmxlZCA9IHRydWU7CiAgICB9CgogICAgZGlzYWJsZSgpIHsKICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTsKICAgIH0KCiAgICBjbGVhcigpIHsKICAgICAgdGhpcy5kaXNhYmxlKCk7CiAgICAgIHRoaXMuaW1hZ2VCaXRtYXAgPSBudWxsOwogICAgICB0aGlzLmNodW5rZWRUaWxlcy5jbGVhcigpOwogICAgICB0aGlzLm9yaWdpbmFsVGlsZXMuY2xlYXIoKTsKICAgICAgdGhpcy5vcmlnaW5hbFRpbGVzRGF0YS5jbGVhcigpOwogICAgICB0aGlzLmxhc3RQcm9jZXNzZWRIYXNoID0gbnVsbDsKICAgICAgaWYgKHRoaXMucHJvY2Vzc1Byb21pc2UpIHsKICAgICAgICB0aGlzLnByb2Nlc3NQcm9taXNlID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIGFzeW5jIHNldEltYWdlKGltYWdlQml0bWFwKSB7CiAgICAgIHRoaXMuaW1hZ2VCaXRtYXAgPSBpbWFnZUJpdG1hcDsKICAgICAgdGhpcy5sYXN0UHJvY2Vzc2VkSGFzaCA9IG51bGw7IC8vIEludmFsaWRhdGUgY2FjaGUKICAgICAgaWYgKHRoaXMuaW1hZ2VCaXRtYXAgJiYgdGhpcy5zdGFydENvb3JkcykgewogICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0ltYWdlSW50b0NodW5rcygpOwogICAgICB9CiAgICB9CgogICAgYXN5bmMgc2V0UG9zaXRpb24oc3RhcnRQb3NpdGlvbiwgcmVnaW9uKSB7CiAgICAgIGlmICghc3RhcnRQb3NpdGlvbiB8fCAhcmVnaW9uKSB7CiAgICAgICAgdGhpcy5zdGFydENvb3JkcyA9IG51bGw7CiAgICAgICAgdGhpcy5jaHVua2VkVGlsZXMuY2xlYXIoKTsKICAgICAgICB0aGlzLmxhc3RQcm9jZXNzZWRIYXNoID0gbnVsbDsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5zdGFydENvb3JkcyA9IHsgcmVnaW9uLCBwaXhlbDogc3RhcnRQb3NpdGlvbiB9OwogICAgICB0aGlzLmxhc3RQcm9jZXNzZWRIYXNoID0gbnVsbDsgLy8gSW52YWxpZGF0ZSBjYWNoZQogICAgICBpZiAodGhpcy5pbWFnZUJpdG1hcCkgewogICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0ltYWdlSW50b0NodW5rcygpOwogICAgICB9CiAgICB9CgogICAgLy8gR2VuZXJhdGUgaGFzaCBmb3IgY2FjaGUgaW52YWxpZGF0aW9uCiAgICBfZ2VuZXJhdGVQcm9jZXNzSGFzaCgpIHsKICAgICAgaWYgKCF0aGlzLmltYWdlQml0bWFwIHx8ICF0aGlzLnN0YXJ0Q29vcmRzKSByZXR1cm4gbnVsbDsKICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmltYWdlQml0bWFwOwogICAgICBjb25zdCB7IHg6IHB4LCB5OiBweSB9ID0gdGhpcy5zdGFydENvb3Jkcy5waXhlbDsKICAgICAgY29uc3QgeyB4OiByeCwgeTogcnkgfSA9IHRoaXMuc3RhcnRDb29yZHMucmVnaW9uOwogICAgICByZXR1cm4gYCR7d2lkdGh9eCR7aGVpZ2h0fV8ke3B4fSwke3B5fV8ke3J4fSwke3J5fV8ke3N0YXRlLmJsdWVNYXJibGVFbmFibGVkfV8ke3N0YXRlLm92ZXJsYXlPcGFjaXR5fWA7CiAgICB9CgogICAgLy8gLS0tIE9WRVJMQVkgVVBEQVRFOiBPcHRpbWl6ZWQgY2h1bmtpbmcgd2l0aCBjYWNoaW5nIGFuZCBiYXRjaCBwcm9jZXNzaW5nIC0tLQogICAgYXN5bmMgcHJvY2Vzc0ltYWdlSW50b0NodW5rcygpIHsKICAgICAgaWYgKCF0aGlzLmltYWdlQml0bWFwIHx8ICF0aGlzLnN0YXJ0Q29vcmRzKSByZXR1cm47CgogICAgICAvLyBDaGVjayBpZiB3ZSdyZSBhbHJlYWR5IHByb2Nlc3NpbmcgdG8gYXZvaWQgZHVwbGljYXRlIHdvcmsKICAgICAgaWYgKHRoaXMucHJvY2Vzc1Byb21pc2UpIHsKICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzUHJvbWlzZTsKICAgICAgfQoKICAgICAgLy8gQ2hlY2sgY2FjaGUgdmFsaWRpdHkKICAgICAgY29uc3QgY3VycmVudEhhc2ggPSB0aGlzLl9nZW5lcmF0ZVByb2Nlc3NIYXNoKCk7CiAgICAgIGlmICh0aGlzLmxhc3RQcm9jZXNzZWRIYXNoID09PSBjdXJyZW50SGFzaCAmJiB0aGlzLmNodW5rZWRUaWxlcy5zaXplID4gMCkgewogICAgICAgIGNvbnNvbGUubG9nKGDwn5OmIFVzaW5nIGNhY2hlZCBvdmVybGF5IGNodW5rcyAoJHt0aGlzLmNodW5rZWRUaWxlcy5zaXplfSB0aWxlcylgKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIC8vIFN0YXJ0IHByb2Nlc3NpbmcKICAgICAgdGhpcy5wcm9jZXNzUHJvbWlzZSA9IHRoaXMuX2RvUHJvY2Vzc0ltYWdlSW50b0NodW5rcygpOwogICAgICB0cnkgewogICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc1Byb21pc2U7CiAgICAgICAgdGhpcy5sYXN0UHJvY2Vzc2VkSGFzaCA9IGN1cnJlbnRIYXNoOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMucHJvY2Vzc1Byb21pc2UgPSBudWxsOwogICAgICB9CiAgICB9CgogICAgYXN5bmMgX2RvUHJvY2Vzc0ltYWdlSW50b0NodW5rcygpIHsKICAgICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7CiAgICAgIHRoaXMuY2h1bmtlZFRpbGVzLmNsZWFyKCk7CgogICAgICBjb25zdCB7IHdpZHRoOiBpbWFnZVdpZHRoLCBoZWlnaHQ6IGltYWdlSGVpZ2h0IH0gPSB0aGlzLmltYWdlQml0bWFwOwogICAgICBjb25zdCB7IHg6IHN0YXJ0UGl4ZWxYLCB5OiBzdGFydFBpeGVsWSB9ID0gdGhpcy5zdGFydENvb3Jkcy5waXhlbDsKICAgICAgY29uc3QgeyB4OiBzdGFydFJlZ2lvblgsIHk6IHN0YXJ0UmVnaW9uWSB9ID0gdGhpcy5zdGFydENvb3Jkcy5yZWdpb247CgogICAgICBjb25zdCB7IHN0YXJ0VGlsZVgsIHN0YXJ0VGlsZVksIGVuZFRpbGVYLCBlbmRUaWxlWSB9ID0gVXRpbHMuY2FsY3VsYXRlVGlsZVJhbmdlKAogICAgICAgIHN0YXJ0UmVnaW9uWCwKICAgICAgICBzdGFydFJlZ2lvblksCiAgICAgICAgc3RhcnRQaXhlbFgsCiAgICAgICAgc3RhcnRQaXhlbFksCiAgICAgICAgaW1hZ2VXaWR0aCwKICAgICAgICBpbWFnZUhlaWdodCwKICAgICAgICB0aGlzLnRpbGVTaXplCiAgICAgICk7CgogICAgICBjb25zdCB0b3RhbFRpbGVzID0gKGVuZFRpbGVYIC0gc3RhcnRUaWxlWCArIDEpICogKGVuZFRpbGVZIC0gc3RhcnRUaWxlWSArIDEpOwogICAgICBjb25zb2xlLmxvZyhg8J+UhCBQcm9jZXNzaW5nICR7dG90YWxUaWxlc30gb3ZlcmxheSB0aWxlcy4uLmApOwoKICAgICAgLy8gUHJvY2VzcyB0aWxlcyBpbiBiYXRjaGVzIHRvIGF2b2lkIGJsb2NraW5nIHRoZSBtYWluIHRocmVhZAogICAgICBjb25zdCBiYXRjaFNpemUgPSA0OyAvLyBQcm9jZXNzIDQgdGlsZXMgYXQgYSB0aW1lCiAgICAgIGNvbnN0IHRpbGVzVG9Qcm9jZXNzID0gW107CgogICAgICBmb3IgKGxldCB0eSA9IHN0YXJ0VGlsZVk7IHR5IDw9IGVuZFRpbGVZOyB0eSsrKSB7CiAgICAgICAgZm9yIChsZXQgdHggPSBzdGFydFRpbGVYOyB0eCA8PSBlbmRUaWxlWDsgdHgrKykgewogICAgICAgICAgdGlsZXNUb1Byb2Nlc3MucHVzaCh7IHR4LCB0eSB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIFByb2Nlc3MgdGlsZXMgaW4gYmF0Y2hlcyB3aXRoIHlpZWxkaW5nCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlsZXNUb1Byb2Nlc3MubGVuZ3RoOyBpICs9IGJhdGNoU2l6ZSkgewogICAgICAgIGNvbnN0IGJhdGNoID0gdGlsZXNUb1Byb2Nlc3Muc2xpY2UoaSwgaSArIGJhdGNoU2l6ZSk7CgogICAgICAgIGF3YWl0IFByb21pc2UuYWxsKAogICAgICAgICAgYmF0Y2gubWFwKGFzeW5jICh7IHR4LCB0eSB9KSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHRpbGVLZXkgPSBgJHt0eH0sJHt0eX1gOwogICAgICAgICAgICBjb25zdCBjaHVua0JpdG1hcCA9IGF3YWl0IHRoaXMuX3Byb2Nlc3NUaWxlKAogICAgICAgICAgICAgIHR4LAogICAgICAgICAgICAgIHR5LAogICAgICAgICAgICAgIGltYWdlV2lkdGgsCiAgICAgICAgICAgICAgaW1hZ2VIZWlnaHQsCiAgICAgICAgICAgICAgc3RhcnRQaXhlbFgsCiAgICAgICAgICAgICAgc3RhcnRQaXhlbFksCiAgICAgICAgICAgICAgc3RhcnRSZWdpb25YLAogICAgICAgICAgICAgIHN0YXJ0UmVnaW9uWQogICAgICAgICAgICApOwogICAgICAgICAgICBpZiAoY2h1bmtCaXRtYXApIHsKICAgICAgICAgICAgICB0aGlzLmNodW5rZWRUaWxlcy5zZXQodGlsZUtleSwgY2h1bmtCaXRtYXApOwogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgICk7CgogICAgICAgIC8vIFlpZWxkIGNvbnRyb2wgdG8gcHJldmVudCBibG9ja2luZwogICAgICAgIGlmIChpICsgYmF0Y2hTaXplIDwgdGlsZXNUb1Byb2Nlc3MubGVuZ3RoKSB7CiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBjb25zdCBwcm9jZXNzaW5nVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lOwogICAgICBjb25zb2xlLmxvZygKICAgICAgICBg4pyFIE92ZXJsYXkgcHJvY2Vzc2VkICR7dGhpcy5jaHVua2VkVGlsZXMuc2l6ZX0gdGlsZXMgaW4gJHtNYXRoLnJvdW5kKHByb2Nlc3NpbmdUaW1lKX1tc2AKICAgICAgKTsKICAgIH0KCiAgICBhc3luYyBfcHJvY2Vzc1RpbGUoCiAgICAgIHR4LAogICAgICB0eSwKICAgICAgaW1hZ2VXaWR0aCwKICAgICAgaW1hZ2VIZWlnaHQsCiAgICAgIHN0YXJ0UGl4ZWxYLAogICAgICBzdGFydFBpeGVsWSwKICAgICAgc3RhcnRSZWdpb25YLAogICAgICBzdGFydFJlZ2lvblkKICAgICkgewogICAgICBjb25zdCB0aWxlS2V5ID0gYCR7dHh9LCR7dHl9YDsKCiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcG9ydGlvbiBvZiB0aGUgaW1hZ2UgdGhhdCBvdmVybGFwcyB3aXRoIHRoaXMgdGlsZQogICAgICBjb25zdCBpbWdTdGFydFggPSAodHggLSBzdGFydFJlZ2lvblgpICogdGhpcy50aWxlU2l6ZSAtIHN0YXJ0UGl4ZWxYOwogICAgICBjb25zdCBpbWdTdGFydFkgPSAodHkgLSBzdGFydFJlZ2lvblkpICogdGhpcy50aWxlU2l6ZSAtIHN0YXJ0UGl4ZWxZOwoKICAgICAgLy8gQ3JvcCBjb29yZGluYXRlcyB3aXRoaW4gdGhlIHNvdXJjZSBpbWFnZQogICAgICBjb25zdCBzWCA9IE1hdGgubWF4KDAsIGltZ1N0YXJ0WCk7CiAgICAgIGNvbnN0IHNZID0gTWF0aC5tYXgoMCwgaW1nU3RhcnRZKTsKICAgICAgY29uc3Qgc1cgPSBNYXRoLm1pbihpbWFnZVdpZHRoIC0gc1gsIHRoaXMudGlsZVNpemUgLSAoc1ggLSBpbWdTdGFydFgpKTsKICAgICAgY29uc3Qgc0ggPSBNYXRoLm1pbihpbWFnZUhlaWdodCAtIHNZLCB0aGlzLnRpbGVTaXplIC0gKHNZIC0gaW1nU3RhcnRZKSk7CgogICAgICBpZiAoc1cgPD0gMCB8fCBzSCA8PSAwKSByZXR1cm4gbnVsbDsKCiAgICAgIC8vIERlc3RpbmF0aW9uIGNvb3JkaW5hdGVzIG9uIHRoZSBuZXcgY2h1bmsgY2FudmFzCiAgICAgIGNvbnN0IGRYID0gTWF0aC5tYXgoMCwgLWltZ1N0YXJ0WCk7CiAgICAgIGNvbnN0IGRZID0gTWF0aC5tYXgoMCwgLWltZ1N0YXJ0WSk7CgogICAgICBjb25zdCBjaHVua0NhbnZhcyA9IG5ldyBPZmZzY3JlZW5DYW52YXModGhpcy50aWxlU2l6ZSwgdGhpcy50aWxlU2l6ZSk7CiAgICAgIGNvbnN0IGNodW5rQ3R4ID0gY2h1bmtDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgY2h1bmtDdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7CgogICAgICBjaHVua0N0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZUJpdG1hcCwgc1gsIHNZLCBzVywgc0gsIGRYLCBkWSwgc1csIHNIKTsKCiAgICAgIC8vIC0tLSBPUFRJTUlaRUQ6IEJsdWUgbWFyYmxlIGVmZmVjdCB3aXRoIGZhc3RlciBwaXhlbCBtYW5pcHVsYXRpb24gLS0tCiAgICAgIGlmIChzdGF0ZS5ibHVlTWFyYmxlRW5hYmxlZCkgewogICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGNodW5rQ3R4LmdldEltYWdlRGF0YShkWCwgZFksIHNXLCBzSCk7CiAgICAgICAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhOwoKICAgICAgICAvLyBGYXN0ZXIgcGl4ZWwgbWFuaXB1bGF0aW9uIHVzaW5nIHR5cGVkIGFycmF5cwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkgewogICAgICAgICAgY29uc3QgcGl4ZWxJbmRleCA9IGkgLyA0OwogICAgICAgICAgY29uc3QgcGl4ZWxZID0gTWF0aC5mbG9vcihwaXhlbEluZGV4IC8gc1cpOwogICAgICAgICAgY29uc3QgcGl4ZWxYID0gcGl4ZWxJbmRleCAlIHNXOwoKICAgICAgICAgIGlmICgocGl4ZWxYICsgcGl4ZWxZKSAlIDIgPT09IDAgJiYgZGF0YVtpICsgM10gPiAwKSB7CiAgICAgICAgICAgIGRhdGFbaSArIDNdID0gMDsgLy8gU2V0IGFscGhhIHRvIDAKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGNodW5rQ3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIGRYLCBkWSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhd2FpdCBjaHVua0NhbnZhcy50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKTsKICAgIH0KCiAgICAvLyAtLS0gT1ZFUkxBWSBVUERBVEU6IE9wdGltaXplZCBjb21wb3NpdGluZyB3aXRoIGNhY2hpbmcgLS0tCiAgICBhc3luYyBwcm9jZXNzQW5kUmVzcG9uZFRvVGlsZVJlcXVlc3QoZXZlbnREYXRhKSB7CiAgICAgIGNvbnN0IHsgZW5kcG9pbnQsIGJsb2JJRCwgYmxvYkRhdGEgfSA9IGV2ZW50RGF0YTsKCiAgICAgIGxldCBmaW5hbEJsb2IgPSBibG9iRGF0YTsKCiAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCAmJiB0aGlzLmNodW5rZWRUaWxlcy5zaXplID4gMCkgewogICAgICAgIGNvbnN0IHRpbGVNYXRjaCA9IGVuZHBvaW50Lm1hdGNoKC8oXGQrKVwvKFxkKylcLnBuZy8pOwogICAgICAgIGlmICh0aWxlTWF0Y2gpIHsKICAgICAgICAgIGNvbnN0IHRpbGVYID0gcGFyc2VJbnQodGlsZU1hdGNoWzFdLCAxMCk7CiAgICAgICAgICBjb25zdCB0aWxlWSA9IHBhcnNlSW50KHRpbGVNYXRjaFsyXSwgMTApOwogICAgICAgICAgY29uc3QgdGlsZUtleSA9IGAke3RpbGVYfSwke3RpbGVZfWA7CgogICAgICAgICAgY29uc3QgY2h1bmtCaXRtYXAgPSB0aGlzLmNodW5rZWRUaWxlcy5nZXQodGlsZUtleSk7CiAgICAgICAgICAvLyBBbHNvIHN0b3JlIHRoZSBvcmlnaW5hbCB0aWxlIGJpdG1hcCBmb3IgbGF0ZXIgcGl4ZWwgY29sb3IgY2hlY2tzCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCBvcmlnaW5hbEJpdG1hcCA9IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKGJsb2JEYXRhKTsKICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFRpbGVzLnNldCh0aWxlS2V5LCBvcmlnaW5hbEJpdG1hcCk7CiAgICAgICAgICAgIC8vIENhY2hlIGZ1bGwgSW1hZ2VEYXRhIGZvciBmYXN0IHBpeGVsIGFjY2VzcyAoYXZvaWQgcmVwZWF0ZWQgZHJhd0ltYWdlL2dldEltYWdlRGF0YSkKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBsZXQgY2FudmFzLCBjdHg7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKG9yaWdpbmFsQml0bWFwLndpZHRoLCBvcmlnaW5hbEJpdG1hcC5oZWlnaHQpOwogICAgICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gb3JpZ2luYWxCaXRtYXAud2lkdGg7CiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gb3JpZ2luYWxCaXRtYXAuaGVpZ2h0OwogICAgICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKG9yaWdpbmFsQml0bWFwLCAwLCAwKTsKICAgICAgICAgICAgICBjb25zdCBpbWdEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBvcmlnaW5hbEJpdG1hcC53aWR0aCwgb3JpZ2luYWxCaXRtYXAuaGVpZ2h0KTsKICAgICAgICAgICAgICAvLyBTdG9yZSB0eXBlZCBhcnJheSBjb3B5IHRvIGF2b2lkIHJldGFpbmluZyBsYXJnZSBjYW52YXMKICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsVGlsZXNEYXRhLnNldCh0aWxlS2V5LCB7CiAgICAgICAgICAgICAgICB3OiBvcmlnaW5hbEJpdG1hcC53aWR0aCwKICAgICAgICAgICAgICAgIGg6IG9yaWdpbmFsQml0bWFwLmhlaWdodCwKICAgICAgICAgICAgICAgIGRhdGE6IG5ldyBVaW50OENsYW1wZWRBcnJheShpbWdEYXRhLmRhdGEpLAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgLy8gSWYgSW1hZ2VEYXRhIGV4dHJhY3Rpb24gZmFpbHMsIHN0aWxsIGtlZXAgdGhlIGJpdG1hcCBhcyBmYWxsYmFjawogICAgICAgICAgICAgIGNvbnNvbGUud2FybignT3ZlcmxheU1hbmFnZXI6IGNvdWxkIG5vdCBjYWNoZSBJbWFnZURhdGEgZm9yJywgdGlsZUtleSwgZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCdPdmVybGF5TWFuYWdlcjogY291bGQgbm90IGNyZWF0ZSBvcmlnaW5hbCBiaXRtYXAgZm9yJywgdGlsZUtleSwgZSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoY2h1bmtCaXRtYXApIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAvLyBVc2UgZmFzdGVyIGNvbXBvc2l0aW5nIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UKICAgICAgICAgICAgICBmaW5hbEJsb2IgPSBhd2FpdCB0aGlzLl9jb21wb3NpdGVUaWxlT3B0aW1pemVkKGJsb2JEYXRhLCBjaHVua0JpdG1hcCk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb21wb3NpdGluZyBvdmVybGF5OicsIGUpOwogICAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIG9yaWdpbmFsIHRpbGUgb24gZXJyb3IKICAgICAgICAgICAgICBmaW5hbEJsb2IgPSBibG9iRGF0YTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gU2VuZCB0aGUgKHBvc3NpYmx5IG1vZGlmaWVkKSBibG9iIGJhY2sgdG8gdGhlIGluamVjdGVkIHNjcmlwdAogICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoCiAgICAgICAgewogICAgICAgICAgc291cmNlOiAnYXV0by1pbWFnZS1vdmVybGF5JywKICAgICAgICAgIGJsb2JJRDogYmxvYklELAogICAgICAgICAgYmxvYkRhdGE6IGZpbmFsQmxvYiwKICAgICAgICB9LAogICAgICAgICcqJwogICAgICApOwogICAgfQoKICAgIC8vIFJldHVybnMgW3IsZyxiLGFdIGZvciBhIHBpeGVsIGluc2lkZSBhIHJlZ2lvbiB0aWxlICh0aWxlWCwgdGlsZVkgYXJlIHJlZ2lvbiBjb29yZHMpCiAgICBhc3luYyBnZXRUaWxlUGl4ZWxDb2xvcih0aWxlWCwgdGlsZVksIHBpeGVsWCwgcGl4ZWxZKSB7CiAgICAgIGNvbnN0IHRpbGVLZXkgPSBgJHt0aWxlWH0sJHt0aWxlWX1gOwogICAgICBjb25zdCBhbHBoYVRocmVzaCA9IHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZCB8fCBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRDsKCiAgICAgIC8vIDEuIFByZWZlciBjYWNoZWQgSW1hZ2VEYXRhIGlmIGF2YWlsYWJsZQogICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLm9yaWdpbmFsVGlsZXNEYXRhLmdldCh0aWxlS2V5KTsKICAgICAgaWYgKGNhY2hlZCAmJiBjYWNoZWQuZGF0YSAmJiBjYWNoZWQudyA+IDAgJiYgY2FjaGVkLmggPiAwKSB7CiAgICAgICAgY29uc3QgeCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGNhY2hlZC53IC0gMSwgcGl4ZWxYKSk7CiAgICAgICAgY29uc3QgeSA9IE1hdGgubWF4KDAsIE1hdGgubWluKGNhY2hlZC5oIC0gMSwgcGl4ZWxZKSk7CiAgICAgICAgY29uc3QgaWR4ID0gKHkgKiBjYWNoZWQudyArIHgpICogNDsKICAgICAgICBjb25zdCBkID0gY2FjaGVkLmRhdGE7CiAgICAgICAgY29uc3QgYSA9IGRbaWR4ICsgM107CgogICAgICAgIGlmICghc3RhdGUucGFpbnRUcmFuc3BhcmVudFBpeGVscyAmJiBhIDwgYWxwaGFUaHJlc2gpIHsKICAgICAgICAgIC8vIFRyZWF0IGFzIHRyYW5zcGFyZW50IC8gdW5hdmFpbGFibGUKICAgICAgICAgIC8vIExpZ2h0d2VpZ2h0IGRlYnVnOiBzaG93IHdoZW4gdHJhbnNwYXJlbmN5IGNhdXNlcyBza2lwIChvbmx5IGlmIHZlcmJvc2UgZW5hYmxlZCkKICAgICAgICAgIGlmICh3aW5kb3cuX292ZXJsYXlEZWJ1ZykKICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnT3ZlcmxheU1hbmFnZXI6IHBpeGVsIHRyYW5zcGFyZW50IChjYWNoZWQpLCBza2lwcGluZycsIHRpbGVLZXksIHgsIHksIGEpOwogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIHJldHVybiBbZFtpZHhdLCBkW2lkeCArIDFdLCBkW2lkeCArIDJdLCBhXTsKICAgICAgfQoKICAgICAgLy8gMi4gRmFsbGJhY2s6IHVzZSBiaXRtYXAsIHdpdGggcmV0cnkKICAgICAgY29uc3QgbWF4UmV0cmllcyA9IDM7CiAgICAgIGZvciAobGV0IGF0dGVtcHQgPSAxOyBhdHRlbXB0IDw9IG1heFJldHJpZXM7IGF0dGVtcHQrKykgewogICAgICAgIGNvbnN0IGJpdG1hcCA9IHRoaXMub3JpZ2luYWxUaWxlcy5nZXQodGlsZUtleSk7CiAgICAgICAgaWYgKCFiaXRtYXApIHsKICAgICAgICAgIGlmIChhdHRlbXB0ID09PSBtYXhSZXRyaWVzKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybignT3ZlcmxheU1hbmFnZXI6IG5vIGJpdG1hcCBmb3InLCB0aWxlS2V5LCAnYWZ0ZXInLCBtYXhSZXRyaWVzLCAnYXR0ZW1wdHMnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGF3YWl0IFV0aWxzLnNsZWVwKDUwICogYXR0ZW1wdCk7IC8vIGV4cG9uZW50aWFsIGRlbGF5CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICBsZXQgY2FudmFzLCBjdHg7CiAgICAgICAgICBpZiAodHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgY2FudmFzID0gbmV3IE9mZnNjcmVlbkNhbnZhcyhiaXRtYXAud2lkdGgsIGJpdG1hcC5oZWlnaHQpOwogICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpOwogICAgICAgICAgICBjYW52YXMud2lkdGggPSBiaXRtYXAud2lkdGg7CiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBiaXRtYXAuaGVpZ2h0OwogICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICAgIH0KICAgICAgICAgIGN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoYml0bWFwLCAwLCAwKTsKCiAgICAgICAgICBjb25zdCB4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYml0bWFwLndpZHRoIC0gMSwgcGl4ZWxYKSk7CiAgICAgICAgICBjb25zdCB5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oYml0bWFwLmhlaWdodCAtIDEsIHBpeGVsWSkpOwogICAgICAgICAgY29uc3QgZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoeCwgeSwgMSwgMSkuZGF0YTsKICAgICAgICAgIGNvbnN0IGEgPSBkYXRhWzNdOwoKICAgICAgICAgIGlmICghc3RhdGUucGFpbnRUcmFuc3BhcmVudFBpeGVscyAmJiBhIDwgYWxwaGFUaHJlc2gpIHsKICAgICAgICAgICAgaWYgKHdpbmRvdy5fb3ZlcmxheURlYnVnKQogICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ092ZXJsYXlNYW5hZ2VyOiBwaXhlbCB0cmFuc3BhcmVudCAoZmFsbGJhY2spJywgdGlsZUtleSwgeCwgeSwgYSk7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBbZGF0YVswXSwgZGF0YVsxXSwgZGF0YVsyXSwgYV07CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS53YXJuKCdPdmVybGF5TWFuYWdlcjogZmFpbGVkIHRvIHJlYWQgcGl4ZWwgKGF0dGVtcHQnLCBhdHRlbXB0LCAnKScsIHRpbGVLZXksIGUpOwogICAgICAgICAgaWYgKGF0dGVtcHQgPCBtYXhSZXRyaWVzKSB7CiAgICAgICAgICAgIGF3YWl0IFV0aWxzLnNsZWVwKDUwICogYXR0ZW1wdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKAogICAgICAgICAgICAgICdPdmVybGF5TWFuYWdlcjogZmFpbGVkIHRvIHJlYWQgcGl4ZWwgYWZ0ZXInLAogICAgICAgICAgICAgIG1heFJldHJpZXMsCiAgICAgICAgICAgICAgJ2F0dGVtcHRzJywKICAgICAgICAgICAgICB0aWxlS2V5CiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyAzLiBJZiBldmVyeXRoaW5nIGZhaWxzIOKAlCB5b3UgY2FuIHJldHVybiBudWxsIG9yIFswLDAsMCwwXQogICAgICAvLyBQcmVmZXIgbnVsbCDigJQgdG8gYXZvaWQgbWlzbGVhZGluZwogICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBhc3luYyBfY29tcG9zaXRlVGlsZU9wdGltaXplZChvcmlnaW5hbEJsb2IsIG92ZXJsYXlCaXRtYXApIHsKICAgICAgY29uc3Qgb3JpZ2luYWxCaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcChvcmlnaW5hbEJsb2IpOwogICAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKG9yaWdpbmFsQml0bWFwLndpZHRoLCBvcmlnaW5hbEJpdG1hcC5oZWlnaHQpOwogICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKCiAgICAgIC8vIERpc2FibGUgYW50aWFsaWFzaW5nIGZvciBwaXhlbC1wZXJmZWN0IHJlbmRlcmluZwogICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7CgogICAgICAvLyBEcmF3IG9yaWdpbmFsIHRpbGUgZmlyc3QKICAgICAgY3R4LmRyYXdJbWFnZShvcmlnaW5hbEJpdG1hcCwgMCwgMCk7CgogICAgICAvLyBTZXQgb3BhY2l0eSBhbmQgZHJhdyBvdmVybGF5IHdpdGggb3B0aW1pemVkIGJsZW5kIG1vZGUKICAgICAgY3R4Lmdsb2JhbEFscGhhID0gc3RhdGUub3ZlcmxheU9wYWNpdHk7CiAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInOwogICAgICBjdHguZHJhd0ltYWdlKG92ZXJsYXlCaXRtYXAsIDAsIDApOwoKICAgICAgLy8gVXNlIGZhc3RlciBibG9iIGNvbnZlcnNpb24gd2l0aCBjb21wcmVzc2lvbiBzZXR0aW5ncwogICAgICByZXR1cm4gYXdhaXQgY2FudmFzLmNvbnZlcnRUb0Jsb2IoewogICAgICAgIHR5cGU6ICdpbWFnZS9wbmcnLAogICAgICAgIHF1YWxpdHk6IDAuOTUsIC8vIFNsaWdodCBjb21wcmVzc2lvbiBmb3IgZmFzdGVyIHByb2Nlc3NpbmcKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBXYWl0IHVudGlsIGFsbCByZXF1aXJlZCB0aWxlcyBhcmUgbG9hZGVkIGFuZCBjYWNoZWQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFJlZ2lvblgKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFJlZ2lvblkKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFdpZHRoCiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWxIZWlnaHQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFBpeGVsWAogICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0UGl4ZWxZCiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZW91dE1zCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gdHJ1ZSBpZiB0aWxlcyBhcmUgcmVhZHkKICAgICAqLwogICAgYXN5bmMgd2FpdEZvclRpbGVzKAogICAgICBzdGFydFJlZ2lvblgsCiAgICAgIHN0YXJ0UmVnaW9uWSwKICAgICAgcGl4ZWxXaWR0aCwKICAgICAgcGl4ZWxIZWlnaHQsCiAgICAgIHN0YXJ0UGl4ZWxYID0gMCwKICAgICAgc3RhcnRQaXhlbFkgPSAwLAogICAgICB0aW1lb3V0TXMgPSAxMDAwMAogICAgKSB7CiAgICAgIGNvbnN0IHsgc3RhcnRUaWxlWCwgc3RhcnRUaWxlWSwgZW5kVGlsZVgsIGVuZFRpbGVZIH0gPSBVdGlscy5jYWxjdWxhdGVUaWxlUmFuZ2UoCiAgICAgICAgc3RhcnRSZWdpb25YLAogICAgICAgIHN0YXJ0UmVnaW9uWSwKICAgICAgICBzdGFydFBpeGVsWCwKICAgICAgICBzdGFydFBpeGVsWSwKICAgICAgICBwaXhlbFdpZHRoLAogICAgICAgIHBpeGVsSGVpZ2h0LAogICAgICAgIHRoaXMudGlsZVNpemUKICAgICAgKTsKCiAgICAgIGNvbnN0IHJlcXVpcmVkVGlsZXMgPSBbXTsKICAgICAgZm9yIChsZXQgdHkgPSBzdGFydFRpbGVZOyB0eSA8PSBlbmRUaWxlWTsgdHkrKykgewogICAgICAgIGZvciAobGV0IHR4ID0gc3RhcnRUaWxlWDsgdHggPD0gZW5kVGlsZVg7IHR4KyspIHsKICAgICAgICAgIHJlcXVpcmVkVGlsZXMucHVzaChgJHt0eH0sJHt0eX1gKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChyZXF1aXJlZFRpbGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHRydWU7CgogICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpOwoKICAgICAgd2hpbGUgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPCB0aW1lb3V0TXMpIHsKICAgICAgICBpZiAoc3RhdGUuc3RvcEZsYWcpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCd3YWl0Rm9yVGlsZXM6IHN0b3BwZWQgYnkgdXNlcicpOwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgbWlzc2luZyA9IHJlcXVpcmVkVGlsZXMuZmlsdGVyKChrZXkpID0+ICF0aGlzLm9yaWdpbmFsVGlsZXMuaGFzKGtleSkpOwogICAgICAgIGlmIChtaXNzaW5nLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgY29uc29sZS5sb2coYOKchSBBbGwgJHtyZXF1aXJlZFRpbGVzLmxlbmd0aH0gcmVxdWlyZWQgdGlsZXMgYXJlIGxvYWRlZGApOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBhd2FpdCBVdGlscy5zbGVlcCgxMDApOwogICAgICB9CgogICAgICBjb25zb2xlLndhcm4oYOKdjCBUaW1lb3V0IHdhaXRpbmcgZm9yIHRpbGVzOiAke3JlcXVpcmVkVGlsZXMubGVuZ3RofSByZXF1aXJlZCwgCiAgICAgICAgJHtyZXF1aXJlZFRpbGVzLmZpbHRlcigoaykgPT4gdGhpcy5vcmlnaW5hbFRpbGVzLmhhcyhrKSkubGVuZ3RofSBsb2FkZWRgKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgY29uc3Qgb3ZlcmxheU1hbmFnZXIgPSBuZXcgT3ZlcmxheU1hbmFnZXIoKTsKCiAgLy8gT3B0aW1pemVkIFR1cm5zdGlsZSB0b2tlbiBoYW5kbGluZyB3aXRoIGltcHJvdmVkIGNhY2hpbmcgYW5kIHJldHJ5IGxvZ2ljCiAgbGV0IHR1cm5zdGlsZVRva2VuID0gbnVsbDsKICBsZXQgdG9rZW5FeHBpcnlUaW1lID0gMDsKICBsZXQgdG9rZW5HZW5lcmF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlOwogIGxldCBfcmVzb2x2ZVRva2VuID0gbnVsbDsKICBsZXQgdG9rZW5Qcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgIF9yZXNvbHZlVG9rZW4gPSByZXNvbHZlOwogIH0pOwogIGxldCByZXRyeUNvdW50ID0gMDsKICBjb25zdCBNQVhfUkVUUklFUyA9IDEwOwogIGNvbnN0IE1BWF9CQVRDSF9SRVRSSUVTID0gMTA7IC8vIE1heGltdW0gYXR0ZW1wdHMgZm9yIGJhdGNoIHNlbmRpbmcKICBjb25zdCBUT0tFTl9MSUZFVElNRSA9IDI0MDAwMDsgLy8gNCBtaW51dGVzICh0b2tlbnMgdHlwaWNhbGx5IGxhc3QgNSBtaW4sIHVzZSA0IGZvciBzYWZldHkpCgogIGZ1bmN0aW9uIHNldFR1cm5zdGlsZVRva2VuKHRva2VuKSB7CiAgICBpZiAoX3Jlc29sdmVUb2tlbikgewogICAgICBfcmVzb2x2ZVRva2VuKHRva2VuKTsKICAgICAgX3Jlc29sdmVUb2tlbiA9IG51bGw7CiAgICB9CiAgICB0dXJuc3RpbGVUb2tlbiA9IHRva2VuOwogICAgdG9rZW5FeHBpcnlUaW1lID0gRGF0ZS5ub3coKSArIFRPS0VOX0xJRkVUSU1FOwogICAgY29uc29sZS5sb2coJ+KchSBUdXJuc3RpbGUgdG9rZW4gc2V0IHN1Y2Nlc3NmdWxseScpOwogIH0KCiAgZnVuY3Rpb24gaXNUb2tlblZhbGlkKCkgewogICAgcmV0dXJuIHR1cm5zdGlsZVRva2VuICYmIERhdGUubm93KCkgPCB0b2tlbkV4cGlyeVRpbWU7CiAgfQoKICBmdW5jdGlvbiBpbnZhbGlkYXRlVG9rZW4oKSB7CiAgICB0dXJuc3RpbGVUb2tlbiA9IG51bGw7CiAgICB0b2tlbkV4cGlyeVRpbWUgPSAwOwogICAgY29uc29sZS5sb2coJ/Cfl5HvuI8gVG9rZW4gaW52YWxpZGF0ZWQsIHdpbGwgZm9yY2UgZnJlc2ggZ2VuZXJhdGlvbicpOwogIH0KCiAgYXN5bmMgZnVuY3Rpb24gZW5zdXJlVG9rZW4oZm9yY2VSZWZyZXNoID0gZmFsc2UpIHsKICAgIC8vIFJldHVybiBjYWNoZWQgdG9rZW4gaWYgc3RpbGwgdmFsaWQgYW5kIG5vdCBmb3JjaW5nIHJlZnJlc2gKICAgIGlmIChpc1Rva2VuVmFsaWQoKSAmJiAhZm9yY2VSZWZyZXNoKSB7CiAgICAgIHJldHVybiB0dXJuc3RpbGVUb2tlbjsKICAgIH0KCiAgICAvLyBJbnZhbGlkYXRlIHRva2VuIGlmIGZvcmNpbmcgcmVmcmVzaAogICAgaWYgKGZvcmNlUmVmcmVzaCkgaW52YWxpZGF0ZVRva2VuKCk7CgogICAgLy8gQXZvaWQgbXVsdGlwbGUgc2ltdWx0YW5lb3VzIHRva2VuIGdlbmVyYXRpb25zCiAgICBpZiAodG9rZW5HZW5lcmF0aW9uSW5Qcm9ncmVzcykgewogICAgICBjb25zb2xlLmxvZygn8J+UhCBUb2tlbiBnZW5lcmF0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdhaXRpbmcuLi4nKTsKICAgICAgYXdhaXQgVXRpbHMuc2xlZXAoMjAwMCk7CiAgICAgIHJldHVybiBpc1Rva2VuVmFsaWQoKSA/IHR1cm5zdGlsZVRva2VuIDogbnVsbDsKICAgIH0KCiAgICB0b2tlbkdlbmVyYXRpb25JblByb2dyZXNzID0gdHJ1ZTsKCiAgICB0cnkgewogICAgICBjb25zb2xlLmxvZygn8J+UhCBUb2tlbiBleHBpcmVkIG9yIG1pc3NpbmcsIGdlbmVyYXRpbmcgbmV3IG9uZS4uLicpOwogICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGhhbmRsZUNhcHRjaGFXaXRoUmV0cnkoKTsKICAgICAgaWYgKHRva2VuICYmIHRva2VuLmxlbmd0aCA+IDIwKSB7CiAgICAgICAgc2V0VHVybnN0aWxlVG9rZW4odG9rZW4pOwogICAgICAgIGNvbnNvbGUubG9nKCfinIUgVG9rZW4gY2FwdHVyZWQgYW5kIGNhY2hlZCBzdWNjZXNzZnVsbHknKTsKICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgIH0KCiAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gSW52aXNpYmxlIFR1cm5zdGlsZSBmYWlsZWQsIGZvcmNpbmcgYnJvd3NlciBhdXRvbWF0aW9uLi4uJyk7CiAgICAgIGNvbnN0IGZhbGxiYWNrVG9rZW4gPSBhd2FpdCBoYW5kbGVDYXB0Y2hhRmFsbGJhY2soKTsKICAgICAgaWYgKGZhbGxiYWNrVG9rZW4gJiYgZmFsbGJhY2tUb2tlbi5sZW5ndGggPiAyMCkgewogICAgICAgIHNldFR1cm5zdGlsZVRva2VuKGZhbGxiYWNrVG9rZW4pOwogICAgICAgIGNvbnNvbGUubG9nKCfinIUgRmFsbGJhY2sgdG9rZW4gY2FwdHVyZWQgc3VjY2Vzc2Z1bGx5Jyk7CiAgICAgICAgcmV0dXJuIGZhbGxiYWNrVG9rZW47CiAgICAgIH0KCiAgICAgIGNvbnNvbGUubG9nKCfinYwgQWxsIHRva2VuIGdlbmVyYXRpb24gbWV0aG9kcyBmYWlsZWQnKTsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9IGZpbmFsbHkgewogICAgICB0b2tlbkdlbmVyYXRpb25JblByb2dyZXNzID0gZmFsc2U7CiAgICB9CiAgfQoKICBhc3luYyBmdW5jdGlvbiBoYW5kbGVDYXB0Y2hhV2l0aFJldHJ5KCkgewogICAgY29uc3Qgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7CgogICAgdHJ5IHsKICAgICAgY29uc3QgeyBzaXRla2V5LCB0b2tlbjogcHJlR2VuZXJhdGVkVG9rZW4gfSA9IGF3YWl0IFV0aWxzLm9idGFpblNpdGVrZXlBbmRUb2tlbigpOwoKICAgICAgaWYgKCFzaXRla2V5KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB2YWxpZCBzaXRla2V5IGZvdW5kJyk7CiAgICAgIH0KCiAgICAgIGNvbnNvbGUubG9nKCfwn5SRIFVzaW5nIHNpdGVrZXk6Jywgc2l0ZWtleSk7CgogICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvcikgewogICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgJ/Cfp60gVUE6JywKICAgICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJywKICAgICAgICAgICdQbGF0Zm9ybTonLAogICAgICAgICAgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybQogICAgICAgICk7CiAgICAgIH0KCiAgICAgIGxldCB0b2tlbiA9IG51bGw7CgogICAgICBpZiAoCiAgICAgICAgcHJlR2VuZXJhdGVkVG9rZW4gJiYKICAgICAgICB0eXBlb2YgcHJlR2VuZXJhdGVkVG9rZW4gPT09ICdzdHJpbmcnICYmCiAgICAgICAgcHJlR2VuZXJhdGVkVG9rZW4ubGVuZ3RoID4gMjAKICAgICAgKSB7CiAgICAgICAgY29uc29sZS5sb2coJ+KZu++4jyBSZXVzaW5nIHByZS1nZW5lcmF0ZWQgVHVybnN0aWxlIHRva2VuJyk7CiAgICAgICAgdG9rZW4gPSBwcmVHZW5lcmF0ZWRUb2tlbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoaXNUb2tlblZhbGlkKCkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCfimbvvuI8gVXNpbmcgZXhpc3RpbmcgY2FjaGVkIHRva2VuIChmcm9tIHByZXZpb3VzIHNlc3Npb24pJyk7CiAgICAgICAgICB0b2tlbiA9IHR1cm5zdGlsZVRva2VuOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmxvZygn8J+UkCBHZW5lcmF0aW5nIG5ldyB0b2tlbiB3aXRoIGV4ZWN1dGVUdXJuc3RpbGUuLi4nKTsKICAgICAgICAgIHRva2VuID0gYXdhaXQgVXRpbHMuZXhlY3V0ZVR1cm5zdGlsZShzaXRla2V5LCAncGFpbnQnKTsKICAgICAgICAgIGlmICh0b2tlbikgc2V0VHVybnN0aWxlVG9rZW4odG9rZW4pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHRva2VuICYmIHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgJiYgdG9rZW4ubGVuZ3RoID4gMjApIHsKICAgICAgICBjb25zdCBlbGFwc2VkID0gTWF0aC5yb3VuZChwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZSk7CiAgICAgICAgY29uc29sZS5sb2coYOKchSBUdXJuc3RpbGUgdG9rZW4gZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSBpbiAke2VsYXBzZWR9bXNgKTsKICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG9yIGVtcHR5IHRva2VuIHJlY2VpdmVkIC0gTGVuZ3RoOiAke3Rva2VuPy5sZW5ndGggfHwgMH1gKTsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc3QgZWxhcHNlZCA9IE1hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUpOwogICAgICBjb25zb2xlLmVycm9yKGDinYwgVHVybnN0aWxlIHRva2VuIGdlbmVyYXRpb24gZmFpbGVkIGFmdGVyICR7ZWxhcHNlZH1tczpgLCBlcnJvcik7CiAgICAgIHRocm93IGVycm9yOwogICAgfQogIH0KCiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2FwdGNoYUZhbGxiYWNrKCkgewogICAgLy8gSW1wbGVtZW50YXRpb24gZm9yIGZhbGxiYWNrIHRva2VuIGdlbmVyYXRpb24gd291bGQgZ28gaGVyZQogICAgLy8gVGhpcyBpcyBhIHBsYWNlaG9sZGVyIGZvciBicm93c2VyIGF1dG9tYXRpb24gZmFsbGJhY2sKICAgIGNvbnNvbGUubG9nKCfwn5SEIEF0dGVtcHRpbmcgZmFsbGJhY2sgdG9rZW4gZ2VuZXJhdGlvbi4uLicpOwogICAgcmV0dXJuIG51bGw7CiAgfQoKICBmdW5jdGlvbiBpbmplY3QoY2FsbGJhY2spIHsKICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gYCgke2NhbGxiYWNrfSkoKTtgOwogICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Py5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgc2NyaXB0LnJlbW92ZSgpOwogIH0KCiAgaW5qZWN0KCgpID0+IHsKICAgIGNvbnN0IGZldGNoZWRCbG9iUXVldWUgPSBuZXcgTWFwKCk7CgogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHsKICAgICAgY29uc3QgeyBzb3VyY2UsIGJsb2JJRCwgYmxvYkRhdGEgfSA9IGV2ZW50LmRhdGE7CiAgICAgIGlmIChzb3VyY2UgPT09ICdhdXRvLWltYWdlLW92ZXJsYXknICYmIGJsb2JJRCAmJiBibG9iRGF0YSkgewogICAgICAgIGNvbnN0IGNhbGxiYWNrID0gZmV0Y2hlZEJsb2JRdWV1ZS5nZXQoYmxvYklEKTsKICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBjYWxsYmFjayhibG9iRGF0YSk7CiAgICAgICAgfQogICAgICAgIGZldGNoZWRCbG9iUXVldWUuZGVsZXRlKGJsb2JJRCk7CiAgICAgIH0KICAgIH0pOwoKICAgIGNvbnN0IG9yaWdpbmFsRmV0Y2ggPSB3aW5kb3cuZmV0Y2g7CiAgICB3aW5kb3cuZmV0Y2ggPSBhc3luYyBmdW5jdGlvbiAoLi4uYXJncykgewogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9yaWdpbmFsRmV0Y2guYXBwbHkodGhpcywgYXJncyk7CiAgICAgIGNvbnN0IHVybCA9IGFyZ3NbMF0gaW5zdGFuY2VvZiBSZXF1ZXN0ID8gYXJnc1swXS51cmwgOiBhcmdzWzBdOwoKICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgaWYgKHVybC5pbmNsdWRlcygnaHR0cHM6Ly9iYWNrZW5kLndwbGFjZS5saXZlL3MwL3BpeGVsLycpKSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShhcmdzWzFdLmJvZHkpOwogICAgICAgICAgICBpZiAocGF5bG9hZC50KSB7CiAgICAgICAgICAgICAgLy8g8J+TiiBEZWJ1ZyBsb2cKICAgICAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgICAgIGDwn5SN4pyFIFR1cm5zdGlsZSBUb2tlbiBDYXB0dXJlZCAtIFR5cGU6ICR7dHlwZW9mIHBheWxvYWQudH0sIFZhbHVlOiAkewogICAgICAgICAgICAgICAgICBwYXlsb2FkLnQKICAgICAgICAgICAgICAgICAgICA/IHR5cGVvZiBwYXlsb2FkLnQgPT09ICdzdHJpbmcnCiAgICAgICAgICAgICAgICAgICAgICA/IHBheWxvYWQudC5sZW5ndGggPiA1MAogICAgICAgICAgICAgICAgICAgICAgICA/IHBheWxvYWQudC5zdWJzdHJpbmcoMCwgNTApICsgJy4uLicKICAgICAgICAgICAgICAgICAgICAgICAgOiBwYXlsb2FkLnQKICAgICAgICAgICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkocGF5bG9hZC50KQogICAgICAgICAgICAgICAgICAgIDogJ251bGwvdW5kZWZpbmVkJwogICAgICAgICAgICAgICAgfSwgTGVuZ3RoOiAke3BheWxvYWQudD8ubGVuZ3RoIHx8IDB9YAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKHsgc291cmNlOiAndHVybnN0aWxlLWNhcHR1cmUnLCB0b2tlbjogcGF5bG9hZC50IH0sICcqJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gY2F0Y2ggKF8pIHsKICAgICAgICAgICAgLyogaWdub3JlICovCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSB8fCAnJzsKICAgICAgICBpZiAoY29udGVudFR5cGUuaW5jbHVkZXMoJ2ltYWdlL3BuZycpICYmIHVybC5pbmNsdWRlcygnLnBuZycpKSB7CiAgICAgICAgICBjb25zdCBjbG9uZWQgPSByZXNwb25zZS5jbG9uZSgpOwogICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IGJsb2JVVUlEID0gY3J5cHRvLnJhbmRvbVVVSUQoKTsKICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxCbG9iID0gYXdhaXQgY2xvbmVkLmJsb2IoKTsKCiAgICAgICAgICAgIGZldGNoZWRCbG9iUXVldWUuc2V0KGJsb2JVVUlELCAocHJvY2Vzc2VkQmxvYikgPT4gewogICAgICAgICAgICAgIHJlc29sdmUoCiAgICAgICAgICAgICAgICBuZXcgUmVzcG9uc2UocHJvY2Vzc2VkQmxvYiwgewogICAgICAgICAgICAgICAgICBoZWFkZXJzOiBjbG9uZWQuaGVhZGVycywKICAgICAgICAgICAgICAgICAgc3RhdHVzOiBjbG9uZWQuc3RhdHVzLAogICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiBjbG9uZWQuc3RhdHVzVGV4dCwKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2UoCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc291cmNlOiAnYXV0by1pbWFnZS10aWxlJywKICAgICAgICAgICAgICAgIGVuZHBvaW50OiB1cmwsCiAgICAgICAgICAgICAgICBibG9iSUQ6IGJsb2JVVUlELAogICAgICAgICAgICAgICAgYmxvYkRhdGE6IG9yaWdpbmFsQmxvYiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICcqJwogICAgICAgICAgICApOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICB9OwogIH0pOwoKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4gewogICAgY29uc3QgeyBzb3VyY2UsIGVuZHBvaW50LCBibG9iSUQsIGJsb2JEYXRhLCB0b2tlbiB9ID0gZXZlbnQuZGF0YTsKCiAgICBpZiAoc291cmNlID09PSAnYXV0by1pbWFnZS10aWxlJyAmJiBlbmRwb2ludCAmJiBibG9iSUQgJiYgYmxvYkRhdGEpIHsKICAgICAgb3ZlcmxheU1hbmFnZXIucHJvY2Vzc0FuZFJlc3BvbmRUb1RpbGVSZXF1ZXN0KGV2ZW50LmRhdGEpOwogICAgfQoKICAgIGlmIChzb3VyY2UgPT09ICd0dXJuc3RpbGUtY2FwdHVyZScgJiYgdG9rZW4pIHsKICAgICAgc2V0VHVybnN0aWxlVG9rZW4odG9rZW4pOwogICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXR1c1RleHQnKT8udGV4dENvbnRlbnQuaW5jbHVkZXMoJ0NBUFRDSEEnKSkgewogICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCd0b2tlbkNhcHR1cmVkU3VjY2VzcycpLCAnc3VjY2VzcycpOwogICAgICAgIHVwZGF0ZVVJKCdjb2xvcnNGb3VuZCcsICdzdWNjZXNzJywgeyBjb3VudDogc3RhdGUuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCB9KTsKICAgICAgfQogICAgfQogIH0pOwoKICBhc3luYyBmdW5jdGlvbiBkZXRlY3RMYW5ndWFnZSgpIHsKICAgIHRyeSB7CiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYmFja2VuZC53cGxhY2UubGl2ZS9tZScsIHsKICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLAogICAgICB9KTsKICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTsKICAgICAgc3RhdGUubGFuZ3VhZ2UgPSBkYXRhLmxhbmd1YWdlID09PSAncHQnID8gJ3B0JyA6ICdlbic7CiAgICB9IGNhdGNoIHsKICAgICAgc3RhdGUubGFuZ3VhZ2UgPSBuYXZpZ2F0b3IubGFuZ3VhZ2Uuc3RhcnRzV2l0aCgncHQnKSA/ICdwdCcgOiAnZW4nOwogICAgfQogIH0KCiAgLy8gVVRJTElUWSBGVU5DVElPTlMKICBjb25zdCBVdGlscyA9IHsKICAgIHNsZWVwOiAobXMpID0+IG5ldyBQcm9taXNlKChyKSA9PiBzZXRUaW1lb3V0KHIsIG1zKSksCgogICAgZHluYW1pY1NsZWVwOiBhc3luYyBmdW5jdGlvbiAodGlja0FuZEdldFJlbWFpbmluZ01zKSB7CiAgICAgIGxldCByZW1haW5pbmcgPSBNYXRoLm1heCgwLCBhd2FpdCB0aWNrQW5kR2V0UmVtYWluaW5nTXMoKSk7CiAgICAgIHdoaWxlIChyZW1haW5pbmcgPiAwKSB7CiAgICAgICAgY29uc3QgaW50ZXJ2YWwgPSByZW1haW5pbmcgPiA1MDAwID8gMjAwMCA6IHJlbWFpbmluZyA+IDEwMDAgPyA1MDAgOiAxMDA7CiAgICAgICAgYXdhaXQgdGhpcy5zbGVlcChNYXRoLm1pbihpbnRlcnZhbCwgcmVtYWluaW5nKSk7CiAgICAgICAgcmVtYWluaW5nID0gTWF0aC5tYXgoMCwgYXdhaXQgdGlja0FuZEdldFJlbWFpbmluZ01zKCkpOwogICAgICB9CiAgICB9LAoKICAgIHdhaXRGb3JTZWxlY3RvcjogYXN5bmMgKHNlbGVjdG9yLCBpbnRlcnZhbCA9IDIwMCwgdGltZW91dCA9IDUwMDApID0+IHsKICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpOwogICAgICB3aGlsZSAoRGF0ZS5ub3coKSAtIHN0YXJ0IDwgdGltZW91dCkgewogICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7CiAgICAgICAgaWYgKGVsKSByZXR1cm4gZWw7CiAgICAgICAgYXdhaXQgVXRpbHMuc2xlZXAoaW50ZXJ2YWwpOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfSwKCiAgICBtc1RvVGltZVRleHQobXMpIHsKICAgICAgY29uc3QgdG90YWxTZWNvbmRzID0gTWF0aC5jZWlsKG1zIC8gMTAwMCk7CiAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcih0b3RhbFNlY29uZHMgLyAzNjAwKTsKICAgICAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHRvdGFsU2Vjb25kcyAlIDM2MDApIC8gNjApOwogICAgICBjb25zdCBzZWNvbmRzID0gdG90YWxTZWNvbmRzICUgNjA7CgogICAgICBpZiAoaG91cnMgPiAwKSByZXR1cm4gYCR7aG91cnN9aCAke21pbnV0ZXN9bSAke3NlY29uZHN9c2A7CiAgICAgIGlmIChtaW51dGVzID4gMCkgcmV0dXJuIGAke21pbnV0ZXN9bSAke3NlY29uZHN9c2A7CiAgICAgIHJldHVybiBgJHtzZWNvbmRzfXNgOwogICAgfSwKCiAgICAvLyBEZWJvdW5jZWQgc2Nyb2xsLXRvLWFkanVzdCBoYW5kbGVyIGZvciBzbGlkZXJzCiAgICBjcmVhdGVTY3JvbGxUb0FkanVzdDogKGVsZW1lbnQsIHVwZGF0ZUNhbGxiYWNrLCBtaW4sIG1heCwgc3RlcCA9IDEpID0+IHsKICAgICAgbGV0IGRlYm91bmNlVGltZXIgPSBudWxsOwogICAgICAKICAgICAgY29uc3QgaGFuZGxlV2hlZWwgPSAoZSkgPT4gewogICAgICAgIC8vIE9ubHkgdHJpZ2dlciB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIHNsaWRlcgogICAgICAgIGlmIChlLnRhcmdldCAhPT0gZWxlbWVudCkgcmV0dXJuOwogICAgICAgIAogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgIAogICAgICAgIC8vIENsZWFyIGV4aXN0aW5nIGRlYm91bmNlIHRpbWVyCiAgICAgICAgaWYgKGRlYm91bmNlVGltZXIpIHsKICAgICAgICAgIGNsZWFyVGltZW91dChkZWJvdW5jZVRpbWVyKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gRGVib3VuY2UgdGhlIGFkanVzdG1lbnQgdG8gbWFrZSBpdCBwcmVjaXNlCiAgICAgICAgZGVib3VuY2VUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gcGFyc2VJbnQoZWxlbWVudC52YWx1ZSkgfHwgMDsKICAgICAgICAgIGNvbnN0IGRlbHRhID0gZS5kZWx0YVkgPiAwID8gLXN0ZXAgOiBzdGVwOwogICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBNYXRoLm1heChtaW4sIE1hdGgubWluKG1heCwgY3VycmVudFZhbHVlICsgZGVsdGEpKTsKICAgICAgICAgIAogICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjdXJyZW50VmFsdWUpIHsKICAgICAgICAgICAgZWxlbWVudC52YWx1ZSA9IG5ld1ZhbHVlOwogICAgICAgICAgICB1cGRhdGVDYWxsYmFjayhuZXdWYWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfSwgNTApOyAvLyA1MG1zIGRlYm91bmNlIGZvciBwcmVjaXNlIGNvbnRyb2wKICAgICAgfTsKICAgICAgCiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBoYW5kbGVXaGVlbCwgeyBwYXNzaXZlOiBmYWxzZSB9KTsKICAgICAgCiAgICAgIC8vIFJldHVybiBjbGVhbnVwIGZ1bmN0aW9uCiAgICAgIHJldHVybiAoKSA9PiB7CiAgICAgICAgaWYgKGRlYm91bmNlVGltZXIpIGNsZWFyVGltZW91dChkZWJvdW5jZVRpbWVyKTsKICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlV2hlZWwpOwogICAgICB9OwogICAgfSwKCiAgICAvKioKICAgICAqIENhbGN1bGF0ZSB0aGUgcmFuZ2Ugb2YgdGlsZSBjb29yZGluYXRlcyAoaW4gcmVnaW9uIHNwYWNlKSB0aGF0IGNvdmVyIGEgZ2l2ZW4gaW1hZ2UgYXJlYS4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFJlZ2lvblggLSBCYXNlIHJlZ2lvbiBYCiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRSZWdpb25ZIC0gQmFzZSByZWdpb24gWQogICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0UGl4ZWxYIC0gU3RhcnRpbmcgcGl4ZWwgWCB3aXRoaW4gdGhlIHJlZ2lvbiBncmlkCiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRQaXhlbFkgLSBTdGFydGluZyBwaXhlbCBZIHdpdGhpbiB0aGUgcmVnaW9uIGdyaWQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIEltYWdlIHdpZHRoIGluIHBpeGVscwogICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIEltYWdlIGhlaWdodCBpbiBwaXhlbHMKICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aWxlU2l6ZSAtIFNpemUgb2YgYSB0aWxlIChkZWZhdWx0IDEwMDApCiAgICAgKiBAcmV0dXJucyB7eyBzdGFydFRpbGVYOiBudW1iZXIsIHN0YXJ0VGlsZVk6IG51bWJlciwgZW5kVGlsZVg6IG51bWJlciwgZW5kVGlsZVk6IG51bWJlciB9fQogICAgICovCiAgICBjYWxjdWxhdGVUaWxlUmFuZ2UoCiAgICAgIHN0YXJ0UmVnaW9uWCwKICAgICAgc3RhcnRSZWdpb25ZLAogICAgICBzdGFydFBpeGVsWCwKICAgICAgc3RhcnRQaXhlbFksCiAgICAgIHdpZHRoLAogICAgICBoZWlnaHQsCiAgICAgIHRpbGVTaXplID0gMTAwMAogICAgKSB7CiAgICAgIGNvbnN0IGVuZFBpeGVsWCA9IHN0YXJ0UGl4ZWxYICsgd2lkdGg7CiAgICAgIGNvbnN0IGVuZFBpeGVsWSA9IHN0YXJ0UGl4ZWxZICsgaGVpZ2h0OwoKICAgICAgcmV0dXJuIHsKICAgICAgICBzdGFydFRpbGVYOiBzdGFydFJlZ2lvblggKyBNYXRoLmZsb29yKHN0YXJ0UGl4ZWxYIC8gdGlsZVNpemUpLAogICAgICAgIHN0YXJ0VGlsZVk6IHN0YXJ0UmVnaW9uWSArIE1hdGguZmxvb3Ioc3RhcnRQaXhlbFkgLyB0aWxlU2l6ZSksCiAgICAgICAgZW5kVGlsZVg6IHN0YXJ0UmVnaW9uWCArIE1hdGguZmxvb3IoKGVuZFBpeGVsWCAtIDEpIC8gdGlsZVNpemUpLAogICAgICAgIGVuZFRpbGVZOiBzdGFydFJlZ2lvblkgKyBNYXRoLmZsb29yKChlbmRQaXhlbFkgLSAxKSAvIHRpbGVTaXplKSwKICAgICAgfTsKICAgIH0sIC8vIFR1cm5zdGlsZSBHZW5lcmF0b3IgSW50ZWdyYXRpb24gLSBPcHRpbWl6ZWQgd2l0aCB3aWRnZXQgcmV1c2UgYW5kIHByb3BlciBjbGVhbnVwCiAgICB0dXJuc3RpbGVMb2FkZWQ6IGZhbHNlLAogICAgX3R1cm5zdGlsZUNvbnRhaW5lcjogbnVsbCwKICAgIF90dXJuc3RpbGVPdmVybGF5OiBudWxsLAogICAgX3R1cm5zdGlsZVdpZGdldElkOiBudWxsLAogICAgX2xhc3RTaXRla2V5OiBudWxsLAoKICAgIGFzeW5jIGxvYWRUdXJuc3RpbGUoKSB7CiAgICAgIC8vIElmIFR1cm5zdGlsZSBpcyBhbHJlYWR5IHByZXNlbnQsIGp1c3QgcmVzb2x2ZS4KICAgICAgaWYgKHdpbmRvdy50dXJuc3RpbGUpIHsKICAgICAgICB0aGlzLnR1cm5zdGlsZUxvYWRlZCA9IHRydWU7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIC8vIEF2b2lkIGFkZGluZyB0aGUgc2NyaXB0IHR3aWNlCiAgICAgICAgaWYgKAogICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigKICAgICAgICAgICAgJ3NjcmlwdFtzcmNePSJodHRwczovL2NoYWxsZW5nZXMuY2xvdWRmbGFyZS5jb20vdHVybnN0aWxlL3YwL2FwaS5qcyJdJwogICAgICAgICAgKQogICAgICAgICkgewogICAgICAgICAgY29uc3QgY2hlY2tSZWFkeSA9ICgpID0+IHsKICAgICAgICAgICAgaWYgKHdpbmRvdy50dXJuc3RpbGUpIHsKICAgICAgICAgICAgICB0aGlzLnR1cm5zdGlsZUxvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2tSZWFkeSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfTsKICAgICAgICAgIHJldHVybiBjaGVja1JlYWR5KCk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICBzY3JpcHQuc3JjID0gJ2h0dHBzOi8vY2hhbGxlbmdlcy5jbG91ZGZsYXJlLmNvbS90dXJuc3RpbGUvdjAvYXBpLmpzP3JlbmRlcj1leHBsaWNpdCc7CiAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTsKICAgICAgICBzY3JpcHQuZGVmZXIgPSB0cnVlOwogICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7CiAgICAgICAgICB0aGlzLnR1cm5zdGlsZUxvYWRlZCA9IHRydWU7CiAgICAgICAgICBjb25zb2xlLmxvZygn4pyFIFR1cm5zdGlsZSBzY3JpcHQgbG9hZGVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH07CiAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIGxvYWQgVHVybnN0aWxlIHNjcmlwdCcpOwogICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgVHVybnN0aWxlJykpOwogICAgICAgIH07CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgICB9KTsKICAgIH0sCgogICAgLy8gQ3JlYXRlIG9yIHJldXNlIHRoZSB0dXJuc3RpbGUgY29udGFpbmVyIC0gY29tcGxldGVseSBoaWRkZW4gZm9yIHRva2VuIGdlbmVyYXRpb24KICAgIGVuc3VyZVR1cm5zdGlsZUNvbnRhaW5lcigpIHsKICAgICAgaWYgKCF0aGlzLl90dXJuc3RpbGVDb250YWluZXIgfHwgIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fdHVybnN0aWxlQ29udGFpbmVyKSkgewogICAgICAgIC8vIENsZWFuIHVwIG9sZCBjb250YWluZXIgaWYgaXQgZXhpc3RzCiAgICAgICAgaWYgKHRoaXMuX3R1cm5zdGlsZUNvbnRhaW5lcikgewogICAgICAgICAgdGhpcy5fdHVybnN0aWxlQ29udGFpbmVyLnJlbW92ZSgpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fdHVybnN0aWxlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgdGhpcy5fdHVybnN0aWxlQ29udGFpbmVyLmNsYXNzTmFtZSA9ICd3cGxhY2UtdHVybnN0aWxlLWhpZGRlbic7CiAgICAgICAgdGhpcy5fdHVybnN0aWxlQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpOwogICAgICAgIHRoaXMuX3R1cm5zdGlsZUNvbnRhaW5lci5pZCA9ICd0dXJuc3RpbGUtd2lkZ2V0LWNvbnRhaW5lcic7CiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl90dXJuc3RpbGVDb250YWluZXIpOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLl90dXJuc3RpbGVDb250YWluZXI7CiAgICB9LAoKICAgIC8vIEludGVyYWN0aXZlIG92ZXJsYXkgY29udGFpbmVyIGZvciB2aXNpYmxlIHdpZGdldHMgd2hlbiBuZWVkZWQKICAgIGVuc3VyZVR1cm5zdGlsZU92ZXJsYXlDb250YWluZXIoKSB7CiAgICAgIGlmICh0aGlzLl90dXJuc3RpbGVPdmVybGF5ICYmIGRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fdHVybnN0aWxlT3ZlcmxheSkpIHsKICAgICAgICByZXR1cm4gdGhpcy5fdHVybnN0aWxlT3ZlcmxheTsKICAgICAgfQoKICAgICAgY29uc3Qgb3ZlcmxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBvdmVybGF5LmlkID0gJ3R1cm5zdGlsZS1vdmVybGF5LWNvbnRhaW5lcic7CiAgICAgIG92ZXJsYXkuY2xhc3NOYW1lID0gJ3dwbGFjZS10dXJuc3RpbGUtb3ZlcmxheSB3cGxhY2Utb3ZlcmxheS1oaWRkZW4nOwoKICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBVdGlscy50KCd0dXJuc3RpbGVJbnN0cnVjdGlvbnMnKTsKICAgICAgdGl0bGUuY2xhc3NOYW1lID0gJ3dwbGFjZS10dXJuc3RpbGUtdGl0bGUnOwoKICAgICAgY29uc3QgaG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICBob3N0LmlkID0gJ3R1cm5zdGlsZS1vdmVybGF5LWhvc3QnOwogICAgICBob3N0LmNsYXNzTmFtZSA9ICd3cGxhY2UtdHVybnN0aWxlLWhvc3QnOwoKICAgICAgY29uc3QgaGlkZUJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogICAgICBoaWRlQnRuLnRleHRDb250ZW50ID0gVXRpbHMudCgnaGlkZVR1cm5zdGlsZUJ0bicpOwogICAgICBoaWRlQnRuLmNsYXNzTmFtZSA9ICd3cGxhY2UtdHVybnN0aWxlLWhpZGUtYnRuJzsKICAgICAgaGlkZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IG92ZXJsYXkucmVtb3ZlKCkpOwoKICAgICAgb3ZlcmxheS5hcHBlbmRDaGlsZCh0aXRsZSk7CiAgICAgIG92ZXJsYXkuYXBwZW5kQ2hpbGQoaG9zdCk7CiAgICAgIG92ZXJsYXkuYXBwZW5kQ2hpbGQoaGlkZUJ0bik7CiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheSk7CgogICAgICB0aGlzLl90dXJuc3RpbGVPdmVybGF5ID0gb3ZlcmxheTsKICAgICAgcmV0dXJuIG92ZXJsYXk7CiAgICB9LAoKICAgIGFzeW5jIGV4ZWN1dGVUdXJuc3RpbGUoc2l0ZWtleSwgYWN0aW9uID0gJ3BhaW50JykgewogICAgICBhd2FpdCB0aGlzLmxvYWRUdXJuc3RpbGUoKTsKCiAgICAgIC8vIFRyeSByZXVzaW5nIGV4aXN0aW5nIHdpZGdldCBmaXJzdCBpZiBzaXRla2V5IG1hdGNoZXMKICAgICAgaWYgKHRoaXMuX3R1cm5zdGlsZVdpZGdldElkICYmIHRoaXMuX2xhc3RTaXRla2V5ID09PSBzaXRla2V5ICYmIHdpbmRvdy50dXJuc3RpbGU/LmV4ZWN1dGUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc29sZS5sb2coJ/CflIQgUmV1c2luZyBleGlzdGluZyBUdXJuc3RpbGUgd2lkZ2V0Li4uJyk7CiAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IFByb21pc2UucmFjZShbCiAgICAgICAgICAgIHdpbmRvdy50dXJuc3RpbGUuZXhlY3V0ZSh0aGlzLl90dXJuc3RpbGVXaWRnZXRJZCwgeyBhY3Rpb24gfSksCiAgICAgICAgICAgIG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+CiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdFeGVjdXRlIHRpbWVvdXQnKSksIDE1MDAwKQogICAgICAgICAgICApLAogICAgICAgICAgXSk7CiAgICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4ubGVuZ3RoID4gMjApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBUb2tlbiBnZW5lcmF0ZWQgdmlhIHdpZGdldCByZXVzZScpOwogICAgICAgICAgICByZXR1cm4gdG9rZW47CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCfvv70gV2lkZ2V0IHJldXNlIGZhaWxlZCwgd2lsbCBjcmVhdGUgYSBmcmVzaCB3aWRnZXQ6JywgZXJyb3IubWVzc2FnZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBUcnkgaW52aXNpYmxlIHdpZGdldCBmaXJzdAogICAgICBjb25zdCBpbnZpc2libGVUb2tlbiA9IGF3YWl0IHRoaXMuY3JlYXRlVHVybnN0aWxlV2lkZ2V0KHNpdGVrZXksIGFjdGlvbik7CiAgICAgIGlmIChpbnZpc2libGVUb2tlbiAmJiBpbnZpc2libGVUb2tlbi5sZW5ndGggPiAyMCkgewogICAgICAgIHJldHVybiBpbnZpc2libGVUb2tlbjsKICAgICAgfQoKICAgICAgY29uc29sZS5sb2coJ++/vSBGYWxsaW5nIGJhY2sgdG8gaW50ZXJhY3RpdmUgVHVybnN0aWxlICh2aXNpYmxlKS4nKTsKICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY3JlYXRlVHVybnN0aWxlV2lkZ2V0SW50ZXJhY3RpdmUoc2l0ZWtleSwgYWN0aW9uKTsKICAgIH0sCgogICAgYXN5bmMgY3JlYXRlVHVybnN0aWxlV2lkZ2V0KHNpdGVrZXksIGFjdGlvbikgewogICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICB0cnkgewogICAgICAgICAgLy8gRm9yY2UgY2xlYW51cCBvZiBhbnkgZXhpc3Rpbmcgd2lkZ2V0CiAgICAgICAgICBpZiAodGhpcy5fdHVybnN0aWxlV2lkZ2V0SWQgJiYgd2luZG93LnR1cm5zdGlsZT8ucmVtb3ZlKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgd2luZG93LnR1cm5zdGlsZS5yZW1vdmUodGhpcy5fdHVybnN0aWxlV2lkZ2V0SWQpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfwn6e5IENsZWFuZWQgdXAgZXhpc3RpbmcgVHVybnN0aWxlIHdpZGdldCcpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gV2lkZ2V0IGNsZWFudXAgd2FybmluZzonLCBlLm1lc3NhZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5lbnN1cmVUdXJuc3RpbGVDb250YWluZXIoKTsKICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJzsKCiAgICAgICAgICAvLyBWZXJpZnkgVHVybnN0aWxlIGlzIGF2YWlsYWJsZQogICAgICAgICAgaWYgKCF3aW5kb3cudHVybnN0aWxlPy5yZW5kZXIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFR1cm5zdGlsZSBub3QgYXZhaWxhYmxlIGZvciByZW5kZXJpbmcnKTsKICAgICAgICAgICAgcmVzb2x2ZShudWxsKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIENyZWF0aW5nIGludmlzaWJsZSBUdXJuc3RpbGUgd2lkZ2V0Li4uJyk7CiAgICAgICAgICBjb25zdCB3aWRnZXRJZCA9IHdpbmRvdy50dXJuc3RpbGUucmVuZGVyKGNvbnRhaW5lciwgewogICAgICAgICAgICBzaXRla2V5LAogICAgICAgICAgICBhY3Rpb24sCiAgICAgICAgICAgIHNpemU6ICdpbnZpc2libGUnLAogICAgICAgICAgICByZXRyeTogJ2F1dG8nLAogICAgICAgICAgICAncmV0cnktaW50ZXJ2YWwnOiA4MDAwLAogICAgICAgICAgICBjYWxsYmFjazogKHRva2VuKSA9PiB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBJbnZpc2libGUgVHVybnN0aWxlIGNhbGxiYWNrJyk7CiAgICAgICAgICAgICAgcmVzb2x2ZSh0b2tlbik7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICdlcnJvci1jYWxsYmFjayc6ICgpID0+IHJlc29sdmUobnVsbCksCiAgICAgICAgICAgICd0aW1lb3V0LWNhbGxiYWNrJzogKCkgPT4gcmVzb2x2ZShudWxsKSwKICAgICAgICAgIH0pOwoKICAgICAgICAgIHRoaXMuX3R1cm5zdGlsZVdpZGdldElkID0gd2lkZ2V0SWQ7CiAgICAgICAgICB0aGlzLl9sYXN0U2l0ZWtleSA9IHNpdGVrZXk7CgogICAgICAgICAgaWYgKCF3aWRnZXRJZCkgewogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShudWxsKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBFeGVjdXRlIHRoZSB3aWRnZXQgYW5kIHJhY2Ugd2l0aCB0aW1lb3V0CiAgICAgICAgICBQcm9taXNlLnJhY2UoWwogICAgICAgICAgICB3aW5kb3cudHVybnN0aWxlLmV4ZWN1dGUod2lkZ2V0SWQsIHsgYWN0aW9uIH0pLAogICAgICAgICAgICBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PgogICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignSW52aXNpYmxlIGV4ZWN1dGUgdGltZW91dCcpKSwgMTIwMDApCiAgICAgICAgICAgICksCiAgICAgICAgICBdKQogICAgICAgICAgICAudGhlbihyZXNvbHZlKQogICAgICAgICAgICAuY2F0Y2goKCkgPT4gcmVzb2x2ZShudWxsKSk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEludmlzaWJsZSBUdXJuc3RpbGUgY3JlYXRpb24gZmFpbGVkOicsIGUpOwogICAgICAgICAgcmVzb2x2ZShudWxsKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKCiAgICBhc3luYyBjcmVhdGVUdXJuc3RpbGVXaWRnZXRJbnRlcmFjdGl2ZShzaXRla2V5LCBhY3Rpb24pIHsKICAgICAgLy8gQ3JlYXRlIGEgdmlzaWJsZSB3aWRnZXQgdGhhdCB1c2VycyBjYW4gaW50ZXJhY3Qgd2l0aCBpZiBuZWVkZWQKICAgICAgY29uc29sZS5sb2coJ/CflIQgQ3JlYXRpbmcgaW50ZXJhY3RpdmUgVHVybnN0aWxlIHdpZGdldCAodmlzaWJsZSknKTsKCiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgIHRyeSB7CiAgICAgICAgICAvLyBGb3JjZSBjbGVhbnVwIG9mIGFueSBleGlzdGluZyB3aWRnZXQKICAgICAgICAgIGlmICh0aGlzLl90dXJuc3RpbGVXaWRnZXRJZCAmJiB3aW5kb3cudHVybnN0aWxlPy5yZW1vdmUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICB3aW5kb3cudHVybnN0aWxlLnJlbW92ZSh0aGlzLl90dXJuc3RpbGVXaWRnZXRJZCk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBXaWRnZXQgY2xlYW51cCB3YXJuaW5nOicsIGUubWVzc2FnZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCBvdmVybGF5ID0gdGhpcy5lbnN1cmVUdXJuc3RpbGVPdmVybGF5Q29udGFpbmVyKCk7CiAgICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3dwbGFjZS1vdmVybGF5LWhpZGRlbicpOwogICAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKCiAgICAgICAgICBjb25zdCBob3N0ID0gb3ZlcmxheS5xdWVyeVNlbGVjdG9yKCcjdHVybnN0aWxlLW92ZXJsYXktaG9zdCcpOwogICAgICAgICAgaG9zdC5pbm5lckhUTUwgPSAnJzsKCiAgICAgICAgICAvLyBTZXQgYSB0aW1lb3V0IGZvciBpbnRlcmFjdGl2ZSBtb2RlCiAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUud2Fybign4o+wIEludGVyYWN0aXZlIFR1cm5zdGlsZSB3aWRnZXQgdGltZW91dCcpOwogICAgICAgICAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ3dwbGFjZS1vdmVybGF5LWhpZGRlbicpOwogICAgICAgICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgIHJlc29sdmUobnVsbCk7CiAgICAgICAgICB9LCA2MDAwMCk7IC8vIDYwIHNlY29uZHMgZm9yIHVzZXIgaW50ZXJhY3Rpb24KCiAgICAgICAgICBjb25zdCB3aWRnZXRJZCA9IHdpbmRvdy50dXJuc3RpbGUucmVuZGVyKGhvc3QsIHsKICAgICAgICAgICAgc2l0ZWtleSwKICAgICAgICAgICAgYWN0aW9uLAogICAgICAgICAgICBzaXplOiAnbm9ybWFsJywKICAgICAgICAgICAgdGhlbWU6ICdsaWdodCcsCiAgICAgICAgICAgIGNhbGxiYWNrOiAodG9rZW4pID0+IHsKICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd3cGxhY2Utb3ZlcmxheS1oaWRkZW4nKTsKICAgICAgICAgICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBJbnRlcmFjdGl2ZSBUdXJuc3RpbGUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpOwoKICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJyAmJiB0b2tlbi5sZW5ndGggPiAyMCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZSh0b2tlbik7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybign4p2MIEludmFsaWQgdG9rZW4gZnJvbSBpbnRlcmFjdGl2ZSB3aWRnZXQnKTsKICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICAnZXJyb3ItY2FsbGJhY2snOiAoZXJyb3IpID0+IHsKICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd3cGxhY2Utb3ZlcmxheS1oaWRkZW4nKTsKICAgICAgICAgICAgICBvdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCfinYwgSW50ZXJhY3RpdmUgVHVybnN0aWxlIGVycm9yOicsIGVycm9yKTsKICAgICAgICAgICAgICByZXNvbHZlKG51bGwpOwogICAgICAgICAgICB9LAogICAgICAgICAgfSk7CgogICAgICAgICAgdGhpcy5fdHVybnN0aWxlV2lkZ2V0SWQgPSB3aWRnZXRJZDsKICAgICAgICAgIHRoaXMuX2xhc3RTaXRla2V5ID0gc2l0ZWtleTsKCiAgICAgICAgICBpZiAoIXdpZGdldElkKSB7CiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCd3cGxhY2Utb3ZlcmxheS1oaWRkZW4nKTsKICAgICAgICAgICAgb3ZlcmxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICBjb25zb2xlLndhcm4oJ+KdjCBGYWlsZWQgdG8gY3JlYXRlIGludGVyYWN0aXZlIFR1cm5zdGlsZSB3aWRnZXQnKTsKICAgICAgICAgICAgcmVzb2x2ZShudWxsKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCfinIUgSW50ZXJhY3RpdmUgVHVybnN0aWxlIHdpZGdldCBjcmVhdGVkLCB3YWl0aW5nIGZvciB1c2VyIGludGVyYWN0aW9uLi4uJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIEludGVyYWN0aXZlIFR1cm5zdGlsZSBjcmVhdGlvbiBmYWlsZWQ6JywgZSk7CiAgICAgICAgICByZXNvbHZlKG51bGwpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIC8vIENsZWFudXAgbWV0aG9kIGZvciB3aGVuIHRoZSBzY3JpcHQgaXMgZGlzYWJsZWQvcmVsb2FkZWQKICAgIGNsZWFudXBUdXJuc3RpbGUoKSB7CiAgICAgIGlmICh0aGlzLl90dXJuc3RpbGVXaWRnZXRJZCAmJiB3aW5kb3cudHVybnN0aWxlPy5yZW1vdmUpIHsKICAgICAgICB0cnkgewogICAgICAgICAgd2luZG93LnR1cm5zdGlsZS5yZW1vdmUodGhpcy5fdHVybnN0aWxlV2lkZ2V0SWQpOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGNsZWFudXAgVHVybnN0aWxlIHdpZGdldDonLCBlKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl90dXJuc3RpbGVDb250YWluZXIgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLl90dXJuc3RpbGVDb250YWluZXIpKSB7CiAgICAgICAgdGhpcy5fdHVybnN0aWxlQ29udGFpbmVyLnJlbW92ZSgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5fdHVybnN0aWxlT3ZlcmxheSAmJiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuX3R1cm5zdGlsZU92ZXJsYXkpKSB7CiAgICAgICAgdGhpcy5fdHVybnN0aWxlT3ZlcmxheS5yZW1vdmUoKTsKICAgICAgfQoKICAgICAgdGhpcy5fdHVybnN0aWxlV2lkZ2V0SWQgPSBudWxsOwogICAgICB0aGlzLl90dXJuc3RpbGVDb250YWluZXIgPSBudWxsOwogICAgICB0aGlzLl90dXJuc3RpbGVPdmVybGF5ID0gbnVsbDsKICAgICAgdGhpcy5fbGFzdFNpdGVrZXkgPSBudWxsOwogICAgfSwKCiAgICBhc3luYyBvYnRhaW5TaXRla2V5QW5kVG9rZW4oZmFsbGJhY2sgPSAnMHg0QUFBQUFBQnBxSmU4Rk8wTjg0cTBGJykgewogICAgICAvLyBDYWNoZSBzaXRla2V5IHRvIGF2b2lkIHJlcGVhdGVkIERPTSBxdWVyaWVzCiAgICAgIGlmICh0aGlzLl9jYWNoZWRTaXRla2V5KSB7CiAgICAgICAgY29uc29sZS5sb2coJ/CflI0gVXNpbmcgY2FjaGVkIHNpdGVrZXk6JywgdGhpcy5fY2FjaGVkU2l0ZWtleSk7CgogICAgICAgIHJldHVybiBpc1Rva2VuVmFsaWQoKQogICAgICAgICAgPyB7CiAgICAgICAgICAgICAgc2l0ZWtleTogdGhpcy5fY2FjaGVkU2l0ZWtleSwKICAgICAgICAgICAgICB0b2tlbjogdHVybnN0aWxlVG9rZW4sCiAgICAgICAgICAgIH0KICAgICAgICAgIDogeyBzaXRla2V5OiB0aGlzLl9jYWNoZWRTaXRla2V5LCB0b2tlbjogbnVsbCB9OwogICAgICB9CgogICAgICAvLyBMaXN0IG9mIHBvdGVudGlhbCBzaXRla2V5cyB0byB0cnkKICAgICAgY29uc3QgcG90ZW50aWFsU2l0ZWtleXMgPSBbCiAgICAgICAgJzB4NEFBQUFBQUJwcUplOEZPME44NHEwRicsIC8vIFdQbGFjZSBjb21tb24gc2l0ZWtleQogICAgICAgICcweDRBQUFBQUFBSjd4aktBcDZNdF83encnLCAvLyBBbHRlcm5hdGl2ZSBXUGxhY2Ugc2l0ZWtleQogICAgICAgICcweDRBQUFBQUFEbTVRV3g2T3YyTE5GMmcnLCAvLyBBbm90aGVyIGNvbW1vbiBzaXRla2V5CiAgICAgIF07CiAgICAgIGNvbnN0IHRyeVNpdGVrZXkgPSBhc3luYyAoc2l0ZWtleSwgc291cmNlKSA9PiB7CiAgICAgICAgaWYgKCFzaXRla2V5IHx8IHNpdGVrZXkubGVuZ3RoIDwgMTApIHJldHVybiBudWxsOwoKICAgICAgICBjb25zb2xlLmxvZyhg8J+UjSBUZXN0aW5nIHNpdGVrZXkgZnJvbSAke3NvdXJjZX06YCwgc2l0ZWtleSk7CiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmV4ZWN1dGVUdXJuc3RpbGUoc2l0ZWtleSk7CgogICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi5sZW5ndGggPj0gMjApIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgVmFsaWQgdG9rZW4gZ2VuZXJhdGVkIGZyb20gJHtzb3VyY2V9IHNpdGVrZXlgKTsKICAgICAgICAgIHNldFR1cm5zdGlsZVRva2VuKHRva2VuKTsKICAgICAgICAgIHRoaXMuX2NhY2hlZFNpdGVrZXkgPSBzaXRla2V5OwogICAgICAgICAgcmV0dXJuIHsgc2l0ZWtleSwgdG9rZW4gfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2coYOKdjCBGYWlsZWQgdG8gZ2V0IHRva2VuIGZyb20gJHtzb3VyY2V9IHNpdGVrZXlgKTsKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHRyeSB7CiAgICAgICAgLy8gMe+4j+KDoyBkYXRhLXNpdGVrZXkgYXR0cmlidXRlCiAgICAgICAgY29uc3Qgc2l0ZWtleVNlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXNpdGVrZXldJyk7CiAgICAgICAgaWYgKHNpdGVrZXlTZWwpIHsKICAgICAgICAgIGNvbnN0IHNpdGVrZXkgPSBzaXRla2V5U2VsLmdldEF0dHJpYnV0ZSgnZGF0YS1zaXRla2V5Jyk7CiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0cnlTaXRla2V5KHNpdGVrZXksICdkYXRhIGF0dHJpYnV0ZScpOwogICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gMu+4j+KDoyBUdXJuc3RpbGUgZWxlbWVudAogICAgICAgIGNvbnN0IHR1cm5zdGlsZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNmLXR1cm5zdGlsZScpOwogICAgICAgIGlmICh0dXJuc3RpbGVFbD8uZGF0YXNldD8uc2l0ZWtleSkgewogICAgICAgICAgY29uc3Qgc2l0ZWtleSA9IHR1cm5zdGlsZUVsLmRhdGFzZXQuc2l0ZWtleTsKICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyeVNpdGVrZXkoc2l0ZWtleSwgJ3R1cm5zdGlsZSBlbGVtZW50Jyk7CiAgICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyAz77iP4oOjIE1ldGEgdGFncwogICAgICAgIGNvbnN0IG1ldGFUYWdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgKICAgICAgICAgICdtZXRhW25hbWUqPSJ0dXJuc3RpbGUiXSwgbWV0YVtwcm9wZXJ0eSo9InR1cm5zdGlsZSJdJwogICAgICAgICk7CiAgICAgICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFUYWdzKSB7CiAgICAgICAgICBjb25zdCBjb250ZW50ID0gbWV0YS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKTsKICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyeVNpdGVrZXkoY29udGVudCwgJ21ldGEgdGFnJyk7CiAgICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyA077iP4oOjIEdsb2JhbCB2YXJpYWJsZQogICAgICAgIGlmICh3aW5kb3cuX19UVVJOU1RJTEVfU0lURUtFWSkgewogICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdHJ5U2l0ZWtleSh3aW5kb3cuX19UVVJOU1RJTEVfU0lURUtFWSwgJ2dsb2JhbCB2YXJpYWJsZScpOwogICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gNe+4j+KDoyBTY3JpcHQgdGFncwogICAgICAgIGNvbnN0IHNjcmlwdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKTsKICAgICAgICBmb3IgKGNvbnN0IHNjcmlwdCBvZiBzY3JpcHRzKSB7CiAgICAgICAgICBjb25zdCBjb250ZW50ID0gc2NyaXB0LnRleHRDb250ZW50IHx8IHNjcmlwdC5pbm5lckhUTUw7CiAgICAgICAgICBjb25zdCBtYXRjaCA9IGNvbnRlbnQubWF0Y2goCiAgICAgICAgICAgIC8oPzpzaXRla2V5fGRhdGEtc2l0ZWtleSlbJyJcc1xbXF06XD1cKF0qWyciXT8oWzAtOWEtekEtWl8tXXsyMCx9KVsnIl0/L2kKICAgICAgICAgICk7CiAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHsKICAgICAgICAgICAgY29uc3QgZXh0cmFjdGVkID0gbWF0Y2hbMV0ucmVwbGFjZSgvWyciXS9nLCAnJyk7CiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRyeVNpdGVrZXkoZXh0cmFjdGVkLCAnc2NyaXB0IGNvbnRlbnQnKTsKICAgICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIDbvuI/ig6MgS25vd24gcG90ZW50aWFsIHNpdGVrZXlzCiAgICAgICAgY29uc29sZS5sb2coJ/CflI0gVGVzdGluZyBrbm93biBwb3RlbnRpYWwgc2l0ZWtleXMuLi4nKTsKICAgICAgICBmb3IgKGNvbnN0IHRlc3RTaXRla2V5IG9mIHBvdGVudGlhbFNpdGVrZXlzKSB7CiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0cnlTaXRla2V5KHRlc3RTaXRla2V5LCAna25vd24gbGlzdCcpOwogICAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBFcnJvciBkdXJpbmcgc2l0ZWtleSBkZXRlY3Rpb246JywgZXJyb3IpOwogICAgICB9CgogICAgICAvLyA377iP4oOjIEZhbGxiYWNrCiAgICAgIGNvbnNvbGUubG9nKCfwn5SnIFRyeWluZyBmYWxsYmFjayBzaXRla2V5OicsIGZhbGxiYWNrKTsKICAgICAgY29uc3QgZmFsbGJhY2tSZXN1bHQgPSBhd2FpdCB0cnlTaXRla2V5KGZhbGxiYWNrLCAnZmFsbGJhY2snKTsKICAgICAgaWYgKGZhbGxiYWNrUmVzdWx0KSB7CiAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVzdWx0OwogICAgICB9CgogICAgICBjb25zb2xlLmVycm9yKCfinYwgTm8gd29ya2luZyBzaXRla2V5IG9yIHRva2VuIGZvdW5kLicpOwogICAgICByZXR1cm4geyBzaXRla2V5OiBudWxsLCB0b2tlbjogbnVsbCB9OwogICAgfSwKCiAgICBjcmVhdGVFbGVtZW50OiAodGFnLCBwcm9wcyA9IHt9LCBjaGlsZHJlbiA9IFtdKSA9PiB7CiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7CgogICAgICBPYmplY3QuZW50cmllcyhwcm9wcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7CiAgICAgICAgaWYgKGtleSA9PT0gJ3N0eWxlJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHZhbHVlKTsKICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2NsYXNzTmFtZScpIHsKICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnKSB7CiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycpIHsKICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gY2hpbGRyZW47CiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHsKICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gewogICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZCkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBlbGVtZW50OwogICAgfSwKCiAgICBjcmVhdGVCdXR0b246IChpZCwgdGV4dCwgaWNvbiwgb25DbGljaywgc3R5bGUgPSBDT05GSUcuQ1NTX0NMQVNTRVMuQlVUVE9OX1BSSU1BUlkpID0+IHsKICAgICAgY29uc3QgYnV0dG9uID0gVXRpbHMuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgewogICAgICAgIGlkOiBpZCwKICAgICAgICBzdHlsZTogc3R5bGUsCiAgICAgICAgaW5uZXJIVE1MOiBgJHtpY29uID8gYDxpIGNsYXNzPSIke2ljb259Ij48L2k+YCA6ICcnfTxzcGFuPiR7dGV4dH08L3NwYW4+YCwKICAgICAgfSk7CiAgICAgIGlmIChvbkNsaWNrKSBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrKTsKICAgICAgcmV0dXJuIGJ1dHRvbjsKICAgIH0sCgogICAgLy8gU3luY2hyb25vdXMgdHJhbnNsYXRpb24gZnVuY3Rpb24gZm9yIFVJIHJlbmRlcmluZwogICAgdDogKGtleSwgcGFyYW1zID0ge30pID0+IHsKICAgICAgLy8gVHJ5IHRvIGdldCBmcm9tIGNhY2hlIGZpcnN0CiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7c3RhdGUubGFuZ3VhZ2V9XyR7a2V5fWA7CiAgICAgIGlmICh0cmFuc2xhdGlvbkNhY2hlLmhhcyhjYWNoZUtleSkpIHsKICAgICAgICBsZXQgdGV4dCA9IHRyYW5zbGF0aW9uQ2FjaGUuZ2V0KGNhY2hlS2V5KTsKICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goKHBhcmFtKSA9PiB7CiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGB7JHtwYXJhbX19YCwgcGFyYW1zW3BhcmFtXSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHRleHQ7CiAgICAgIH0KCiAgICAgIC8vIFRyeSBkeW5hbWljYWxseSBsb2FkZWQgdHJhbnNsYXRpb25zIChhbHJlYWR5IGxvYWRlZCkKICAgICAgaWYgKGxvYWRlZFRyYW5zbGF0aW9uc1tzdGF0ZS5sYW5ndWFnZV0/LltrZXldKSB7CiAgICAgICAgbGV0IHRleHQgPSBsb2FkZWRUcmFuc2xhdGlvbnNbc3RhdGUubGFuZ3VhZ2VdW2tleV07CiAgICAgICAgLy8gQ2FjaGUgZm9yIGZ1dHVyZSB1c2UKICAgICAgICB0cmFuc2xhdGlvbkNhY2hlLnNldChjYWNoZUtleSwgdGV4dCk7CiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKChwYXJhbSkgPT4gewogICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShgeyR7cGFyYW19fWAsIHBhcmFtc1twYXJhbV0pOwogICAgICAgIH0pOwogICAgICAgIHJldHVybiB0ZXh0OwogICAgICB9CgogICAgICAvLyBGYWxsYmFjayB0byBFbmdsaXNoIGlmIGN1cnJlbnQgbGFuZ3VhZ2UgZmFpbGVkCiAgICAgIGlmIChzdGF0ZS5sYW5ndWFnZSAhPT0gJ2VuJyAmJiBsb2FkZWRUcmFuc2xhdGlvbnNbJ2VuJ10/LltrZXldKSB7CiAgICAgICAgbGV0IHRleHQgPSBsb2FkZWRUcmFuc2xhdGlvbnNbJ2VuJ11ba2V5XTsKICAgICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goKHBhcmFtKSA9PiB7CiAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKGB7JHtwYXJhbX19YCwgcGFyYW1zW3BhcmFtXSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHRleHQ7CiAgICAgIH0KCiAgICAgIC8vIEZpbmFsIGZhbGxiYWNrIHRvIGVtZXJnZW5jeSBmYWxsYmFjayBvciBrZXkKICAgICAgbGV0IHRleHQgPSBGQUxMQkFDS19URVhUW3N0YXRlLmxhbmd1YWdlXT8uW2tleV0gfHwgRkFMTEJBQ0tfVEVYVC5lbj8uW2tleV0gfHwga2V5OwogICAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goKHBhcmFtKSA9PiB7CiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShuZXcgUmVnRXhwKGBcXHske3BhcmFtfVxcfWAsICdnJyksIHBhcmFtc1twYXJhbV0pOwogICAgICB9KTsKCiAgICAgIC8vIExvZyBtaXNzaW5nIHRyYW5zbGF0aW9ucyBmb3IgZGVidWdnaW5nCiAgICAgIGlmICh0ZXh0ID09PSBrZXkgJiYga2V5ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPIE1pc3NpbmcgdHJhbnNsYXRpb24gZm9yIGtleTogJHtrZXl9IChsYW5ndWFnZTogJHtzdGF0ZS5sYW5ndWFnZX0pYCk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0ZXh0OwogICAgfSwKCiAgICBzaG93QWxlcnQ6IChtZXNzYWdlLCB0eXBlID0gJ2luZm8nKSA9PiB7CiAgICAgIGNvbnN0IGFsZXJ0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgIGFsZXJ0RGl2LmNsYXNzTmFtZSA9IGB3cGxhY2UtYWxlcnQtYmFzZSB3cGxhY2UtYWxlcnQtJHt0eXBlfWA7CgogICAgICBhbGVydERpdi50ZXh0Q29udGVudCA9IG1lc3NhZ2U7CiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWxlcnREaXYpOwoKICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgYWxlcnREaXYuc3R5bGUuYW5pbWF0aW9uID0gJ3NsaWRlLWRvd24gMC4zcyBlYXNlLW91dCByZXZlcnNlJzsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYWxlcnREaXYpOwogICAgICAgIH0sIDMwMCk7CiAgICAgIH0sIDQwMDApOwogICAgfSwKCiAgICBjb2xvckRpc3RhbmNlOiAoYSwgYikgPT4KICAgICAgTWF0aC5zcXJ0KE1hdGgucG93KGFbMF0gLSBiWzBdLCAyKSArIE1hdGgucG93KGFbMV0gLSBiWzFdLCAyKSArIE1hdGgucG93KGFbMl0gLSBiWzJdLCAyKSksCiAgICBfbGFiQ2FjaGU6IG5ldyBNYXAoKSwgLy8ga2V5OiAocjw8MTYpfChnPDw4KXxiICB2YWx1ZTogW0wsYSxiXQogICAgX3JnYlRvTGFiOiAociwgZywgYikgPT4gewogICAgICAvLyBzUkdCIC0+IGxpbmVhcgogICAgICBjb25zdCBzcmdiVG9MaW5lYXIgPSAodikgPT4gewogICAgICAgIHYgLz0gMjU1OwogICAgICAgIHJldHVybiB2IDw9IDAuMDQwNDUgPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpOwogICAgICB9OwogICAgICBjb25zdCBybCA9IHNyZ2JUb0xpbmVhcihyKTsKICAgICAgY29uc3QgZ2wgPSBzcmdiVG9MaW5lYXIoZyk7CiAgICAgIGNvbnN0IGJsID0gc3JnYlRvTGluZWFyKGIpOwogICAgICBsZXQgWCA9IHJsICogMC40MTI0ICsgZ2wgKiAwLjM1NzYgKyBibCAqIDAuMTgwNTsKICAgICAgbGV0IFkgPSBybCAqIDAuMjEyNiArIGdsICogMC43MTUyICsgYmwgKiAwLjA3MjI7CiAgICAgIGxldCBaID0gcmwgKiAwLjAxOTMgKyBnbCAqIDAuMTE5MiArIGJsICogMC45NTA1OwogICAgICBYIC89IDAuOTUwNDc7CiAgICAgIFkgLz0gMS4wOwogICAgICBaIC89IDEuMDg4ODM7CiAgICAgIGNvbnN0IGYgPSAodCkgPT4gKHQgPiAwLjAwODg1NiA/IE1hdGguY2JydCh0KSA6IDcuNzg3ICogdCArIDE2IC8gMTE2KTsKICAgICAgY29uc3QgZlggPSBmKFgpLAogICAgICAgIGZZID0gZihZKSwKICAgICAgICBmWiA9IGYoWik7CiAgICAgIGNvbnN0IEwgPSAxMTYgKiBmWSAtIDE2OwogICAgICBjb25zdCBhID0gNTAwICogKGZYIC0gZlkpOwogICAgICBjb25zdCBiMiA9IDIwMCAqIChmWSAtIGZaKTsKICAgICAgcmV0dXJuIFtMLCBhLCBiMl07CiAgICB9LAogICAgX2xhYjogKHIsIGcsIGIpID0+IHsKICAgICAgY29uc3Qga2V5ID0gKHIgPDwgMTYpIHwgKGcgPDwgOCkgfCBiOwogICAgICBsZXQgdiA9IFV0aWxzLl9sYWJDYWNoZS5nZXQoa2V5KTsKICAgICAgaWYgKCF2KSB7CiAgICAgICAgdiA9IFV0aWxzLl9yZ2JUb0xhYihyLCBnLCBiKTsKICAgICAgICBVdGlscy5fbGFiQ2FjaGUuc2V0KGtleSwgdik7CiAgICAgIH0KICAgICAgcmV0dXJuIHY7CiAgICB9LAogICAgZmluZENsb3Nlc3RQYWxldHRlQ29sb3I6IChyLCBnLCBiLCBwYWxldHRlKSA9PiB7CiAgICAgIC8vIFVzZSBwcm92aWRlZCBwYWxldHRlIG9yIGRlcml2ZSBmcm9tIENPTE9SX01BUAogICAgICBpZiAoIXBhbGV0dGUgfHwgcGFsZXR0ZS5sZW5ndGggPT09IDApIHsKICAgICAgICBwYWxldHRlID0gT2JqZWN0LnZhbHVlcyhDT05GSUcuQ09MT1JfTUFQKQogICAgICAgICAgLmZpbHRlcigoYykgPT4gYy5yZ2IpCiAgICAgICAgICAubWFwKChjKSA9PiBbYy5yZ2IuciwgYy5yZ2IuZywgYy5yZ2IuYl0pOwogICAgICB9CiAgICAgIGlmIChzdGF0ZS5jb2xvck1hdGNoaW5nQWxnb3JpdGhtID09PSAnbGVnYWN5JykgewogICAgICAgIGxldCBtZW5vckRpc3QgPSBJbmZpbml0eTsKICAgICAgICBsZXQgY29yID0gWzAsIDAsIDBdOwogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFsZXR0ZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgY29uc3QgW3ByLCBwZywgcGJdID0gcGFsZXR0ZVtpXTsKICAgICAgICAgIGNvbnN0IHJtZWFuID0gKHByICsgcikgLyAyOwogICAgICAgICAgY29uc3QgcmRpZmYgPSBwciAtIHI7CiAgICAgICAgICBjb25zdCBnZGlmZiA9IHBnIC0gZzsKICAgICAgICAgIGNvbnN0IGJkaWZmID0gcGIgLSBiOwogICAgICAgICAgY29uc3QgZGlzdCA9IE1hdGguc3FydCgKICAgICAgICAgICAgKCgoNTEyICsgcm1lYW4pICogcmRpZmYgKiByZGlmZikgPj4gOCkgKwogICAgICAgICAgICAgIDQgKiBnZGlmZiAqIGdkaWZmICsKICAgICAgICAgICAgICAoKCg3NjcgLSBybWVhbikgKiBiZGlmZiAqIGJkaWZmKSA+PiA4KQogICAgICAgICAgKTsKICAgICAgICAgIGlmIChkaXN0IDwgbWVub3JEaXN0KSB7CiAgICAgICAgICAgIG1lbm9yRGlzdCA9IGRpc3Q7CiAgICAgICAgICAgIGNvciA9IFtwciwgcGcsIHBiXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGNvcjsKICAgICAgfQogICAgICAvLyBMQUIgYWxnb3JpdGhtCiAgICAgIGNvbnN0IFtMdCwgYXQsIGJ0XSA9IFV0aWxzLl9sYWIociwgZywgYik7CiAgICAgIGNvbnN0IHRhcmdldENocm9tYSA9IE1hdGguc3FydChhdCAqIGF0ICsgYnQgKiBidCk7CiAgICAgIGxldCBiZXN0ID0gbnVsbDsKICAgICAgbGV0IGJlc3REaXN0ID0gSW5maW5pdHk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFsZXR0ZS5sZW5ndGg7IGkrKykgewogICAgICAgIGNvbnN0IFtwciwgcGcsIHBiXSA9IHBhbGV0dGVbaV07CiAgICAgICAgY29uc3QgW0xwLCBhcCwgYnBdID0gVXRpbHMuX2xhYihwciwgcGcsIHBiKTsKICAgICAgICBjb25zdCBkTCA9IEx0IC0gTHA7CiAgICAgICAgY29uc3QgZGEgPSBhdCAtIGFwOwogICAgICAgIGNvbnN0IGRiID0gYnQgLSBicDsKICAgICAgICBsZXQgZGlzdCA9IGRMICogZEwgKyBkYSAqIGRhICsgZGIgKiBkYjsKICAgICAgICBpZiAoc3RhdGUuZW5hYmxlQ2hyb21hUGVuYWx0eSAmJiB0YXJnZXRDaHJvbWEgPiAyMCkgewogICAgICAgICAgY29uc3QgY2FuZENocm9tYSA9IE1hdGguc3FydChhcCAqIGFwICsgYnAgKiBicCk7CiAgICAgICAgICBpZiAoY2FuZENocm9tYSA8IHRhcmdldENocm9tYSkgewogICAgICAgICAgICBjb25zdCBjaHJvbWFEaWZmID0gdGFyZ2V0Q2hyb21hIC0gY2FuZENocm9tYTsKICAgICAgICAgICAgZGlzdCArPSBjaHJvbWFEaWZmICogY2hyb21hRGlmZiAqIHN0YXRlLmNocm9tYVBlbmFsdHlXZWlnaHQ7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChkaXN0IDwgYmVzdERpc3QpIHsKICAgICAgICAgIGJlc3REaXN0ID0gZGlzdDsKICAgICAgICAgIGJlc3QgPSBwYWxldHRlW2ldOwogICAgICAgICAgaWYgKGJlc3REaXN0ID09PSAwKSBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGJlc3QgfHwgWzAsIDAsIDBdOwogICAgfSwKCiAgICBpc1doaXRlUGl4ZWw6IChyLCBnLCBiKSA9PiB7CiAgICAgIGNvbnN0IHd0ID0gc3RhdGUuY3VzdG9tV2hpdGVUaHJlc2hvbGQgfHwgQ09ORklHLldISVRFX1RIUkVTSE9MRDsKICAgICAgcmV0dXJuIHIgPj0gd3QgJiYgZyA+PSB3dCAmJiBiID49IHd0OwogICAgfSwKCiAgICByZXNvbHZlQ29sb3IodGFyZ2V0UmdiLCBhdmFpbGFibGVDb2xvcnMsIGV4YWN0TWF0Y2ggPSBmYWxzZSkgewogICAgICBpZiAoIWF2YWlsYWJsZUNvbG9ycyB8fCBhdmFpbGFibGVDb2xvcnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlkOiBudWxsLAogICAgICAgICAgcmdiOiB0YXJnZXRSZ2IsCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgY29uc3QgY2FjaGVLZXkgPSBgJHt0YXJnZXRSZ2JbMF19LCR7dGFyZ2V0UmdiWzFdfSwke3RhcmdldFJnYlsyXX18JHtzdGF0ZS5jb2xvck1hdGNoaW5nQWxnb3JpdGhtfXwkewogICAgICAgIHN0YXRlLmVuYWJsZUNocm9tYVBlbmFsdHkgPyAnYycgOiAnbmMnCiAgICAgIH18JHtzdGF0ZS5jaHJvbWFQZW5hbHR5V2VpZ2h0fXwke2V4YWN0TWF0Y2ggPyAnZXhhY3QnIDogJ2Nsb3Nlc3QnfWA7CgogICAgICBpZiAoY29sb3JDYWNoZS5oYXMoY2FjaGVLZXkpKSByZXR1cm4gY29sb3JDYWNoZS5nZXQoY2FjaGVLZXkpOwoKICAgICAgLy8gQ2hlY2sgZm9yIGFuIGV4YWN0IGNvbG9yIG1hdGNoIGluIGF2YWlsYWJsZUNvbG9ycy4KICAgICAgLy8gSWYgZm91bmQsIHJldHVybiB0aGUgbWF0Y2hlZCBjb2xvciB3aXRoIGl0cyBJRC4KICAgICAgLy8gSWYgbm90IGZvdW5kLCByZXR1cm4gdGhlIHRhcmdldCBjb2xvciB3aXRoIG51bGwgSUQuCiAgICAgIC8vIENhY2hlIHRoZSByZXN1bHQgZm9yIGZ1dHVyZSBsb29rdXBzLgogICAgICBpZiAoZXhhY3RNYXRjaCkgewogICAgICAgIGNvbnN0IG1hdGNoID0gYXZhaWxhYmxlQ29sb3JzLmZpbmQoCiAgICAgICAgICAoYykgPT4gYy5yZ2JbMF0gPT09IHRhcmdldFJnYlswXSAmJiBjLnJnYlsxXSA9PT0gdGFyZ2V0UmdiWzFdICYmIGMucmdiWzJdID09PSB0YXJnZXRSZ2JbMl0KICAgICAgICApOwogICAgICAgIGNvbnN0IHJlc3VsdCA9IG1hdGNoID8geyBpZDogbWF0Y2guaWQsIHJnYjogWy4uLm1hdGNoLnJnYl0gfSA6IHsgaWQ6IG51bGwsIHJnYjogdGFyZ2V0UmdiIH07CiAgICAgICAgY29sb3JDYWNoZS5zZXQoY2FjaGVLZXksIHJlc3VsdCk7CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQoKICAgICAgLy8gY2hlY2sgZm9yIHdoaXRlIHVzaW5nIHRocmVzaG9sZAogICAgICBjb25zdCB3aGl0ZVRocmVzaG9sZCA9IHN0YXRlLmN1c3RvbVdoaXRlVGhyZXNob2xkIHx8IENPTkZJRy5XSElURV9USFJFU0hPTEQ7CiAgICAgIGlmICgKICAgICAgICB0YXJnZXRSZ2JbMF0gPj0gd2hpdGVUaHJlc2hvbGQgJiYKICAgICAgICB0YXJnZXRSZ2JbMV0gPj0gd2hpdGVUaHJlc2hvbGQgJiYKICAgICAgICB0YXJnZXRSZ2JbMl0gPj0gd2hpdGVUaHJlc2hvbGQKICAgICAgKSB7CiAgICAgICAgY29uc3Qgd2hpdGVFbnRyeSA9IGF2YWlsYWJsZUNvbG9ycy5maW5kKAogICAgICAgICAgKGMpID0+CiAgICAgICAgICAgIGMucmdiWzBdID49IHdoaXRlVGhyZXNob2xkICYmIGMucmdiWzFdID49IHdoaXRlVGhyZXNob2xkICYmIGMucmdiWzJdID49IHdoaXRlVGhyZXNob2xkCiAgICAgICAgKTsKICAgICAgICBpZiAod2hpdGVFbnRyeSkgewogICAgICAgICAgY29uc3QgcmVzdWx0ID0geyBpZDogd2hpdGVFbnRyeS5pZCwgcmdiOiBbLi4ud2hpdGVFbnRyeS5yZ2JdIH07CiAgICAgICAgICBjb2xvckNhY2hlLnNldChjYWNoZUtleSwgcmVzdWx0KTsKICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBmaW5kIG5lYXJlc3QgY29sb3IKICAgICAgbGV0IGJlc3RJZCA9IGF2YWlsYWJsZUNvbG9yc1swXS5pZDsKICAgICAgbGV0IGJlc3RSZ2IgPSBbLi4uYXZhaWxhYmxlQ29sb3JzWzBdLnJnYl07CiAgICAgIGxldCBiZXN0U2NvcmUgPSBJbmZpbml0eTsKCiAgICAgIGlmIChzdGF0ZS5jb2xvck1hdGNoaW5nQWxnb3JpdGhtID09PSAnbGVnYWN5JykgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXZhaWxhYmxlQ29sb3JzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBjb25zdCBjID0gYXZhaWxhYmxlQ29sb3JzW2ldOwogICAgICAgICAgY29uc3QgW3IsIGcsIGJdID0gYy5yZ2I7CiAgICAgICAgICBjb25zdCBybWVhbiA9IChyICsgdGFyZ2V0UmdiWzBdKSAvIDI7CiAgICAgICAgICBjb25zdCByZGlmZiA9IHIgLSB0YXJnZXRSZ2JbMF07CiAgICAgICAgICBjb25zdCBnZGlmZiA9IGcgLSB0YXJnZXRSZ2JbMV07CiAgICAgICAgICBjb25zdCBiZGlmZiA9IGIgLSB0YXJnZXRSZ2JbMl07CiAgICAgICAgICBjb25zdCBkaXN0ID0gTWF0aC5zcXJ0KAogICAgICAgICAgICAoKCg1MTIgKyBybWVhbikgKiByZGlmZiAqIHJkaWZmKSA+PiA4KSArCiAgICAgICAgICAgICAgNCAqIGdkaWZmICogZ2RpZmYgKwogICAgICAgICAgICAgICgoKDc2NyAtIHJtZWFuKSAqIGJkaWZmICogYmRpZmYpID4+IDgpCiAgICAgICAgICApOwogICAgICAgICAgaWYgKGRpc3QgPCBiZXN0U2NvcmUpIHsKICAgICAgICAgICAgYmVzdFNjb3JlID0gZGlzdDsKICAgICAgICAgICAgYmVzdElkID0gYy5pZDsKICAgICAgICAgICAgYmVzdFJnYiA9IFsuLi5jLnJnYl07CiAgICAgICAgICAgIGlmIChkaXN0ID09PSAwKSBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc3QgW0x0LCBhdCwgYnRdID0gVXRpbHMuX2xhYih0YXJnZXRSZ2JbMF0sIHRhcmdldFJnYlsxXSwgdGFyZ2V0UmdiWzJdKTsKICAgICAgICBjb25zdCB0YXJnZXRDaHJvbWEgPSBNYXRoLnNxcnQoYXQgKiBhdCArIGJ0ICogYnQpOwogICAgICAgIGNvbnN0IHBlbmFsdHlXZWlnaHQgPSBzdGF0ZS5lbmFibGVDaHJvbWFQZW5hbHR5ID8gc3RhdGUuY2hyb21hUGVuYWx0eVdlaWdodCB8fCAwLjE1IDogMDsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdmFpbGFibGVDb2xvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIGNvbnN0IGMgPSBhdmFpbGFibGVDb2xvcnNbaV07CiAgICAgICAgICBjb25zdCBbciwgZywgYl0gPSBjLnJnYjsKICAgICAgICAgIGNvbnN0IFtMMiwgYTIsIGIyXSA9IFV0aWxzLl9sYWIociwgZywgYik7CiAgICAgICAgICBjb25zdCBkTCA9IEx0IC0gTDIsCiAgICAgICAgICAgIGRhID0gYXQgLSBhMiwKICAgICAgICAgICAgZGIgPSBidCAtIGIyOwogICAgICAgICAgbGV0IGRpc3QgPSBkTCAqIGRMICsgZGEgKiBkYSArIGRiICogZGI7CgogICAgICAgICAgaWYgKHBlbmFsdHlXZWlnaHQgPiAwICYmIHRhcmdldENocm9tYSA+IDIwKSB7CiAgICAgICAgICAgIGNvbnN0IGNhbmRDaHJvbWEgPSBNYXRoLnNxcnQoYTIgKiBhMiArIGIyICogYjIpOwogICAgICAgICAgICBpZiAoY2FuZENocm9tYSA8IHRhcmdldENocm9tYSkgewogICAgICAgICAgICAgIGNvbnN0IGNkID0gdGFyZ2V0Q2hyb21hIC0gY2FuZENocm9tYTsKICAgICAgICAgICAgICBkaXN0ICs9IGNkICogY2QgKiBwZW5hbHR5V2VpZ2h0OwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGRpc3QgPCBiZXN0U2NvcmUpIHsKICAgICAgICAgICAgYmVzdFNjb3JlID0gZGlzdDsKICAgICAgICAgICAgYmVzdElkID0gYy5pZDsKICAgICAgICAgICAgYmVzdFJnYiA9IFsuLi5jLnJnYl07CiAgICAgICAgICAgIGlmIChkaXN0ID09PSAwKSBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIGNvbnN0IHJlc3VsdCA9IHsgaWQ6IGJlc3RJZCwgcmdiOiBiZXN0UmdiIH07CiAgICAgIGNvbG9yQ2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQpOwoKICAgICAgLy8gbGltaXQgdGhlIHNpemUgb2YgdGhlIGNhY2hlCiAgICAgIGlmIChjb2xvckNhY2hlLnNpemUgPiAxNTAwMCkgewogICAgICAgIGNvbnN0IGZpcnN0S2V5ID0gY29sb3JDYWNoZS5rZXlzKCkubmV4dCgpLnZhbHVlOwogICAgICAgIGNvbG9yQ2FjaGUuZGVsZXRlKGZpcnN0S2V5KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0sCgogICAgY3JlYXRlSW1hZ2VVcGxvYWRlcjogKCkgPT4KICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7CiAgICAgICAgaW5wdXQudHlwZSA9ICdmaWxlJzsKICAgICAgICBpbnB1dC5hY2NlcHQgPSAnaW1hZ2UvcG5nLGltYWdlL2pwZWcnOwogICAgICAgIGlucHV0Lm9uY2hhbmdlID0gKCkgPT4gewogICAgICAgICAgY29uc3QgZnIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgICAgZnIub25sb2FkID0gKCkgPT4gcmVzb2x2ZShmci5yZXN1bHQpOwogICAgICAgICAgZnIucmVhZEFzRGF0YVVSTChpbnB1dC5maWxlc1swXSk7CiAgICAgICAgfTsKICAgICAgICBpbnB1dC5jbGljaygpOwogICAgICB9KSwKCiAgICBjcmVhdGVGaWxlRG93bmxvYWRlcjogKGRhdGEsIGZpbGVuYW1lKSA9PiB7CiAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZGF0YV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pOwogICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICBhLmhyZWYgPSB1cmw7CiAgICAgIGEuZG93bmxvYWQgPSBmaWxlbmFtZTsKICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTsKICAgICAgYS5jbGljaygpOwogICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGEpOwogICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7CiAgICB9LAoKICAgIGNyZWF0ZUZpbGVVcGxvYWRlcjogKCkgPT4KICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTsKICAgICAgICBpbnB1dC50eXBlID0gJ2ZpbGUnOwogICAgICAgIGlucHV0LmFjY2VwdCA9ICcuanNvbic7CiAgICAgICAgaW5wdXQub25jaGFuZ2UgPSAoZSkgPT4gewogICAgICAgICAgY29uc3QgZmlsZSA9IGUudGFyZ2V0LmZpbGVzWzBdOwogICAgICAgICAgaWYgKGZpbGUpIHsKICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVhZGVyLnJlc3VsdCk7CiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIEpTT04gZmlsZScpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4gcmVqZWN0KG5ldyBFcnJvcignRmlsZSByZWFkaW5nIGVycm9yJykpOwogICAgICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ05vIGZpbGUgc2VsZWN0ZWQnKSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICBpbnB1dC5jbGljaygpOwogICAgICB9KSwKCiAgICBleHRyYWN0QXZhaWxhYmxlQ29sb3JzOiAoKSA9PiB7CiAgICAgIGNvbnN0IGNvbG9yRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudG9vbHRpcCBidXR0b25baWRePSJjb2xvci0iXScpOwogICAgICBpZiAoY29sb3JFbGVtZW50cy5sZW5ndGggPT09IDApIHsKICAgICAgICBjb25zb2xlLmxvZygn4p2MIE5vIGNvbG9yIGVsZW1lbnRzIGZvdW5kIG9uIHBhZ2UnKTsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgICAvLyBTZXBhcmF0ZSBhdmFpbGFibGUgYW5kIHVuYXZhaWxhYmxlIGNvbG9ycwogICAgICBjb25zdCBhdmFpbGFibGVDb2xvcnMgPSBbXTsKICAgICAgY29uc3QgdW5hdmFpbGFibGVDb2xvcnMgPSBbXTsKCiAgICAgIEFycmF5LmZyb20oY29sb3JFbGVtZW50cykuZm9yRWFjaCgoZWwpID0+IHsKICAgICAgICBjb25zdCBpZCA9IE51bWJlci5wYXJzZUludChlbC5pZC5yZXBsYWNlKCdjb2xvci0nLCAnJykpOwogICAgICAgIGlmIChpZCA9PT0gMCkgcmV0dXJuOyAvLyBTa2lwIHRyYW5zcGFyZW50IGNvbG9yCgogICAgICAgIGNvbnN0IHJnYlN0ciA9IGVsLnN0eWxlLmJhY2tncm91bmRDb2xvci5tYXRjaCgvXGQrL2cpOwogICAgICAgIGlmICghcmdiU3RyIHx8IHJnYlN0ci5sZW5ndGggPCAzKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oYFNraXBwaW5nIGNvbG9yIGVsZW1lbnQgJHtlbC5pZH0g4oCUIGNhbm5vdCBwYXJzZSBSR0JgKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgY29uc3QgcmdiID0gcmdiU3RyLm1hcChOdW1iZXIpOwoKICAgICAgICAvLyBGaW5kIGNvbG9yIG5hbWUgZnJvbSBDT0xPUl9NQVAKICAgICAgICBjb25zdCBjb2xvckluZm8gPSBPYmplY3QudmFsdWVzKENPTkZJRy5DT0xPUl9NQVApLmZpbmQoKGNvbG9yKSA9PiBjb2xvci5pZCA9PT0gaWQpOwogICAgICAgIGNvbnN0IG5hbWUgPSBjb2xvckluZm8gPyBjb2xvckluZm8ubmFtZSA6IGBVbmtub3duIENvbG9yICR7aWR9YDsKCiAgICAgICAgY29uc3QgY29sb3JEYXRhID0geyBpZCwgbmFtZSwgcmdiIH07CgogICAgICAgIC8vIENoZWNrIGlmIGNvbG9yIGlzIGF2YWlsYWJsZSAobm8gU1ZHIG92ZXJsYXkgbWVhbnMgYXZhaWxhYmxlKQogICAgICAgIGlmICghZWwucXVlcnlTZWxlY3Rvcignc3ZnJykpIHsKICAgICAgICAgIGF2YWlsYWJsZUNvbG9ycy5wdXNoKGNvbG9yRGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHVuYXZhaWxhYmxlQ29sb3JzLnB1c2goY29sb3JEYXRhKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgLy8gQ29uc29sZSBsb2cgZGV0YWlsZWQgY29sb3IgaW5mb3JtYXRpb24KICAgICAgY29uc29sZS5sb2coJz09PSBDQVBUVVJFRCBDT0xPUlMgU1RBVFVTID09PScpOwogICAgICBjb25zb2xlLmxvZyhgVG90YWwgYXZhaWxhYmxlIGNvbG9yczogJHthdmFpbGFibGVDb2xvcnMubGVuZ3RofWApOwogICAgICBjb25zb2xlLmxvZyhgVG90YWwgdW5hdmFpbGFibGUgY29sb3JzOiAke3VuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aH1gKTsKICAgICAgY29uc29sZS5sb2coYFRvdGFsIGNvbG9ycyBzY2FubmVkOiAke2F2YWlsYWJsZUNvbG9ycy5sZW5ndGggKyB1bmF2YWlsYWJsZUNvbG9ycy5sZW5ndGh9YCk7CgogICAgICBpZiAoYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCA+IDApIHsKICAgICAgICBjb25zb2xlLmxvZygnXG4tLS0gQVZBSUxBQkxFIENPTE9SUyAtLS0nKTsKICAgICAgICBhdmFpbGFibGVDb2xvcnMuZm9yRWFjaCgoY29sb3IsIGluZGV4KSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgYCR7CiAgICAgICAgICAgICAgaW5kZXggKyAxCiAgICAgICAgICAgIH0uIElEOiAke2NvbG9yLmlkfSwgTmFtZTogIiR7Y29sb3IubmFtZX0iLCBSR0I6ICgke2NvbG9yLnJnYlswXX0sICR7Y29sb3IucmdiWzFdfSwgJHtjb2xvci5yZ2JbMl19KWAKICAgICAgICAgICk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmICh1bmF2YWlsYWJsZUNvbG9ycy5sZW5ndGggPiAwKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1xuLS0tIFVOQVZBSUxBQkxFIENPTE9SUyAtLS0nKTsKICAgICAgICB1bmF2YWlsYWJsZUNvbG9ycy5mb3JFYWNoKChjb2xvciwgaW5kZXgpID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgICBgJHsKICAgICAgICAgICAgICBpbmRleCArIDEKICAgICAgICAgICAgfS4gSUQ6ICR7Y29sb3IuaWR9LCBOYW1lOiAiJHtjb2xvci5uYW1lfSIsIFJHQjogKCR7Y29sb3IucmdiWzBdfSwgJHtjb2xvci5yZ2JbMV19LCAke2NvbG9yLnJnYlsyXX0pIFtMT0NLRURdYAogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgY29uc29sZS5sb2coJz09PSBFTkQgQ09MT1IgU1RBVFVTID09PScpOwoKICAgICAgcmV0dXJuIGF2YWlsYWJsZUNvbG9yczsKICAgIH0sCgogICAgZm9ybWF0VGltZTogKG1zKSA9PiB7CiAgICAgIGNvbnN0IHNlY29uZHMgPSBNYXRoLmZsb29yKChtcyAvIDEwMDApICUgNjApOwogICAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigobXMgLyAoMTAwMCAqIDYwKSkgJSA2MCk7CiAgICAgIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcigobXMgLyAoMTAwMCAqIDYwICogNjApKSAlIDI0KTsKICAgICAgY29uc3QgZGF5cyA9IE1hdGguZmxvb3IobXMgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpOwoKICAgICAgbGV0IHJlc3VsdCA9ICcnOwogICAgICBpZiAoZGF5cyA+IDApIHJlc3VsdCArPSBgJHtkYXlzfWQgYDsKICAgICAgaWYgKGhvdXJzID4gMCB8fCBkYXlzID4gMCkgcmVzdWx0ICs9IGAke2hvdXJzfWggYDsKICAgICAgaWYgKG1pbnV0ZXMgPiAwIHx8IGhvdXJzID4gMCB8fCBkYXlzID4gMCkgcmVzdWx0ICs9IGAke21pbnV0ZXN9bSBgOwogICAgICByZXN1bHQgKz0gYCR7c2Vjb25kc31zYDsKCiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAoKICAgIGNhbGN1bGF0ZUVzdGltYXRlZFRpbWU6IChyZW1haW5pbmdQaXhlbHMsIGNoYXJnZXMsIGNvb2xkb3duKSA9PiB7CiAgICAgIGlmIChyZW1haW5pbmdQaXhlbHMgPD0gMCkgcmV0dXJuIDA7CgogICAgICBjb25zdCBwYWludGluZ1NwZWVkRGVsYXkgPSBzdGF0ZS5wYWludGluZ1NwZWVkID4gMCA/IDEwMDAgLyBzdGF0ZS5wYWludGluZ1NwZWVkIDogMTAwMDsKICAgICAgY29uc3QgdGltZUZyb21TcGVlZCA9IHJlbWFpbmluZ1BpeGVscyAqIHBhaW50aW5nU3BlZWREZWxheTsKCiAgICAgIGNvbnN0IGN5Y2xlc05lZWRlZCA9IE1hdGguY2VpbChyZW1haW5pbmdQaXhlbHMgLyBNYXRoLm1heChjaGFyZ2VzLCAxKSk7CiAgICAgIGNvbnN0IHRpbWVGcm9tQ2hhcmdlcyA9IGN5Y2xlc05lZWRlZCAqIGNvb2xkb3duOwoKICAgICAgcmV0dXJuIHRpbWVGcm9tU3BlZWQgKyB0aW1lRnJvbUNoYXJnZXM7IC8vIGNvbWJpbmUgaW5zdGVhZCBvZiB0YWtpbmcgbWF4CiAgICB9LAoKICAgIC8vIC0tLSBQYWludGVkIHBpeGVsIHRyYWNraW5nIGhlbHBlcnMgLS0tCiAgICBpbml0aWFsaXplUGFpbnRlZE1hcDogKHdpZHRoLCBoZWlnaHQpID0+IHsKICAgICAgaWYgKCFzdGF0ZS5wYWludGVkTWFwIHx8IHN0YXRlLnBhaW50ZWRNYXAubGVuZ3RoICE9PSBoZWlnaHQpIHsKICAgICAgICBzdGF0ZS5wYWludGVkTWFwID0gQXJyYXkoaGVpZ2h0KQogICAgICAgICAgLmZpbGwoKQogICAgICAgICAgLm1hcCgoKSA9PiBBcnJheSh3aWR0aCkuZmlsbChmYWxzZSkpOwogICAgICAgIGNvbnNvbGUubG9nKGDwn5OLIEluaXRpYWxpemVkIHBhaW50ZWQgbWFwOiAke3dpZHRofXgke2hlaWdodH1gKTsKICAgICAgfQogICAgfSwKCiAgICBtYXJrUGl4ZWxQYWludGVkOiAoeCwgeSwgcmVnaW9uWCA9IDAsIHJlZ2lvblkgPSAwKSA9PiB7CiAgICAgIGNvbnN0IGFjdHVhbFggPSB4ICsgcmVnaW9uWDsKICAgICAgY29uc3QgYWN0dWFsWSA9IHkgKyByZWdpb25ZOwoKICAgICAgaWYgKAogICAgICAgIHN0YXRlLnBhaW50ZWRNYXAgJiYKICAgICAgICBzdGF0ZS5wYWludGVkTWFwW2FjdHVhbFldICYmCiAgICAgICAgYWN0dWFsWCA+PSAwICYmCiAgICAgICAgYWN0dWFsWCA8IHN0YXRlLnBhaW50ZWRNYXBbYWN0dWFsWV0ubGVuZ3RoCiAgICAgICkgewogICAgICAgIHN0YXRlLnBhaW50ZWRNYXBbYWN0dWFsWV1bYWN0dWFsWF0gPSB0cnVlOwogICAgICB9CiAgICB9LAoKICAgIGlzUGl4ZWxQYWludGVkOiAoeCwgeSwgcmVnaW9uWCA9IDAsIHJlZ2lvblkgPSAwKSA9PiB7CiAgICAgIGNvbnN0IGFjdHVhbFggPSB4ICsgcmVnaW9uWDsKICAgICAgY29uc3QgYWN0dWFsWSA9IHkgKyByZWdpb25ZOwoKICAgICAgaWYgKAogICAgICAgIHN0YXRlLnBhaW50ZWRNYXAgJiYKICAgICAgICBzdGF0ZS5wYWludGVkTWFwW2FjdHVhbFldICYmCiAgICAgICAgYWN0dWFsWCA+PSAwICYmCiAgICAgICAgYWN0dWFsWCA8IHN0YXRlLnBhaW50ZWRNYXBbYWN0dWFsWV0ubGVuZ3RoCiAgICAgICkgewogICAgICAgIHJldHVybiBzdGF0ZS5wYWludGVkTWFwW2FjdHVhbFldW2FjdHVhbFhdOwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCgogICAgLy8gU21hcnQgc2F2ZSAtIG9ubHkgc2F2ZSBpZiBzaWduaWZpY2FudCBjaGFuZ2VzCiAgICBzaG91bGRBdXRvU2F2ZTogKCkgPT4gewogICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpOwogICAgICBjb25zdCBwaXhlbHNTaW5jZUxhc3RTYXZlID0gc3RhdGUucGFpbnRlZFBpeGVscyAtIHN0YXRlLl9sYXN0U2F2ZVBpeGVsQ291bnQ7CiAgICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RTYXZlID0gbm93IC0gc3RhdGUuX2xhc3RTYXZlVGltZTsKCiAgICAgIC8vIFNhdmUgY29uZGl0aW9uczoKICAgICAgLy8gMS4gRXZlcnkgMjUgcGl4ZWxzIChyZWR1Y2VkIGZyb20gNTAgZm9yIG1vcmUgZnJlcXVlbnQgc2F2ZXMpCiAgICAgIC8vIDIuIEF0IGxlYXN0IDMwIHNlY29uZHMgc2luY2UgbGFzdCBzYXZlIChwcmV2ZW50IHNwYW0pCiAgICAgIC8vIDMuIE5vdCBhbHJlYWR5IHNhdmluZwogICAgICByZXR1cm4gIXN0YXRlLl9zYXZlSW5Qcm9ncmVzcyAmJiBwaXhlbHNTaW5jZUxhc3RTYXZlID49IDI1ICYmIHRpbWVTaW5jZUxhc3RTYXZlID49IDMwMDAwOwogICAgfSwKCiAgICBwZXJmb3JtU21hcnRTYXZlOiAoKSA9PiB7CiAgICAgIGlmICghVXRpbHMuc2hvdWxkQXV0b1NhdmUoKSkgcmV0dXJuIGZhbHNlOwoKICAgICAgc3RhdGUuX3NhdmVJblByb2dyZXNzID0gdHJ1ZTsKICAgICAgY29uc3Qgc3VjY2VzcyA9IFV0aWxzLnNhdmVQcm9ncmVzcygpOwoKICAgICAgaWYgKHN1Y2Nlc3MpIHsKICAgICAgICBzdGF0ZS5fbGFzdFNhdmVQaXhlbENvdW50ID0gc3RhdGUucGFpbnRlZFBpeGVsczsKICAgICAgICBzdGF0ZS5fbGFzdFNhdmVUaW1lID0gRGF0ZS5ub3coKTsKICAgICAgICBjb25zb2xlLmxvZyhg8J+SviBBdXRvLXNhdmVkIGF0ICR7c3RhdGUucGFpbnRlZFBpeGVsc30gcGl4ZWxzYCk7CiAgICAgIH0KCiAgICAgIHN0YXRlLl9zYXZlSW5Qcm9ncmVzcyA9IGZhbHNlOwogICAgICByZXR1cm4gc3VjY2VzczsKICAgIH0sCgogICAgLy8gLS0tIERhdGEgbWFuYWdlbWVudCBoZWxwZXJzIC0tLQoKICAgIC8vIEJhc2U2NCBjb21wcmVzc2lvbiBoZWxwZXJzIGZvciBlZmZpY2llbnQgc3RvcmFnZQogICAgcGFja1BhaW50ZWRNYXBUb0Jhc2U2NDogKHBhaW50ZWRNYXAsIHdpZHRoLCBoZWlnaHQpID0+IHsKICAgICAgaWYgKCFwYWludGVkTWFwIHx8ICF3aWR0aCB8fCAhaGVpZ2h0KSByZXR1cm4gbnVsbDsKICAgICAgY29uc3QgdG90YWxCaXRzID0gd2lkdGggKiBoZWlnaHQ7CiAgICAgIGNvbnN0IGJ5dGVMZW4gPSBNYXRoLmNlaWwodG90YWxCaXRzIC8gOCk7CiAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZUxlbik7CiAgICAgIGxldCBiaXRJbmRleCA9IDA7CiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHsKICAgICAgICBjb25zdCByb3cgPSBwYWludGVkTWFwW3ldOwogICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICAgICAgY29uc3QgYml0ID0gcm93ICYmIHJvd1t4XSA/IDEgOiAwOwogICAgICAgICAgY29uc3QgYiA9IGJpdEluZGV4ID4+IDM7IC8vIGJ5dGUgaW5kZXgKICAgICAgICAgIGNvbnN0IG8gPSBiaXRJbmRleCAmIDc7IC8vIGJpdCBvZmZzZXQKICAgICAgICAgIGlmIChiaXQpIGJ5dGVzW2JdIHw9IDEgPDwgbzsKICAgICAgICAgIGJpdEluZGV4Kys7CiAgICAgICAgfQogICAgICB9CiAgICAgIGxldCBiaW5hcnkgPSAnJzsKICAgICAgY29uc3QgY2h1bmsgPSAweDgwMDA7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IGNodW5rKSB7CiAgICAgICAgYmluYXJ5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoCiAgICAgICAgICBudWxsLAogICAgICAgICAgYnl0ZXMuc3ViYXJyYXkoaSwgTWF0aC5taW4oaSArIGNodW5rLCBieXRlcy5sZW5ndGgpKQogICAgICAgICk7CiAgICAgIH0KICAgICAgcmV0dXJuIGJ0b2EoYmluYXJ5KTsKICAgIH0sCgogICAgdW5wYWNrUGFpbnRlZE1hcEZyb21CYXNlNjQ6IChiYXNlNjQsIHdpZHRoLCBoZWlnaHQpID0+IHsKICAgICAgaWYgKCFiYXNlNjQgfHwgIXdpZHRoIHx8ICFoZWlnaHQpIHJldHVybiBudWxsOwogICAgICBjb25zdCBiaW5hcnkgPSBhdG9iKGJhc2U2NCk7CiAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYmluYXJ5Lmxlbmd0aCk7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluYXJ5Lmxlbmd0aDsgaSsrKSBieXRlc1tpXSA9IGJpbmFyeS5jaGFyQ29kZUF0KGkpOwogICAgICBjb25zdCBtYXAgPSBBcnJheShoZWlnaHQpCiAgICAgICAgLmZpbGwoKQogICAgICAgIC5tYXAoKCkgPT4gQXJyYXkod2lkdGgpLmZpbGwoZmFsc2UpKTsKICAgICAgbGV0IGJpdEluZGV4ID0gMDsKICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykgewogICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykgewogICAgICAgICAgY29uc3QgYiA9IGJpdEluZGV4ID4+IDM7CiAgICAgICAgICBjb25zdCBvID0gYml0SW5kZXggJiA3OwogICAgICAgICAgbWFwW3ldW3hdID0gKChieXRlc1tiXSA+PiBvKSAmIDEpID09PSAxOwogICAgICAgICAgYml0SW5kZXgrKzsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG1hcDsKICAgIH0sCgogICAgLy8gTWlncmF0aW9uIGhlbHBlcnMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkKICAgIG1pZ3JhdGVQcm9ncmVzc1RvVjI6IChzYXZlZCkgPT4gewogICAgICBpZiAoIXNhdmVkKSByZXR1cm4gc2F2ZWQ7CiAgICAgIGNvbnN0IGlzVjEgPQogICAgICAgICFzYXZlZC52ZXJzaW9uIHx8CiAgICAgICAgc2F2ZWQudmVyc2lvbiA9PT0gJzEnIHx8CiAgICAgICAgc2F2ZWQudmVyc2lvbiA9PT0gJzEuMCcgfHwKICAgICAgICBzYXZlZC52ZXJzaW9uID09PSAnMS4xJzsKICAgICAgaWYgKCFpc1YxKSByZXR1cm4gc2F2ZWQ7CgogICAgICB0cnkgewogICAgICAgIGNvbnN0IG1pZ3JhdGVkID0geyAuLi5zYXZlZCB9OwogICAgICAgIGNvbnN0IHdpZHRoID0gbWlncmF0ZWQuaW1hZ2VEYXRhPy53aWR0aDsKICAgICAgICBjb25zdCBoZWlnaHQgPSBtaWdyYXRlZC5pbWFnZURhdGE/LmhlaWdodDsKICAgICAgICBpZiAobWlncmF0ZWQucGFpbnRlZE1hcCAmJiB3aWR0aCAmJiBoZWlnaHQpIHsKICAgICAgICAgIGNvbnN0IGRhdGEgPSBVdGlscy5wYWNrUGFpbnRlZE1hcFRvQmFzZTY0KG1pZ3JhdGVkLnBhaW50ZWRNYXAsIHdpZHRoLCBoZWlnaHQpOwogICAgICAgICAgbWlncmF0ZWQucGFpbnRlZE1hcFBhY2tlZCA9IHsgd2lkdGgsIGhlaWdodCwgZGF0YSB9OwogICAgICAgIH0KICAgICAgICBkZWxldGUgbWlncmF0ZWQucGFpbnRlZE1hcDsKICAgICAgICBtaWdyYXRlZC52ZXJzaW9uID0gJzInOwogICAgICAgIHJldHVybiBtaWdyYXRlZDsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybignTWlncmF0aW9uIHRvIHYyIGZhaWxlZCwgdXNpbmcgb3JpZ2luYWwgZGF0YTonLCBlKTsKICAgICAgICByZXR1cm4gc2F2ZWQ7CiAgICAgIH0KICAgIH0sCgogICAgbWlncmF0ZVByb2dyZXNzVG9WMjE6IChzYXZlZCkgPT4gewogICAgICBpZiAoIXNhdmVkKSByZXR1cm4gc2F2ZWQ7CiAgICAgIGlmIChzYXZlZC52ZXJzaW9uID09PSAnMi4xJykgcmV0dXJuIHNhdmVkOwogICAgICBjb25zdCBpc1YyID0gc2F2ZWQudmVyc2lvbiA9PT0gJzInIHx8IHNhdmVkLnZlcnNpb24gPT09ICcyLjAnOwogICAgICBjb25zdCBpc1YxID0KICAgICAgICAhc2F2ZWQudmVyc2lvbiB8fAogICAgICAgIHNhdmVkLnZlcnNpb24gPT09ICcxJyB8fAogICAgICAgIHNhdmVkLnZlcnNpb24gPT09ICcxLjAnIHx8CiAgICAgICAgc2F2ZWQudmVyc2lvbiA9PT0gJzEuMSc7CiAgICAgIGlmICghaXNWMiAmJiAhaXNWMSkgcmV0dXJuIHNhdmVkOyAvLyBzYXZlIHRoaXMgZm9yIGZ1dHVyZQogICAgICB0cnkgewogICAgICAgIGNvbnN0IG1pZ3JhdGVkID0geyAuLi5zYXZlZCB9OwogICAgICAgIC8vIEZpcnN0IG1pZ3JhdGUgdG8gdjIgaWYgbmVlZGVkCiAgICAgICAgaWYgKGlzVjEpIHsKICAgICAgICAgIGNvbnN0IHdpZHRoID0gbWlncmF0ZWQuaW1hZ2VEYXRhPy53aWR0aDsKICAgICAgICAgIGNvbnN0IGhlaWdodCA9IG1pZ3JhdGVkLmltYWdlRGF0YT8uaGVpZ2h0OwogICAgICAgICAgaWYgKG1pZ3JhdGVkLnBhaW50ZWRNYXAgJiYgd2lkdGggJiYgaGVpZ2h0KSB7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBVdGlscy5wYWNrUGFpbnRlZE1hcFRvQmFzZTY0KG1pZ3JhdGVkLnBhaW50ZWRNYXAsIHdpZHRoLCBoZWlnaHQpOwogICAgICAgICAgICBtaWdyYXRlZC5wYWludGVkTWFwUGFja2VkID0geyB3aWR0aCwgaGVpZ2h0LCBkYXRhIH07CiAgICAgICAgICB9CiAgICAgICAgICBkZWxldGUgbWlncmF0ZWQucGFpbnRlZE1hcDsKICAgICAgICB9CiAgICAgICAgbWlncmF0ZWQudmVyc2lvbiA9ICcyLjEnOwogICAgICAgIHJldHVybiBtaWdyYXRlZDsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybignTWlncmF0aW9uIHRvIHYyLjEgZmFpbGVkLCB1c2luZyBvcmlnaW5hbCBkYXRhOicsIGUpOwogICAgICAgIHJldHVybiBzYXZlZDsKICAgICAgfQogICAgfSwKCiAgICBtaWdyYXRlUHJvZ3Jlc3NUb1YyMjogKGRhdGEpID0+IHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBtaWdyYXRlZCA9IHsgLi4uZGF0YSB9OwogICAgICAgIG1pZ3JhdGVkLnZlcnNpb24gPSAnMi4yJzsKCiAgICAgICAgLy8gQWRkIG5ldyBmaWVsZHMgd2l0aCBkZWZhdWx0IHZhbHVlcwogICAgICAgIGlmICghbWlncmF0ZWQuc3RhdGUuY29vcmRpbmF0ZU1vZGUpIHsKICAgICAgICAgIG1pZ3JhdGVkLnN0YXRlLmNvb3JkaW5hdGVNb2RlID0gQ09ORklHLkNPT1JESU5BVEVfTU9ERTsKICAgICAgICB9CiAgICAgICAgaWYgKCFtaWdyYXRlZC5zdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uKSB7CiAgICAgICAgICBtaWdyYXRlZC5zdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uID0gQ09ORklHLkNPT1JESU5BVEVfRElSRUNUSU9OOwogICAgICAgIH0KICAgICAgICBpZiAoIW1pZ3JhdGVkLnN0YXRlLmNvb3JkaW5hdGVTbmFrZSkgewogICAgICAgICAgbWlncmF0ZWQuc3RhdGUuY29vcmRpbmF0ZVNuYWtlID0gQ09ORklHLkNPT1JESU5BVEVfU05BS0U7CiAgICAgICAgfQogICAgICAgIGlmICghbWlncmF0ZWQuc3RhdGUuYmxvY2tXaWR0aCkgewogICAgICAgICAgbWlncmF0ZWQuc3RhdGUuYmxvY2tXaWR0aCA9IENPTkZJRy5DT09SRElOQVRFX0JMT0NLX1dJRFRIOwogICAgICAgIH0KICAgICAgICBpZiAoIW1pZ3JhdGVkLnN0YXRlLmJsb2NrSGVpZ2h0KSB7CiAgICAgICAgICBtaWdyYXRlZC5zdGF0ZS5ibG9ja0hlaWdodCA9IENPTkZJRy5DT09SRElOQVRFX0JMT0NLX0hFSUdIVDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBtaWdyYXRlZDsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybignTWlncmF0aW9uIHRvIHYyLjIgZmFpbGVkLCB1c2luZyBvcmlnaW5hbCBkYXRhOicsIGUpOwogICAgICAgIHJldHVybiBkYXRhOwogICAgICB9CiAgICB9LAoKICAgIGJ1aWxkUGFpbnRlZE1hcFBhY2tlZCgpIHsKICAgICAgaWYgKHN0YXRlLnBhaW50ZWRNYXAgJiYgc3RhdGUuaW1hZ2VEYXRhKSB7CiAgICAgICAgY29uc3QgZGF0YSA9IFV0aWxzLnBhY2tQYWludGVkTWFwVG9CYXNlNjQoCiAgICAgICAgICBzdGF0ZS5wYWludGVkTWFwLAogICAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLndpZHRoLAogICAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLmhlaWdodAogICAgICAgICk7CiAgICAgICAgaWYgKGRhdGEpIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHdpZHRoOiBzdGF0ZS5pbWFnZURhdGEud2lkdGgsCiAgICAgICAgICAgIGhlaWdodDogc3RhdGUuaW1hZ2VEYXRhLmhlaWdodCwKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfSwKCiAgICBidWlsZFByb2dyZXNzRGF0YSgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksCiAgICAgICAgdmVyc2lvbjogJzIuMicsCiAgICAgICAgc3RhdGU6IHsKICAgICAgICAgIHRvdGFsUGl4ZWxzOiBzdGF0ZS50b3RhbFBpeGVscywKICAgICAgICAgIHBhaW50ZWRQaXhlbHM6IHN0YXRlLnBhaW50ZWRQaXhlbHMsCiAgICAgICAgICBsYXN0UG9zaXRpb246IHN0YXRlLmxhc3RQb3NpdGlvbiwKICAgICAgICAgIHN0YXJ0UG9zaXRpb246IHN0YXRlLnN0YXJ0UG9zaXRpb24sCiAgICAgICAgICByZWdpb246IHN0YXRlLnJlZ2lvbiwKICAgICAgICAgIGltYWdlTG9hZGVkOiBzdGF0ZS5pbWFnZUxvYWRlZCwKICAgICAgICAgIGNvbG9yc0NoZWNrZWQ6IHN0YXRlLmNvbG9yc0NoZWNrZWQsCiAgICAgICAgICBjb29yZGluYXRlTW9kZTogc3RhdGUuY29vcmRpbmF0ZU1vZGUsCiAgICAgICAgICBjb29yZGluYXRlRGlyZWN0aW9uOiBzdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uLAogICAgICAgICAgY29vcmRpbmF0ZVNuYWtlOiBzdGF0ZS5jb29yZGluYXRlU25ha2UsCiAgICAgICAgICBibG9ja1dpZHRoOiBzdGF0ZS5ibG9ja1dpZHRoLAogICAgICAgICAgYmxvY2tIZWlnaHQ6IHN0YXRlLmJsb2NrSGVpZ2h0LAogICAgICAgICAgYXZhaWxhYmxlQ29sb3JzOiBzdGF0ZS5hdmFpbGFibGVDb2xvcnMsCiAgICAgICAgfSwKICAgICAgICBpbWFnZURhdGE6IHN0YXRlLmltYWdlRGF0YQogICAgICAgICAgPyB7CiAgICAgICAgICAgICAgd2lkdGg6IHN0YXRlLmltYWdlRGF0YS53aWR0aCwKICAgICAgICAgICAgICBoZWlnaHQ6IHN0YXRlLmltYWdlRGF0YS5oZWlnaHQsCiAgICAgICAgICAgICAgcGl4ZWxzOiBBcnJheS5mcm9tKHN0YXRlLmltYWdlRGF0YS5waXhlbHMpLAogICAgICAgICAgICAgIHRvdGFsUGl4ZWxzOiBzdGF0ZS5pbWFnZURhdGEudG90YWxQaXhlbHMsCiAgICAgICAgICAgIH0KICAgICAgICAgIDogbnVsbCwKICAgICAgICBwYWludGVkTWFwUGFja2VkOiBVdGlscy5idWlsZFBhaW50ZWRNYXBQYWNrZWQoKSwKICAgICAgfTsKICAgIH0sCgogICAgbWlncmF0ZVByb2dyZXNzKHNhdmVkKSB7CiAgICAgIGlmICghc2F2ZWQpIHJldHVybiBudWxsOwoKICAgICAgbGV0IGRhdGEgPSBzYXZlZDsKICAgICAgY29uc3QgdmVyID0gZGF0YS52ZXJzaW9uOwoKICAgICAgLy8gSWYgdmVyc2lvbiBpcyBtaXNzaW5nIG9yIOKJpCAxLngg4oaSIGZpcnN0IG1pZ3JhdGUgdG8gdjIKICAgICAgaWYgKCF2ZXIgfHwgdmVyID09PSAnMScgfHwgdmVyID09PSAnMS4wJyB8fCB2ZXIgPT09ICcxLjEnKSB7CiAgICAgICAgZGF0YSA9IFV0aWxzLm1pZ3JhdGVQcm9ncmVzc1RvVjIoZGF0YSk7CiAgICAgIH0KCiAgICAgIC8vIElmIHN0aWxsIG9sZGVyIHRoYW4gdjIuMSDihpIgbWlncmF0ZSB0byAyLjEKICAgICAgaWYgKGRhdGEudmVyc2lvbiA9PT0gJzInIHx8IGRhdGEudmVyc2lvbiA9PT0gJzIuMCcpIHsKICAgICAgICBkYXRhID0gVXRpbHMubWlncmF0ZVByb2dyZXNzVG9WMjEoZGF0YSk7CiAgICAgIH0KCiAgICAgIC8vIElmIHN0aWxsIG9sZGVyIHRoYW4gdjIuMiDihpIgbWlncmF0ZSB0byAyLjIKICAgICAgaWYgKGRhdGEudmVyc2lvbiA9PT0gJzIuMScpIHsKICAgICAgICBkYXRhID0gVXRpbHMubWlncmF0ZVByb2dyZXNzVG9WMjIoZGF0YSk7CiAgICAgIH0KCiAgICAgIC8vIE5vdyBkYXRhIGlzIGd1YXJhbnRlZWQgdG8gYmUgdGhlIGxhdGVzdCB2ZXJzaW9uCiAgICAgIHJldHVybiBkYXRhOwogICAgfSwKCiAgICBzYXZlUHJvZ3Jlc3M6ICgpID0+IHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBwcm9ncmVzc0RhdGEgPSBVdGlscy5idWlsZFByb2dyZXNzRGF0YShzdGF0ZSk7CgogICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3cGxhY2UtYm90LXByb2dyZXNzJywgSlNPTi5zdHJpbmdpZnkocHJvZ3Jlc3NEYXRhKSk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIHByb2dyZXNzOicsIGVycm9yKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgbG9hZFByb2dyZXNzOiAoKSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3Qgc2F2ZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd3BsYWNlLWJvdC1wcm9ncmVzcycpOwogICAgICAgIGlmICghc2F2ZWQpIHJldHVybiBudWxsOwogICAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShzYXZlZCk7CiAgICAgICAgY29uc3QgbWlncmF0ZWQgPSBVdGlscy5taWdyYXRlUHJvZ3Jlc3MoZGF0YSk7CgogICAgICAgIGlmIChtaWdyYXRlZCAmJiBtaWdyYXRlZCAhPT0gZGF0YSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3dwbGFjZS1ib3QtcHJvZ3Jlc3MnLCBKU09OLnN0cmluZ2lmeShtaWdyYXRlZCkpOwogICAgICAgICAgfSBjYXRjaCB7fQogICAgICAgIH0KICAgICAgICByZXR1cm4gbWlncmF0ZWQ7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBwcm9ncmVzczonLCBlcnJvcik7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCgogICAgY2xlYXJQcm9ncmVzczogKCkgPT4gewogICAgICB0cnkgewogICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd3cGxhY2UtYm90LXByb2dyZXNzJyk7CiAgICAgICAgLy8gQWxzbyBjbGVhciBwYWludGVkIG1hcCBmcm9tIG1lbW9yeQogICAgICAgIHN0YXRlLnBhaW50ZWRNYXAgPSBudWxsOwogICAgICAgIHN0YXRlLl9sYXN0U2F2ZVBpeGVsQ291bnQgPSAwOwogICAgICAgIHN0YXRlLl9sYXN0U2F2ZVRpbWUgPSAwOwogICAgICAgIC8vIFJlc2V0IGNvb3JkaW5hdGUgZ2VuZXJhdGlvbiBzZXR0aW5ncyB0byB0aGVpciBkZWZhdWx0IHZhbHVlcwogICAgICAgIHN0YXRlLmNvb3JkaW5hdGVNb2RlID0gQ09ORklHLkNPT1JESU5BVEVfTU9ERTsKICAgICAgICBzdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uID0gQ09ORklHLkNPT1JESU5BVEVfRElSRUNUSU9OOwogICAgICAgIHN0YXRlLmNvb3JkaW5hdGVTbmFrZSA9IENPTkZJRy5DT09SRElOQVRFX1NOQUtFOwogICAgICAgIHN0YXRlLmJsb2NrV2lkdGggPSBDT05GSUcuQ09PUkRJTkFURV9CTE9DS19XSURUSDsKICAgICAgICBzdGF0ZS5ibG9ja0hlaWdodCA9IENPTkZJRy5DT09SRElOQVRFX0JMT0NLX0hFSUdIVDsKICAgICAgICBjb25zb2xlLmxvZygn8J+TiyBQcm9ncmVzcyBhbmQgcGFpbnRlZCBtYXAgY2xlYXJlZCcpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNsZWFyaW5nIHByb2dyZXNzOicsIGVycm9yKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgcmVzdG9yZVByb2dyZXNzOiAoc2F2ZWREYXRhKSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZSwgc2F2ZWREYXRhLnN0YXRlKTsKCiAgICAgICAgLy8gUmVzdG9yZSBjb29yZGluYXRlIGdlbmVyYXRpb24gc2V0dGluZ3MKICAgICAgICBpZiAoc2F2ZWREYXRhLnN0YXRlLmNvb3JkaW5hdGVNb2RlKSB7CiAgICAgICAgICBzdGF0ZS5jb29yZGluYXRlTW9kZSA9IHNhdmVkRGF0YS5zdGF0ZS5jb29yZGluYXRlTW9kZTsKICAgICAgICB9CiAgICAgICAgaWYgKHNhdmVkRGF0YS5zdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uKSB7CiAgICAgICAgICBzdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uID0gc2F2ZWREYXRhLnN0YXRlLmNvb3JkaW5hdGVEaXJlY3Rpb247CiAgICAgICAgfQogICAgICAgIGlmIChzYXZlZERhdGEuc3RhdGUuY29vcmRpbmF0ZVNuYWtlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHN0YXRlLmNvb3JkaW5hdGVTbmFrZSA9IHNhdmVkRGF0YS5zdGF0ZS5jb29yZGluYXRlU25ha2U7CiAgICAgICAgfQogICAgICAgIGlmIChzYXZlZERhdGEuc3RhdGUuYmxvY2tXaWR0aCkgewogICAgICAgICAgc3RhdGUuYmxvY2tXaWR0aCA9IHNhdmVkRGF0YS5zdGF0ZS5ibG9ja1dpZHRoOwogICAgICAgIH0KICAgICAgICBpZiAoc2F2ZWREYXRhLnN0YXRlLmJsb2NrSGVpZ2h0KSB7CiAgICAgICAgICBzdGF0ZS5ibG9ja0hlaWdodCA9IHNhdmVkRGF0YS5zdGF0ZS5ibG9ja0hlaWdodDsKICAgICAgICB9CgogICAgICAgIGlmIChzYXZlZERhdGEuaW1hZ2VEYXRhKSB7CiAgICAgICAgICBzdGF0ZS5pbWFnZURhdGEgPSB7CiAgICAgICAgICAgIC4uLnNhdmVkRGF0YS5pbWFnZURhdGEsCiAgICAgICAgICAgIHBpeGVsczogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHNhdmVkRGF0YS5pbWFnZURhdGEucGl4ZWxzKSwKICAgICAgICAgIH07CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHN0YXRlLmltYWdlRGF0YS53aWR0aDsKICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHN0YXRlLmltYWdlRGF0YS5oZWlnaHQ7CiAgICAgICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBuZXcgSW1hZ2VEYXRhKAogICAgICAgICAgICAgIHN0YXRlLmltYWdlRGF0YS5waXhlbHMsCiAgICAgICAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLndpZHRoLAogICAgICAgICAgICAgIHN0YXRlLmltYWdlRGF0YS5oZWlnaHQKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApOwogICAgICAgICAgICBjb25zdCBwcm9jID0gbmV3IEltYWdlUHJvY2Vzc29yKCcnKTsKICAgICAgICAgICAgcHJvYy5pbWcgPSBjYW52YXM7CiAgICAgICAgICAgIHByb2MuY2FudmFzID0gY2FudmFzOwogICAgICAgICAgICBwcm9jLmN0eCA9IGN0eDsKICAgICAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLnByb2Nlc3NvciA9IHByb2M7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHJlYnVpbGQgcHJvY2Vzc29yIGZyb20gc2F2ZWQgaW1hZ2UgZGF0YTonLCBlKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIFByZWZlciBwYWNrZWQgZm9ybSBpZiBhdmFpbGFibGU7IGZhbGxiYWNrIHRvIGxlZ2FjeSBwYWludGVkTWFwIGFycmF5IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CiAgICAgICAgaWYgKHNhdmVkRGF0YS5wYWludGVkTWFwUGFja2VkICYmIHNhdmVkRGF0YS5wYWludGVkTWFwUGFja2VkLmRhdGEpIHsKICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgZGF0YSB9ID0gc2F2ZWREYXRhLnBhaW50ZWRNYXBQYWNrZWQ7CiAgICAgICAgICBzdGF0ZS5wYWludGVkTWFwID0gVXRpbHMudW5wYWNrUGFpbnRlZE1hcEZyb21CYXNlNjQoZGF0YSwgd2lkdGgsIGhlaWdodCk7CiAgICAgICAgfSBlbHNlIGlmIChzYXZlZERhdGEucGFpbnRlZE1hcCkgewogICAgICAgICAgc3RhdGUucGFpbnRlZE1hcCA9IHNhdmVkRGF0YS5wYWludGVkTWFwLm1hcCgocm93KSA9PiBBcnJheS5mcm9tKHJvdykpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzdG9yaW5nIHByb2dyZXNzOicsIGVycm9yKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgc2F2ZVByb2dyZXNzVG9GaWxlOiAoKSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcHJvZ3Jlc3NEYXRhID0gVXRpbHMuYnVpbGRQcm9ncmVzc0RhdGEoKTsKICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGB3cGxhY2UtYm90LXByb2dyZXNzLSR7bmV3IERhdGUoKQogICAgICAgICAgLnRvSVNPU3RyaW5nKCkKICAgICAgICAgIC5zbGljZSgwLCAxOSkKICAgICAgICAgIC5yZXBsYWNlKC86L2csICctJyl9Lmpzb25gOwogICAgICAgIFV0aWxzLmNyZWF0ZUZpbGVEb3dubG9hZGVyKEpTT04uc3RyaW5naWZ5KHByb2dyZXNzRGF0YSwgbnVsbCwgMiksIGZpbGVuYW1lKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgdG8gZmlsZTonLCBlcnJvcik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9LAoKICAgIGxvYWRQcm9ncmVzc0Zyb21GaWxlOiBhc3luYyAoKSA9PiB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IFV0aWxzLmNyZWF0ZUZpbGVVcGxvYWRlcigpOwogICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5zdGF0ZSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGZpbGUgZm9ybWF0Jyk7CiAgICAgICAgfQogICAgICAgIGNvbnN0IG1pZ3JhdGVkID0gVXRpbHMubWlncmF0ZVByb2dyZXNzKGRhdGEpOwoKICAgICAgICBjb25zdCBzdWNjZXNzID0gVXRpbHMucmVzdG9yZVByb2dyZXNzKG1pZ3JhdGVkKTsKICAgICAgICByZXR1cm4gc3VjY2VzczsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIGZyb20gZmlsZTonLCBlcnJvcik7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0KICAgIH0sCgogICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJlc3RvcmUgb3ZlcmxheSBmcm9tIGxvYWRlZCBkYXRhCiAgICByZXN0b3JlT3ZlcmxheUZyb21EYXRhOiBhc3luYyAoKSA9PiB7CiAgICAgIGlmICghc3RhdGUuaW1hZ2VMb2FkZWQgfHwgIXN0YXRlLmltYWdlRGF0YSB8fCAhc3RhdGUuc3RhcnRQb3NpdGlvbiB8fCAhc3RhdGUucmVnaW9uKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB0cnkgewogICAgICAgIC8vIFJlY3JlYXRlIEltYWdlQml0bWFwIGZyb20gbG9hZGVkIHBpeGVsIGRhdGEKICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBuZXcgSW1hZ2VEYXRhKAogICAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLnBpeGVscywKICAgICAgICAgIHN0YXRlLmltYWdlRGF0YS53aWR0aCwKICAgICAgICAgIHN0YXRlLmltYWdlRGF0YS5oZWlnaHQKICAgICAgICApOwoKICAgICAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKHN0YXRlLmltYWdlRGF0YS53aWR0aCwgc3RhdGUuaW1hZ2VEYXRhLmhlaWdodCk7CiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7CiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApOwogICAgICAgIGNvbnN0IGltYWdlQml0bWFwID0gYXdhaXQgY2FudmFzLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCgpOwoKICAgICAgICAvLyBTZXQgdXAgb3ZlcmxheSB3aXRoIHJlc3RvcmVkIGRhdGEKICAgICAgICBhd2FpdCBvdmVybGF5TWFuYWdlci5zZXRJbWFnZShpbWFnZUJpdG1hcCk7CiAgICAgICAgYXdhaXQgb3ZlcmxheU1hbmFnZXIuc2V0UG9zaXRpb24oc3RhdGUuc3RhcnRQb3NpdGlvbiwgc3RhdGUucmVnaW9uKTsKICAgICAgICBvdmVybGF5TWFuYWdlci5lbmFibGUoKTsKCiAgICAgICAgLy8gVXBkYXRlIG92ZXJsYXkgYnV0dG9uIHN0YXRlCiAgICAgICAgY29uc3QgdG9nZ2xlT3ZlcmxheUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGVPdmVybGF5QnRuJyk7CiAgICAgICAgaWYgKHRvZ2dsZU92ZXJsYXlCdG4pIHsKICAgICAgICAgIHRvZ2dsZU92ZXJsYXlCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIHRvZ2dsZU92ZXJsYXlCdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7CiAgICAgICAgfQoKICAgICAgICBjb25zb2xlLmxvZygnT3ZlcmxheSByZXN0b3JlZCBmcm9tIGRhdGEnKTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcmVzdG9yZSBvdmVybGF5IGZyb20gZGF0YTonLCBlcnJvcik7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9LAoKICAgIHVwZGF0ZUNvb3JkaW5hdGVVSSh7IG1vZGUsIGRpcmVjdGlvbkNvbnRyb2xzLCBzbmFrZUNvbnRyb2xzLCBibG9ja0NvbnRyb2xzIH0pIHsKICAgICAgY29uc3QgaXNMaW5lYXIgPSBtb2RlID09PSAncm93cycgfHwgbW9kZSA9PT0gJ2NvbHVtbnMnOwogICAgICBjb25zdCBpc0Jsb2NrID0gbW9kZSA9PT0gJ2Jsb2NrcycgfHwgbW9kZSA9PT0gJ3NodWZmbGUtYmxvY2tzJzsKCiAgICAgIGlmIChkaXJlY3Rpb25Db250cm9scykgZGlyZWN0aW9uQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IGlzTGluZWFyID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgICAgaWYgKHNuYWtlQ29udHJvbHMpIHNuYWtlQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IGlzTGluZWFyID8gJ2Jsb2NrJyA6ICdub25lJzsKICAgICAgaWYgKGJsb2NrQ29udHJvbHMpIGJsb2NrQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9IGlzQmxvY2sgPyAnYmxvY2snIDogJ25vbmUnOwogICAgfSwKICB9OwoKICAvLyBJTUFHRSBQUk9DRVNTT1IgQ0xBU1MKICBjbGFzcyBJbWFnZVByb2Nlc3NvciB7CiAgICBjb25zdHJ1Y3RvcihpbWFnZVNyYykgewogICAgICB0aGlzLmltYWdlU3JjID0gaW1hZ2VTcmM7CiAgICAgIHRoaXMuaW1nID0gbnVsbDsKICAgICAgdGhpcy5jYW52YXMgPSBudWxsOwogICAgICB0aGlzLmN0eCA9IG51bGw7CiAgICB9CgogICAgYXN5bmMgbG9hZCgpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpOwogICAgICAgIHRoaXMuaW1nLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7CiAgICAgICAgdGhpcy5pbWcub25sb2FkID0gKCkgPT4gewogICAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5pbWcud2lkdGg7CiAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmltZy5oZWlnaHQ7CiAgICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIDAsIDApOwogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH07CiAgICAgICAgdGhpcy5pbWcub25lcnJvciA9IHJlamVjdDsKICAgICAgICB0aGlzLmltZy5zcmMgPSB0aGlzLmltYWdlU3JjOwogICAgICB9KTsKICAgIH0KCiAgICBnZXREaW1lbnNpb25zKCkgewogICAgICByZXR1cm4gewogICAgICAgIHdpZHRoOiB0aGlzLmNhbnZhcy53aWR0aCwKICAgICAgICBoZWlnaHQ6IHRoaXMuY2FudmFzLmhlaWdodCwKICAgICAgfTsKICAgIH0KCiAgICBnZXRQaXhlbERhdGEoKSB7CiAgICAgIHJldHVybiB0aGlzLmN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCkuZGF0YTsKICAgIH0KCiAgICByZXNpemUobmV3V2lkdGgsIG5ld0hlaWdodCkgewogICAgICBjb25zdCB0ZW1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgICAgIGNvbnN0IHRlbXBDdHggPSB0ZW1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7CgogICAgICB0ZW1wQ2FudmFzLndpZHRoID0gbmV3V2lkdGg7CiAgICAgIHRlbXBDYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0OwoKICAgICAgdGVtcEN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgdGVtcEN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXMsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpOwoKICAgICAgdGhpcy5jYW52YXMud2lkdGggPSBuZXdXaWR0aDsKICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0OwogICAgICB0aGlzLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHRlbXBDYW52YXMsIDAsIDApOwoKICAgICAgcmV0dXJuIHRoaXMuY3R4LmdldEltYWdlRGF0YSgwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KS5kYXRhOwogICAgfQoKICAgIGdlbmVyYXRlUHJldmlldyh3aWR0aCwgaGVpZ2h0KSB7CiAgICAgIGNvbnN0IHByZXZpZXdDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgY29uc3QgcHJldmlld0N0eCA9IHByZXZpZXdDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKCiAgICAgIHByZXZpZXdDYW52YXMud2lkdGggPSB3aWR0aDsKICAgICAgcHJldmlld0NhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CgogICAgICBwcmV2aWV3Q3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlOwogICAgICBwcmV2aWV3Q3R4LmRyYXdJbWFnZSh0aGlzLmltZywgMCwgMCwgd2lkdGgsIGhlaWdodCk7CgogICAgICByZXR1cm4gcHJldmlld0NhbnZhcy50b0RhdGFVUkwoKTsKICAgIH0KICB9CgogIC8vIFdQTEFDRSBBUEkgU0VSVklDRQogIGNvbnN0IFdQbGFjZVNlcnZpY2UgPSB7CiAgICBhc3luYyBwYWludFBpeGVsSW5SZWdpb24ocmVnaW9uWCwgcmVnaW9uWSwgcGl4ZWxYLCBwaXhlbFksIGNvbG9yKSB7CiAgICAgIHRyeSB7CiAgICAgICAgYXdhaXQgZW5zdXJlVG9rZW4oKTsKICAgICAgICBpZiAoIXR1cm5zdGlsZVRva2VuKSByZXR1cm4gJ3Rva2VuX2Vycm9yJzsKICAgICAgICBjb25zdCBwYXlsb2FkID0gewogICAgICAgICAgY29vcmRzOiBbcGl4ZWxYLCBwaXhlbFldLAogICAgICAgICAgY29sb3JzOiBbY29sb3JdLAogICAgICAgICAgdDogdHVybnN0aWxlVG9rZW4sCiAgICAgICAgfTsKICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9iYWNrZW5kLndwbGFjZS5saXZlL3MwL3BpeGVsLyR7cmVnaW9uWH0vJHtyZWdpb25ZfWAsIHsKICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcgfSwKICAgICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsCiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSwKICAgICAgICB9KTsKICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDAzKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgNDAzIEZvcmJpZGRlbi4gVHVybnN0aWxlIHRva2VuIG1pZ2h0IGJlIGludmFsaWQgb3IgZXhwaXJlZC4nKTsKICAgICAgICAgIHR1cm5zdGlsZVRva2VuID0gbnVsbDsKICAgICAgICAgIHRva2VuUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgIF9yZXNvbHZlVG9rZW4gPSByZXNvbHZlOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gJ3Rva2VuX2Vycm9yJzsKICAgICAgICB9CiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7CiAgICAgICAgcmV0dXJuIGRhdGE/LnBhaW50ZWQgPT09IDE7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdQYWludCByZXF1ZXN0IGZhaWxlZDonLCBlKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCgogICAgYXN5bmMgZ2V0Q2hhcmdlcygpIHsKICAgICAgY29uc3QgZGVmYXVsdFJlc3VsdCA9IHsKICAgICAgICBjaGFyZ2VzOiAwLAogICAgICAgIG1heDogMSwKICAgICAgICBjb29sZG93bjogQ09ORklHLkNPT0xET1dOX0RFRkFVTFQsCiAgICAgIH07CgogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmUvbWUnLCB7CiAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnLAogICAgICAgIH0pOwoKICAgICAgICBpZiAoIXJlcy5vaykgewogICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGdldCBjaGFyZ2VzOiBIVFRQICR7cmVzLnN0YXR1c31gKTsKICAgICAgICAgIHJldHVybiBkZWZhdWx0UmVzdWx0OwogICAgICAgIH0KCiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICBjaGFyZ2VzOiBkYXRhLmNoYXJnZXM/LmNvdW50ID8/IDAsCiAgICAgICAgICBtYXg6IGRhdGEuY2hhcmdlcz8ubWF4ID8/IDEsCiAgICAgICAgICBjb29sZG93bjogZGF0YS5jaGFyZ2VzPy5jb29sZG93bk1zID8/IENPTkZJRy5DT09MRE9XTl9ERUZBVUxULAogICAgICAgIH07CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZ2V0IGNoYXJnZXM6JywgZSk7CiAgICAgICAgcmV0dXJuIGRlZmF1bHRSZXN1bHQ7CiAgICAgIH0KICAgIH0sCiAgfTsKCiAgLy8gRGVza3RvcCBOb3RpZmljYXRpb24gTWFuYWdlcgogIGNvbnN0IE5vdGlmaWNhdGlvbk1hbmFnZXIgPSB7CiAgICBwb2xsVGltZXI6IG51bGwsCiAgICBwb2xsSW50ZXJ2YWxNczogNjBfMDAwLAogICAgaWNvbigpIHsKICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImxpbmtbcmVsfj0naWNvbiddIik7CiAgICAgIHJldHVybiBsaW5rPy5ocmVmIHx8IGxvY2F0aW9uLm9yaWdpbiArICcvZmF2aWNvbi5pY28nOwogICAgfSwKICAgIGFzeW5jIHJlcXVlc3RQZXJtaXNzaW9uKCkgewogICAgICBpZiAoISgnTm90aWZpY2F0aW9uJyBpbiB3aW5kb3cpKSB7CiAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ25vdGlmaWNhdGlvbnNOb3RTdXBwb3J0ZWQnKSwgJ3dhcm5pbmcnKTsKICAgICAgICByZXR1cm4gJ2RlbmllZCc7CiAgICAgIH0KICAgICAgaWYgKE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcpIHJldHVybiAnZ3JhbnRlZCc7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcGVybSA9IGF3YWl0IE5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpOwogICAgICAgIHJldHVybiBwZXJtOwogICAgICB9IGNhdGNoIHsKICAgICAgICByZXR1cm4gTm90aWZpY2F0aW9uLnBlcm1pc3Npb247CiAgICAgIH0KICAgIH0sCiAgICBjYW5Ob3RpZnkoKSB7CiAgICAgIHJldHVybiAoCiAgICAgICAgc3RhdGUubm90aWZpY2F0aW9uc0VuYWJsZWQgJiYKICAgICAgICB0eXBlb2YgTm90aWZpY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJgogICAgICAgIE5vdGlmaWNhdGlvbi5wZXJtaXNzaW9uID09PSAnZ3JhbnRlZCcKICAgICAgKTsKICAgIH0sCiAgICBub3RpZnkodGl0bGUsIGJvZHksIHRhZyA9ICd3cGxhY2UtY2hhcmdlcycsIGZvcmNlID0gZmFsc2UpIHsKICAgICAgaWYgKCF0aGlzLmNhbk5vdGlmeSgpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghZm9yY2UgJiYgc3RhdGUubm90aWZ5T25seVdoZW5VbmZvY3VzZWQgJiYgZG9jdW1lbnQuaGFzRm9jdXMoKSkgcmV0dXJuIGZhbHNlOwogICAgICB0cnkgewogICAgICAgIG5ldyBOb3RpZmljYXRpb24odGl0bGUsIHsKICAgICAgICAgIGJvZHksCiAgICAgICAgICB0YWcsCiAgICAgICAgICByZW5vdGlmeTogdHJ1ZSwKICAgICAgICAgIGljb246IHRoaXMuaWNvbigpLAogICAgICAgICAgYmFkZ2U6IHRoaXMuaWNvbigpLAogICAgICAgICAgc2lsZW50OiBmYWxzZSwKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBjYXRjaCB7CiAgICAgICAgLy8gR3JhY2VmdWwgZmFsbGJhY2sKICAgICAgICBVdGlscy5zaG93QWxlcnQoYm9keSwgJ2luZm8nKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0sCiAgICByZXNldEVkZ2VUcmFja2luZygpIHsKICAgICAgc3RhdGUuX2xhc3RDaGFyZ2VzQmVsb3cgPSBzdGF0ZS5kaXNwbGF5Q2hhcmdlcyA8IHN0YXRlLmNvb2xkb3duQ2hhcmdlVGhyZXNob2xkOwogICAgICBzdGF0ZS5fbGFzdENoYXJnZXNOb3RpZnlBdCA9IDA7CiAgICB9LAogICAgbWF5YmVOb3RpZnlDaGFyZ2VzUmVhY2hlZChmb3JjZSA9IGZhbHNlKSB7CiAgICAgIGlmICghc3RhdGUubm90aWZpY2F0aW9uc0VuYWJsZWQgfHwgIXN0YXRlLm5vdGlmeU9uQ2hhcmdlc1JlYWNoZWQpIHJldHVybjsKICAgICAgY29uc3QgcmVhY2hlZCA9IHN0YXRlLmRpc3BsYXlDaGFyZ2VzID49IHN0YXRlLmNvb2xkb3duQ2hhcmdlVGhyZXNob2xkOwogICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpOwogICAgICBjb25zdCByZXBlYXRNcyA9IE1hdGgubWF4KDEsIE51bWJlcihzdGF0ZS5ub3RpZmljYXRpb25JbnRlcnZhbE1pbnV0ZXMgfHwgNSkpICogNjBfMDAwOwogICAgICBpZiAocmVhY2hlZCkgewogICAgICAgIGNvbnN0IHNob3VsZEVkZ2UgPSBzdGF0ZS5fbGFzdENoYXJnZXNCZWxvdyB8fCBmb3JjZTsKICAgICAgICBjb25zdCBzaG91bGRSZXBlYXQgPSBub3cgLSAoc3RhdGUuX2xhc3RDaGFyZ2VzTm90aWZ5QXQgfHwgMCkgPj0gcmVwZWF0TXM7CiAgICAgICAgaWYgKHNob3VsZEVkZ2UgfHwgc2hvdWxkUmVwZWF0KSB7CiAgICAgICAgICBjb25zdCBtc2cgPSBVdGlscy50KCdjaGFyZ2VzUmVhZHlNZXNzYWdlJywgewogICAgICAgICAgICBjdXJyZW50OiBzdGF0ZS5kaXNwbGF5Q2hhcmdlcywKICAgICAgICAgICAgbWF4OiBzdGF0ZS5tYXhDaGFyZ2VzLAogICAgICAgICAgICB0aHJlc2hvbGQ6IHN0YXRlLmNvb2xkb3duQ2hhcmdlVGhyZXNob2xkLAogICAgICAgICAgfSk7CiAgICAgICAgICB0aGlzLm5vdGlmeShVdGlscy50KCdjaGFyZ2VzUmVhZHlOb3RpZmljYXRpb24nKSwgbXNnLCAnd3BsYWNlLW5vdGlmeS1jaGFyZ2VzJyk7CiAgICAgICAgICBzdGF0ZS5fbGFzdENoYXJnZXNOb3RpZnlBdCA9IG5vdzsKICAgICAgICB9CiAgICAgICAgc3RhdGUuX2xhc3RDaGFyZ2VzQmVsb3cgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdGF0ZS5fbGFzdENoYXJnZXNCZWxvdyA9IHRydWU7CiAgICAgIH0KICAgIH0sCiAgICBzdGFydFBvbGxpbmcoKSB7CiAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTsKICAgICAgaWYgKCFzdGF0ZS5ub3RpZmljYXRpb25zRW5hYmxlZCB8fCAhc3RhdGUubm90aWZ5T25DaGFyZ2VzUmVhY2hlZCkgcmV0dXJuOwogICAgICAvLyBsaWdodHdlaWdodCBiYWNrZ3JvdW5kIHBvbGxpbmcKICAgICAgdGhpcy5wb2xsVGltZXIgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnN0IHsgY2hhcmdlcywgY29vbGRvd24sIG1heCB9ID0gYXdhaXQgV1BsYWNlU2VydmljZS5nZXRDaGFyZ2VzKCk7CiAgICAgICAgICBzdGF0ZS5kaXNwbGF5Q2hhcmdlcyA9IE1hdGguZmxvb3IoY2hhcmdlcyk7CiAgICAgICAgICBzdGF0ZS5jb29sZG93biA9IGNvb2xkb3duOwogICAgICAgICAgc3RhdGUubWF4Q2hhcmdlcyA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IobWF4KSk7CiAgICAgICAgICB0aGlzLm1heWJlTm90aWZ5Q2hhcmdlc1JlYWNoZWQoKTsKICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgIC8qIGlnbm9yZSAqLwogICAgICAgIH0KICAgICAgfSwgdGhpcy5wb2xsSW50ZXJ2YWxNcyk7CiAgICB9LAogICAgc3RvcFBvbGxpbmcoKSB7CiAgICAgIGlmICh0aGlzLnBvbGxUaW1lcikgewogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wb2xsVGltZXIpOwogICAgICAgIHRoaXMucG9sbFRpbWVyID0gbnVsbDsKICAgICAgfQogICAgfSwKICAgIHN5bmNGcm9tU3RhdGUoKSB7CiAgICAgIHRoaXMucmVzZXRFZGdlVHJhY2tpbmcoKTsKICAgICAgaWYgKHN0YXRlLm5vdGlmaWNhdGlvbnNFbmFibGVkICYmIHN0YXRlLm5vdGlmeU9uQ2hhcmdlc1JlYWNoZWQpIHRoaXMuc3RhcnRQb2xsaW5nKCk7CiAgICAgIGVsc2UgdGhpcy5zdG9wUG9sbGluZygpOwogICAgfSwKICB9OwoKICAvLyBDT0xPUiBNQVRDSElORyBGVU5DVElPTiAtIE9wdGltaXplZCB3aXRoIGNhY2hpbmcKICBjb25zdCBjb2xvckNhY2hlID0gbmV3IE1hcCgpOwoKICAvLyBVSSBVUERBVEUgRlVOQ1RJT05TIChkZWNsYXJlZCBlYXJseSB0byBhdm9pZCByZWZlcmVuY2UgZXJyb3JzKQogIGxldCB1cGRhdGVVSSA9ICgpID0+IHt9OwogIGxldCB1cGRhdGVTdGF0cyA9IChpc01hbnVhbFJlZnJlc2gpID0+IHt9OwogIGxldCB1cGRhdGVEYXRhQnV0dG9ucyA9ICgpID0+IHt9OwoKICBmdW5jdGlvbiB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKSB7CiAgICBzdGF0ZS5hY3RpdmVDb2xvclBhbGV0dGUgPSBbXTsKICAgIGNvbnN0IGFjdGl2ZVN3YXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1jb2xvci1zd2F0Y2guYWN0aXZlJyk7CiAgICBpZiAoYWN0aXZlU3dhdGNoZXMpIHsKICAgICAgYWN0aXZlU3dhdGNoZXMuZm9yRWFjaCgoc3dhdGNoKSA9PiB7CiAgICAgICAgY29uc3QgcmdiU3RyID0gc3dhdGNoLmdldEF0dHJpYnV0ZSgnZGF0YS1yZ2InKTsKICAgICAgICBpZiAocmdiU3RyKSB7CiAgICAgICAgICBjb25zdCByZ2IgPSByZ2JTdHIuc3BsaXQoJywnKS5tYXAoTnVtYmVyKTsKICAgICAgICAgIHN0YXRlLmFjdGl2ZUNvbG9yUGFsZXR0ZS5wdXNoKHJnYik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzaXplLWNvbnRhaW5lcicpPy5zdHlsZS5kaXNwbGF5ID09PSAnYmxvY2snKSB7CiAgICAgIF91cGRhdGVSZXNpemVQcmV2aWV3KCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiB0b2dnbGVBbGxDb2xvcnMoc2VsZWN0LCBzaG93aW5nVW5hdmFpbGFibGUgPSBmYWxzZSkgewogICAgY29uc3Qgc3dhdGNoZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcud3BsYWNlLWNvbG9yLXN3YXRjaCcpOwogICAgaWYgKHN3YXRjaGVzKSB7CiAgICAgIHN3YXRjaGVzLmZvckVhY2goKHN3YXRjaCkgPT4gewogICAgICAgIC8vIE9ubHkgdG9nZ2xlIGNvbG9ycyB0aGF0IGFyZSBhdmFpbGFibGUgb3IgaWYgd2UncmUgc2hvd2luZyB1bmF2YWlsYWJsZSBjb2xvcnMKICAgICAgICBjb25zdCBpc1VuYXZhaWxhYmxlID0gc3dhdGNoLmNsYXNzTGlzdC5jb250YWlucygndW5hdmFpbGFibGUnKTsKICAgICAgICBpZiAoIWlzVW5hdmFpbGFibGUgfHwgc2hvd2luZ1VuYXZhaWxhYmxlKSB7CiAgICAgICAgICAvLyBEb24ndCB0cnkgdG8gc2VsZWN0IHVuYXZhaWxhYmxlIGNvbG9ycwogICAgICAgICAgaWYgKCFpc1VuYXZhaWxhYmxlKSB7CiAgICAgICAgICAgIHN3YXRjaC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBzZWxlY3QpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKTsKICB9CgogIGZ1bmN0aW9uIHVuc2VsZWN0QWxsUGFpZENvbG9ycygpIHsKICAgIGNvbnN0IHN3YXRjaGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1jb2xvci1zd2F0Y2gnKTsKICAgIGlmIChzd2F0Y2hlcykgewogICAgICBzd2F0Y2hlcy5mb3JFYWNoKChzd2F0Y2gpID0+IHsKICAgICAgICBjb25zdCBjb2xvcklkID0gcGFyc2VJbnQoc3dhdGNoLmdldEF0dHJpYnV0ZSgnZGF0YS1jb2xvci1pZCcpLCAxMCk7CiAgICAgICAgaWYgKCFpc05hTihjb2xvcklkKSAmJiBjb2xvcklkID49IDMyKSB7CiAgICAgICAgICBzd2F0Y2guY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJywgZmFsc2UpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKTsKICB9CgogIGZ1bmN0aW9uIGluaXRpYWxpemVDb2xvclBhbGV0dGUoY29udGFpbmVyKSB7CiAgICBjb25zdCBjb2xvcnNDb250YWluZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI2NvbG9ycy1jb250YWluZXInKTsKICAgIGNvbnN0IHNob3dBbGxUb2dnbGUgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3Nob3dBbGxDb2xvcnNUb2dnbGUnKTsKICAgIGlmICghY29sb3JzQ29udGFpbmVyKSByZXR1cm47CgogICAgLy8gVXNlIGFscmVhZHkgY2FwdHVyZWQgY29sb3JzIGZyb20gc3RhdGUgKGNhcHR1cmVkIGR1cmluZyB1cGxvYWQpCiAgICAvLyBEb24ndCByZS1mZXRjaCBjb2xvcnMgaGVyZSwgdXNlIHdoYXQgd2FzIGNhcHR1cmVkIHdoZW4gdXNlciBjbGlja2VkIHVwbG9hZAogICAgaWYgKCFzdGF0ZS5hdmFpbGFibGVDb2xvcnMgfHwgc3RhdGUuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCA9PT0gMCkgewogICAgICAvLyBJZiBubyBjb2xvcnMgaGF2ZSBiZWVuIGNhcHR1cmVkIHlldCwgc2hvdyBtZXNzYWdlCiAgICAgIGNvbG9yc0NvbnRhaW5lci5pbm5lckhUTUwgPSBgPGRpdiBjbGFzcz0id3BsYWNlLWNvbG9ycy1wbGFjZWhvbGRlciI+JHtVdGlscy50KAogICAgICAgICd1cGxvYWRJbWFnZUZpcnN0JwogICAgICApfTwvZGl2PmA7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBmdW5jdGlvbiBwb3B1bGF0ZUNvbG9ycyhzaG93VW5hdmFpbGFibGUgPSBmYWxzZSkgewogICAgICBjb2xvcnNDb250YWluZXIuaW5uZXJIVE1MID0gJyc7CiAgICAgIGxldCBhdmFpbGFibGVDb3VudCA9IDA7CiAgICAgIGxldCB0b3RhbENvdW50ID0gMDsKCiAgICAgIC8vIENvbnZlcnQgQ09MT1JfTUFQIHRvIGFycmF5IGFuZCBmaWx0ZXIgb3V0IHRyYW5zcGFyZW50CiAgICAgIGNvbnN0IGFsbENvbG9ycyA9IE9iamVjdC52YWx1ZXMoQ09ORklHLkNPTE9SX01BUCkuZmlsdGVyKChjb2xvcikgPT4gY29sb3IucmdiICE9PSBudWxsKTsKCiAgICAgIGFsbENvbG9ycy5mb3JFYWNoKChjb2xvckRhdGEpID0+IHsKICAgICAgICBjb25zdCB7IGlkLCBuYW1lLCByZ2IgfSA9IGNvbG9yRGF0YTsKICAgICAgICBjb25zdCByZ2JLZXkgPSBgJHtyZ2Iucn0sJHtyZ2IuZ30sJHtyZ2IuYn1gOwogICAgICAgIHRvdGFsQ291bnQrKzsKCiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBjb2xvciBpcyBhdmFpbGFibGUgaW4gdGhlIGNhcHR1cmVkIGNvbG9ycwogICAgICAgIGNvbnN0IGlzQXZhaWxhYmxlID0gc3RhdGUuYXZhaWxhYmxlQ29sb3JzLnNvbWUoCiAgICAgICAgICAoYykgPT4gYy5yZ2JbMF0gPT09IHJnYi5yICYmIGMucmdiWzFdID09PSByZ2IuZyAmJiBjLnJnYlsyXSA9PT0gcmdiLmIKICAgICAgICApOwoKICAgICAgICAvLyBJZiBub3Qgc2hvd2luZyBhbGwgY29sb3JzIGFuZCB0aGlzIGNvbG9yIGlzIG5vdCBhdmFpbGFibGUsIHNraXAgaXQKICAgICAgICBpZiAoIXNob3dVbmF2YWlsYWJsZSAmJiAhaXNBdmFpbGFibGUpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChpc0F2YWlsYWJsZSkgYXZhaWxhYmxlQ291bnQrKzsKCiAgICAgICAgY29uc3QgY29sb3JJdGVtID0gVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgICAgY2xhc3NOYW1lOiAnd3BsYWNlLWNvbG9yLWl0ZW0nLAogICAgICAgIH0pOwogICAgICAgIGNvbnN0IHN3YXRjaCA9IFV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHsKICAgICAgICAgIGNsYXNzTmFtZTogYHdwbGFjZS1jb2xvci1zd2F0Y2ggJHshaXNBdmFpbGFibGUgPyAndW5hdmFpbGFibGUnIDogJyd9YCwKICAgICAgICAgIHRpdGxlOiBgJHtuYW1lfSAoSUQ6ICR7aWR9KSR7IWlzQXZhaWxhYmxlID8gJyAoVW5hdmFpbGFibGUpJyA6ICcnfWAsCiAgICAgICAgICAnZGF0YS1yZ2InOiByZ2JLZXksCiAgICAgICAgICAnZGF0YS1jb2xvci1pZCc6IGlkLAogICAgICAgIH0pOwogICAgICAgIHN3YXRjaC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBgcmdiKCR7cmdiLnJ9LCAke3JnYi5nfSwgJHtyZ2IuYn0pYDsKCiAgICAgICAgLy8gTWFrZSB1bmF2YWlsYWJsZSBjb2xvcnMgdmlzdWFsbHkgZGlzdGluY3QKICAgICAgICBpZiAoIWlzQXZhaWxhYmxlKSB7CiAgICAgICAgICBzd2F0Y2guc3R5bGUub3BhY2l0eSA9ICcwLjQnOwogICAgICAgICAgc3dhdGNoLnN0eWxlLmZpbHRlciA9ICdncmF5c2NhbGUoNTAlKSc7CiAgICAgICAgICBzd2F0Y2guZGlzYWJsZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvLyBTZWxlY3QgYXZhaWxhYmxlIGNvbG9ycyBieSBkZWZhdWx0CiAgICAgICAgICBzd2F0Y2guY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBuYW1lTGFiZWwgPSBVdGlscy5jcmVhdGVFbGVtZW50KAogICAgICAgICAgJ3NwYW4nLAogICAgICAgICAgewogICAgICAgICAgICBjbGFzc05hbWU6ICd3cGxhY2UtY29sb3ItaXRlbS1uYW1lJywKICAgICAgICAgICAgc3R5bGU6ICFpc0F2YWlsYWJsZSA/ICdjb2xvcjogIzg4ODsgZm9udC1zdHlsZTogaXRhbGljOycgOiAnJywKICAgICAgICAgIH0sCiAgICAgICAgICBuYW1lICsgKCFpc0F2YWlsYWJsZSA/ICcgKE4vQSknIDogJycpCiAgICAgICAgKTsKCiAgICAgICAgLy8gT25seSBhZGQgY2xpY2sgbGlzdGVuZXIgZm9yIGF2YWlsYWJsZSBjb2xvcnMKICAgICAgICBpZiAoaXNBdmFpbGFibGUpIHsKICAgICAgICAgIHN3YXRjaC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICAgICAgc3dhdGNoLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScpOwogICAgICAgICAgICB1cGRhdGVBY3RpdmVDb2xvclBhbGV0dGUoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgY29sb3JJdGVtLmFwcGVuZENoaWxkKHN3YXRjaCk7CiAgICAgICAgY29sb3JJdGVtLmFwcGVuZENoaWxkKG5hbWVMYWJlbCk7CiAgICAgICAgY29sb3JzQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbG9ySXRlbSk7CiAgICAgIH0pOwoKICAgICAgdXBkYXRlQWN0aXZlQ29sb3JQYWxldHRlKCk7CiAgICB9CgogICAgLy8gSW5pdGlhbGl6ZSB3aXRoIG9ubHkgYXZhaWxhYmxlIGNvbG9ycwogICAgcG9wdWxhdGVDb2xvcnMoZmFsc2UpOwoKICAgIC8vIEFkZCB0b2dnbGUgZnVuY3Rpb25hbGl0eQogICAgaWYgKHNob3dBbGxUb2dnbGUpIHsKICAgICAgc2hvd0FsbFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgIHBvcHVsYXRlQ29sb3JzKGUudGFyZ2V0LmNoZWNrZWQpOwogICAgICB9KTsKICAgIH0KCiAgICBjb250YWluZXIKICAgICAgLnF1ZXJ5U2VsZWN0b3IoJyNzZWxlY3RBbGxCdG4nKQogICAgICA/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdG9nZ2xlQWxsQ29sb3JzKHRydWUsIHNob3dBbGxUb2dnbGU/LmNoZWNrZWQpKTsKICAgIGNvbnRhaW5lcgogICAgICAucXVlcnlTZWxlY3RvcignI3Vuc2VsZWN0QWxsQnRuJykKICAgICAgPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRvZ2dsZUFsbENvbG9ycyhmYWxzZSwgc2hvd0FsbFRvZ2dsZT8uY2hlY2tlZCkpOwogICAgY29udGFpbmVyCiAgICAgIC5xdWVyeVNlbGVjdG9yKCcjdW5zZWxlY3RQYWlkQnRuJykKICAgICAgPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHVuc2VsZWN0QWxsUGFpZENvbG9ycygpKTsKICB9CgogIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNhcHRjaGEoKSB7CiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTsKCiAgICAvLyBDaGVjayB1c2VyJ3MgdG9rZW4gc291cmNlIHByZWZlcmVuY2UKICAgIGlmIChzdGF0ZS50b2tlblNvdXJjZSA9PT0gJ21hbnVhbCcpIHsKICAgICAgY29uc29sZS5sb2coJ/Cfjq8gTWFudWFsIHRva2VuIHNvdXJjZSBzZWxlY3RlZCAtIHVzaW5nIHBpeGVsIHBsYWNlbWVudCBhdXRvbWF0aW9uJyk7CiAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVDYXB0Y2hhRmFsbGJhY2soKTsKICAgIH0KCiAgICAvLyBHZW5lcmF0b3IgbW9kZSAocHVyZSkgb3IgSHlicmlkIG1vZGUgLSB0cnkgZ2VuZXJhdG9yIGZpcnN0CiAgICB0cnkgewogICAgICAvLyBVc2Ugb3B0aW1pemVkIHRva2VuIGdlbmVyYXRpb24gd2l0aCBhdXRvbWF0aWMgc2l0ZWtleSBkZXRlY3Rpb24KICAgICAgY29uc3QgeyBzaXRla2V5LCB0b2tlbjogcHJlR2VuZXJhdGVkVG9rZW4gfSA9IGF3YWl0IFV0aWxzLm9idGFpblNpdGVrZXlBbmRUb2tlbigpOwoKICAgICAgaWYgKCFzaXRla2V5KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB2YWxpZCBzaXRla2V5IGZvdW5kJyk7CiAgICAgIH0KCiAgICAgIGNvbnNvbGUubG9nKCfwn5SRIEdlbmVyYXRpbmcgVHVybnN0aWxlIHRva2VuIGZvciBzaXRla2V5OicsIHNpdGVrZXkpOwogICAgICBjb25zb2xlLmxvZygKICAgICAgICAn8J+nrSBVQTonLAogICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuc3Vic3RyaW5nKDAsIDUwKSArICcuLi4nLAogICAgICAgICdQbGF0Zm9ybTonLAogICAgICAgIG5hdmlnYXRvci5wbGF0Zm9ybQogICAgICApOwoKICAgICAgLy8gQWRkIGFkZGl0aW9uYWwgY2hlY2tzIGJlZm9yZSB0b2tlbiBnZW5lcmF0aW9uCiAgICAgIGlmICghd2luZG93LnR1cm5zdGlsZSkgewogICAgICAgIGF3YWl0IFV0aWxzLmxvYWRUdXJuc3RpbGUoKTsKICAgICAgfQoKICAgICAgbGV0IHRva2VuID0gbnVsbDsKCiAgICAgIC8vIOKchSBSZXVzZSBwcmUtZ2VuZXJhdGVkIHRva2VuIGlmIGF2YWlsYWJsZSBhbmQgdmFsaWQKICAgICAgaWYgKAogICAgICAgIHByZUdlbmVyYXRlZFRva2VuICYmCiAgICAgICAgdHlwZW9mIHByZUdlbmVyYXRlZFRva2VuID09PSAnc3RyaW5nJyAmJgogICAgICAgIHByZUdlbmVyYXRlZFRva2VuLmxlbmd0aCA+IDIwCiAgICAgICkgewogICAgICAgIGNvbnNvbGUubG9nKCfimbvvuI8gUmV1c2luZyBwcmUtZ2VuZXJhdGVkIHRva2VuIGZyb20gc2l0ZWtleSBkZXRlY3Rpb24gcGhhc2UnKTsKICAgICAgICB0b2tlbiA9IHByZUdlbmVyYXRlZFRva2VuOwogICAgICB9CiAgICAgIC8vIOKchSBPciB1c2UgZ2xvYmFsbHkgY2FjaGVkIHRva2VuIGlmIHN0aWxsIHZhbGlkCiAgICAgIGVsc2UgaWYgKGlzVG9rZW5WYWxpZCgpKSB7CiAgICAgICAgY29uc29sZS5sb2coJ+KZu++4jyBVc2luZyBleGlzdGluZyBjYWNoZWQgdG9rZW4gKGZyb20gcHJldmlvdXMgb3BlcmF0aW9uKScpOwogICAgICAgIHRva2VuID0gdHVybnN0aWxlVG9rZW47CiAgICAgIH0KICAgICAgLy8g4pyFIE90aGVyd2lzZSBnZW5lcmF0ZSBhIG5ldyBvbmUKICAgICAgZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coJ/CflJAgTm8gdmFsaWQgcHJlLWdlbmVyYXRlZCBvciBjYWNoZWQgdG9rZW4sIGNyZWF0aW5nIG5ldyBvbmUuLi4nKTsKICAgICAgICB0b2tlbiA9IGF3YWl0IFV0aWxzLmV4ZWN1dGVUdXJuc3RpbGUoc2l0ZWtleSwgJ3BhaW50Jyk7CiAgICAgICAgaWYgKHRva2VuKSB7CiAgICAgICAgICBzZXRUdXJuc3RpbGVUb2tlbih0b2tlbik7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyDwn5OKIERlYnVnIGxvZwogICAgICBjb25zb2xlLmxvZygKICAgICAgICBg8J+UjSBUb2tlbiByZWNlaXZlZCAtIFR5cGU6ICR7dHlwZW9mIHRva2VufSwgVmFsdWU6ICR7CiAgICAgICAgICB0b2tlbgogICAgICAgICAgICA/IHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycKICAgICAgICAgICAgICA/IHRva2VuLmxlbmd0aCA+IDUwCiAgICAgICAgICAgICAgICA/IHRva2VuLnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJwogICAgICAgICAgICAgICAgOiB0b2tlbgogICAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkodG9rZW4pCiAgICAgICAgICAgIDogJ251bGwvdW5kZWZpbmVkJwogICAgICAgIH0sIExlbmd0aDogJHt0b2tlbj8ubGVuZ3RoIHx8IDB9YAogICAgICApOwoKICAgICAgLy8g4pyFIEZpbmFsIHZhbGlkYXRpb24KICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgJiYgdG9rZW4ubGVuZ3RoID4gMjApIHsKICAgICAgICBjb25zdCBkdXJhdGlvbiA9IE1hdGgucm91bmQocGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWUpOwogICAgICAgIGNvbnNvbGUubG9nKGDinIUgVHVybnN0aWxlIHRva2VuIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHkgaW4gJHtkdXJhdGlvbn1tc2ApOwogICAgICAgIHJldHVybiB0b2tlbjsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICBgSW52YWxpZCBvciBlbXB0eSB0b2tlbiByZWNlaXZlZCAtIFR5cGU6ICR7dHlwZW9mIHRva2VufSwgVmFsdWU6ICR7SlNPTi5zdHJpbmdpZnkoCiAgICAgICAgICAgIHRva2VuCiAgICAgICAgICApfSwgTGVuZ3RoOiAke3Rva2VuPy5sZW5ndGggfHwgMH1gCiAgICAgICAgKTsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc3QgZHVyYXRpb24gPSBNYXRoLnJvdW5kKHBlcmZvcm1hbmNlLm5vdygpIC0gc3RhcnRUaW1lKTsKICAgICAgY29uc29sZS5lcnJvcihg4p2MIFR1cm5zdGlsZSB0b2tlbiBnZW5lcmF0aW9uIGZhaWxlZCBhZnRlciAke2R1cmF0aW9ufW1zOmAsIGVycm9yKTsKCiAgICAgIC8vIEZhbGxiYWNrIHRvIG1hbnVhbCBwaXhlbCBwbGFjZW1lbnQgZm9yIGh5YnJpZCBtb2RlCiAgICAgIGlmIChzdGF0ZS50b2tlblNvdXJjZSA9PT0gJ2h5YnJpZCcpIHsKICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICfwn5SEIEh5YnJpZCBtb2RlOiBHZW5lcmF0b3IgZmFpbGVkLCBhdXRvbWF0aWNhbGx5IHN3aXRjaGluZyB0byBtYW51YWwgcGl4ZWwgcGxhY2VtZW50Li4uJwogICAgICAgICk7CiAgICAgICAgY29uc3QgZmJUb2tlbiA9IGF3YWl0IGhhbmRsZUNhcHRjaGFGYWxsYmFjaygpOwogICAgICAgIHJldHVybiBmYlRva2VuOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFB1cmUgZ2VuZXJhdG9yIG1vZGUgLSBkb24ndCBmYWxsYmFjaywganVzdCBmYWlsCiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0KICAgIH0KICB9CgogIC8vIEtlZXAgb3JpZ2luYWwgbWV0aG9kIGFzIGZhbGxiYWNrCiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2FwdGNoYUZhbGxiYWNrKCkgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgICAgdHJ5IHsKICAgICAgICAvLyBFbnN1cmUgd2UgaGF2ZSBhIGZyZXNoIHByb21pc2UgdG8gYXdhaXQgZm9yIGEgbmV3IHRva2VuIGNhcHR1cmUKICAgICAgICBpZiAoIV9yZXNvbHZlVG9rZW4pIHsKICAgICAgICAgIHRva2VuUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXMpID0+IHsKICAgICAgICAgICAgX3Jlc29sdmVUb2tlbiA9IHJlczsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICBjb25zdCB0aW1lb3V0UHJvbWlzZSA9IFV0aWxzLnNsZWVwKDIwMDAwKS50aGVuKCgpID0+CiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdBdXRvLUNBUFRDSEEgdGltZWQgb3V0LicpKQogICAgICAgICk7CgogICAgICAgIGNvbnN0IHNvbHZlUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7CiAgICAgICAgICBjb25zdCBtYWluUGFpbnRCdG4gPSBhd2FpdCBVdGlscy53YWl0Rm9yU2VsZWN0b3IoCiAgICAgICAgICAgICdidXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZywgYnV0dG9uLmJ0bi1wcmltYXJ5LnNtXFw6YnRuLXhsJywKICAgICAgICAgICAgMjAwLAogICAgICAgICAgICAxMDAwMAogICAgICAgICAgKTsKICAgICAgICAgIGlmICghbWFpblBhaW50QnRuKSB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoZSBtYWluIHBhaW50IGJ1dHRvbi4nKTsKICAgICAgICAgIG1haW5QYWludEJ0bi5jbGljaygpOwogICAgICAgICAgYXdhaXQgVXRpbHMuc2xlZXAoNTAwKTsKCiAgICAgICAgICBjb25zdCB0cmFuc0J0biA9IGF3YWl0IFV0aWxzLndhaXRGb3JTZWxlY3RvcignYnV0dG9uI2NvbG9yLTAnLCAyMDAsIDUwMDApOwogICAgICAgICAgaWYgKCF0cmFuc0J0bikgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCB0aGUgdHJhbnNwYXJlbnQgY29sb3IgYnV0dG9uLicpOwogICAgICAgICAgdHJhbnNCdG4uY2xpY2soKTsKICAgICAgICAgIGF3YWl0IFV0aWxzLnNsZWVwKDUwMCk7CgogICAgICAgICAgY29uc3QgY2FudmFzID0gYXdhaXQgVXRpbHMud2FpdEZvclNlbGVjdG9yKCdjYW52YXMnLCAyMDAsIDUwMDApOwogICAgICAgICAgaWYgKCFjYW52YXMpIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdGhlIGNhbnZhcyBlbGVtZW50LicpOwoKICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTsKICAgICAgICAgIGNhbnZhcy5mb2N1cygpOwogICAgICAgICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgICAgIGNvbnN0IGNlbnRlclggPSBNYXRoLnJvdW5kKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyKTsKICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSBNYXRoLnJvdW5kKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyKTsKCiAgICAgICAgICBjYW52YXMuZGlzcGF0Y2hFdmVudCgKICAgICAgICAgICAgbmV3IE1vdXNlRXZlbnQoJ21vdXNlbW92ZScsIHsKICAgICAgICAgICAgICBjbGllbnRYOiBjZW50ZXJYLAogICAgICAgICAgICAgIGNsaWVudFk6IGNlbnRlclksCiAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSwKICAgICAgICAgICAgfSkKICAgICAgICAgICk7CiAgICAgICAgICBjYW52YXMuZGlzcGF0Y2hFdmVudCgKICAgICAgICAgICAgbmV3IEtleWJvYXJkRXZlbnQoJ2tleWRvd24nLCB7CiAgICAgICAgICAgICAga2V5OiAnICcsCiAgICAgICAgICAgICAgY29kZTogJ1NwYWNlJywKICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLAogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICAgIGF3YWl0IFV0aWxzLnNsZWVwKDUwKTsKICAgICAgICAgIGNhbnZhcy5kaXNwYXRjaEV2ZW50KAogICAgICAgICAgICBuZXcgS2V5Ym9hcmRFdmVudCgna2V5dXAnLCB7CiAgICAgICAgICAgICAga2V5OiAnICcsCiAgICAgICAgICAgICAgY29kZTogJ1NwYWNlJywKICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLAogICAgICAgICAgICB9KQogICAgICAgICAgKTsKICAgICAgICAgIGF3YWl0IFV0aWxzLnNsZWVwKDUwMCk7CgogICAgICAgICAgLy8gODAwbXMgZGVsYXkgYmVmb3JlIHNlbmRpbmcgY29uZmlybWF0aW9uCiAgICAgICAgICBhd2FpdCBVdGlscy5zbGVlcCg4MDApOwoKICAgICAgICAgIC8vIEtlZXAgY29uZmlybWluZyB1bnRpbCB0b2tlbiBpcyBjYXB0dXJlZAogICAgICAgICAgY29uc3QgY29uZmlybUxvb3AgPSBhc3luYyAoKSA9PiB7CiAgICAgICAgICAgIHdoaWxlICghdHVybnN0aWxlVG9rZW4pIHsKICAgICAgICAgICAgICBsZXQgY29uZmlybUJ0biA9IGF3YWl0IFV0aWxzLndhaXRGb3JTZWxlY3RvcigKICAgICAgICAgICAgICAgICdidXR0b24uYnRuLmJ0bi1wcmltYXJ5LmJ0bi1sZywgYnV0dG9uLmJ0bi5idG4tcHJpbWFyeS5zbVxcOmJ0bi14bCcKICAgICAgICAgICAgICApOwogICAgICAgICAgICAgIGlmICghY29uZmlybUJ0bikgewogICAgICAgICAgICAgICAgY29uc3QgYWxsUHJpbWFyeSA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLmJ0bi1wcmltYXJ5JykpOwogICAgICAgICAgICAgICAgY29uZmlybUJ0biA9IGFsbFByaW1hcnkubGVuZ3RoID8gYWxsUHJpbWFyeVthbGxQcmltYXJ5Lmxlbmd0aCAtIDFdIDogbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGNvbmZpcm1CdG4pIHsKICAgICAgICAgICAgICAgIGNvbmZpcm1CdG4uY2xpY2soKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgYXdhaXQgVXRpbHMuc2xlZXAoNTAwKTsgLy8gNTAwbXMgZGVsYXkgYmV0d2VlbiBjb25maXJtYXRpb24gYXR0ZW1wdHMKICAgICAgICAgICAgfQogICAgICAgICAgfTsKCiAgICAgICAgICAvLyBTdGFydCBjb25maXJtYXRpb24gbG9vcCBhbmQgd2FpdCBmb3IgdG9rZW4KICAgICAgICAgIGNvbmZpcm1Mb29wKCk7CiAgICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRva2VuUHJvbWlzZTsKICAgICAgICAgIGF3YWl0IFV0aWxzLnNsZWVwKDMwMCk7IC8vIHNtYWxsIGRlbGF5IGFmdGVyIHRva2VuIGlzIGNhcHR1cmVkCiAgICAgICAgICByZXNvbHZlKHRva2VuKTsKICAgICAgICB9KSgpOwoKICAgICAgICBhd2FpdCBQcm9taXNlLnJhY2UoW3NvbHZlUHJvbWlzZSwgdGltZW91dFByb21pc2VdKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdBdXRvLUNBUFRDSEEgcHJvY2VzcyBmYWlsZWQ6JywgZXJyb3IpOwogICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVUkoKSB7CiAgICBhd2FpdCBkZXRlY3RMYW5ndWFnZSgpOwoKICAgIGNvbnN0IGV4aXN0aW5nQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dwbGFjZS1pbWFnZS1ib3QtY29udGFpbmVyJyk7CiAgICBjb25zdCBleGlzdGluZ1N0YXRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dwbGFjZS1zdGF0cy1jb250YWluZXInKTsKICAgIGNvbnN0IGV4aXN0aW5nU2V0dGluZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3BsYWNlLXNldHRpbmdzLWNvbnRhaW5lcicpOwogICAgY29uc3QgZXhpc3RpbmdSZXNpemVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVzaXplLWNvbnRhaW5lcicpOwogICAgY29uc3QgZXhpc3RpbmdSZXNpemVPdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJlc2l6ZS1vdmVybGF5Jyk7CgogICAgaWYgKGV4aXN0aW5nQ29udGFpbmVyKSBleGlzdGluZ0NvbnRhaW5lci5yZW1vdmUoKTsKICAgIGlmIChleGlzdGluZ1N0YXRzKSBleGlzdGluZ1N0YXRzLnJlbW92ZSgpOwogICAgaWYgKGV4aXN0aW5nU2V0dGluZ3MpIGV4aXN0aW5nU2V0dGluZ3MucmVtb3ZlKCk7CiAgICBpZiAoZXhpc3RpbmdSZXNpemVDb250YWluZXIpIGV4aXN0aW5nUmVzaXplQ29udGFpbmVyLnJlbW92ZSgpOwogICAgaWYgKGV4aXN0aW5nUmVzaXplT3ZlcmxheSkgZXhpc3RpbmdSZXNpemVPdmVybGF5LnJlbW92ZSgpOwoKICAgIGxvYWRUaGVtZVByZWZlcmVuY2UoKTsKICAgIGF3YWl0IGluaXRpYWxpemVUcmFuc2xhdGlvbnMoKTsKCiAgICBjb25zdCB0aGVtZSA9IGdldEN1cnJlbnRUaGVtZSgpOwogICAgYXBwbHlUaGVtZSgpOyAvLyA8LSBuZXc6IHNldCBDU1MgdmFycyBhbmQgdGhlbWUgY2xhc3MgYmVmb3JlIGJ1aWxkaW5nIFVJCgogICAgZnVuY3Rpb24gYXBwZW5kTGlua09uY2UoaHJlZiwgYXR0cmlidXRlcyA9IHt9KSB7CiAgICAgIC8vIENoZWNrIGlmIGEgbGluayB3aXRoIHRoZSBzYW1lIGhyZWYgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGRvY3VtZW50IGhlYWQKICAgICAgY29uc3QgZXhpc3RzID0gQXJyYXkuZnJvbShkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKSkuc29tZSgKICAgICAgICAobGluaykgPT4gbGluay5ocmVmID09PSBocmVmCiAgICAgICk7CiAgICAgIGlmIChleGlzdHMpIHJldHVybjsKCiAgICAgIC8vIENyZWF0ZSBhIG5ldyBsaW5rIGVsZW1lbnQKICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7CiAgICAgIGxpbmsuaHJlZiA9IGhyZWY7CgogICAgICAvLyBBZGQgYW55IGFkZGl0aW9uYWwgYXR0cmlidXRlcyAoZS5nLiwgZGF0YS0qIGF0dHJpYnV0ZXMpCiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7CiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIC8vIEFwcGVuZCB0aGUgbGluayBlbGVtZW50IHRvIHRoZSBkb2N1bWVudCBoZWFkCiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGluayk7CiAgICB9CgogICAgYXBwZW5kTGlua09uY2UoJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS82LjQuMC9jc3MvYWxsLm1pbi5jc3MnKTsKCiAgICBpZiAodGhlbWUuZm9udEZhbWlseS5pbmNsdWRlcygnUHJlc3MgU3RhcnQgMlAnKSkgewogICAgICBhcHBlbmRMaW5rT25jZSgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1QcmVzcytTdGFydCsyUCZkaXNwbGF5PXN3YXAnKTsKICAgIH0KCiAgICBhcHBlbmRMaW5rT25jZSgKICAgICAgJ2h0dHBzOi8vd3BsYWNlLWF1dG9ib3QuZ2l0aHViLmlvL1dQbGFjZS1BdXRvQk9UL21haW4vYXV0by1pbWFnZS1zdHlsZXMuY3NzJywKICAgICAgeyAnZGF0YS13cGxhY2UtdGhlbWUnOiAndHJ1ZScgfQogICAgKTsKCiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIGNvbnRhaW5lci5pZCA9ICd3cGxhY2UtaW1hZ2UtYm90LWNvbnRhaW5lcic7CiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gYAogICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtaGVhZGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtaGVhZGVyLXRpdGxlIj4KICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtaW1hZ2UiPjwvaT4KICAgICAgICAgIDxzcGFuPiR7VXRpbHMudCgndGl0bGUnKX08L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWhlYWRlci1jb250cm9scyI+CiAgICAgICAgICA8YnV0dG9uIGlkPSJzZXR0aW5nc0J0biIgY2xhc3M9IndwbGFjZS1oZWFkZXItYnRuIiB0aXRsZT0iJHtVdGlscy50KCdzZXR0aW5ncycpfSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY29nIj48L2k+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9InN0YXRzQnRuIiBjbGFzcz0id3BsYWNlLWhlYWRlci1idG4iIHRpdGxlPSIke1V0aWxzLnQoJ3Nob3dTdGF0cycpfSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2hhcnQtYmFyIj48L2k+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9ImNvbXBhY3RCdG4iIGNsYXNzPSJ3cGxhY2UtaGVhZGVyLWJ0biIgdGl0bGU9IiR7VXRpbHMudCgnY29tcGFjdE1vZGUnKX0iPgogICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNvbXByZXNzIj48L2k+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9Im1pbmltaXplQnRuIiBjbGFzcz0id3BsYWNlLWhlYWRlci1idG4iIHRpdGxlPSIke1V0aWxzLnQoJ21pbmltaXplJyl9Ij4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1taW51cyI+PC9pPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtY29udGVudCI+CiAgICAgICAgPCEtLSBTdGF0dXMgU2VjdGlvbiAtIEFsd2F5cyB2aXNpYmxlIC0tPgogICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zdGF0dXMtc2VjdGlvbiI+CiAgICAgICAgICA8ZGl2IGlkPSJzdGF0dXNUZXh0IiBjbGFzcz0id3BsYWNlLXN0YXR1cyBzdGF0dXMtZGVmYXVsdCI+CiAgICAgICAgICAgICR7VXRpbHMudCgnaW5pdE1lc3NhZ2UnKX0KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXByb2dyZXNzIj4KICAgICAgICAgICAgPGRpdiBpZD0icHJvZ3Jlc3NCYXIiIGNsYXNzPSJ3cGxhY2UtcHJvZ3Jlc3MtYmFyIiBzdHlsZT0id2lkdGg6IDAlIj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIEltYWdlIFNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24iPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24tdGl0bGUiPvCflrzvuI8gSW1hZ2UgTWFuYWdlbWVudDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWNvbnRyb2xzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXJvdyI+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0idXBsb2FkQnRuIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLXVwbG9hZCIgZGlzYWJsZWQgdGl0bGU9IiR7VXRpbHMudCgKICAgICAgICAgICAgICAgICd3YWl0aW5nU2V0dXBDb21wbGV0ZScKICAgICAgICAgICAgICApfSI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXVwbG9hZCI+PC9pPgogICAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCd1cGxvYWRJbWFnZScpfTwvc3Bhbj4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJyZXNpemVCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tcHJpbWFyeSIgZGlzYWJsZWQ+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWV4cGFuZCI+PC9pPgogICAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdyZXNpemVJbWFnZScpfTwvc3Bhbj4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1yb3cgc2luZ2xlIj4KICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJzZWxlY3RQb3NCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tc2VsZWN0IiBkaXNhYmxlZD4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY3Jvc3NoYWlycyI+PC9pPgogICAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdzZWxlY3RQb3NpdGlvbicpfTwvc3Bhbj4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBDb250cm9sIFNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24iPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24tdGl0bGUiPvCfjq4gUGFpbnRpbmcgQ29udHJvbDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWNvbnRyb2xzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXJvdyI+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ic3RhcnRCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tc3RhcnQiIGRpc2FibGVkPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1wbGF5Ij48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ3N0YXJ0UGFpbnRpbmcnKX08L3NwYW4+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ic3RvcEJ0biIgY2xhc3M9IndwbGFjZS1idG4gd3BsYWNlLWJ0bi1zdG9wIiBkaXNhYmxlZD4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3RvcCI+PC9pPgogICAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdzdG9wUGFpbnRpbmcnKX08L3NwYW4+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utcm93IHNpbmdsZSI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJ0b2dnbGVPdmVybGF5QnRuIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLW92ZXJsYXkiIGRpc2FibGVkPgogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZXllIj48L2k+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCd0b2dnbGVPdmVybGF5Jyl9PC9zcGFuPgogICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gQ29vbGRvd24gU2VjdGlvbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2VjdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZWN0aW9uLXRpdGxlIj7ij7HvuI8gJHtVdGlscy50KCdjb29sZG93blNldHRpbmdzJyl9PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1jb29sZG93bi1jb250cm9sIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBpZD0iY29vbGRvd25MYWJlbCI+JHtVdGlscy50KCd3YWl0Q2hhcmdlcycpfTo8L2xhYmVsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWR1YWwtY29udHJvbC1jb21wYWN0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2xpZGVyLWNvbnRhaW5lci1jb21wYWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhbmdlIiBpZD0iY29vbGRvd25TbGlkZXIiIGNsYXNzPSJ3cGxhY2Utc2xpZGVyIiBtaW49IjEiIG1heD0iMSIgdmFsdWU9IiR7c3RhdGUuY29vbGRvd25DaGFyZ2VUaHJlc2hvbGR9Ij4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtaW5wdXQtZ3JvdXAtY29tcGFjdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImNvb2xkb3duRGVjcmVhc2UiIGNsYXNzPSJ3cGxhY2UtaW5wdXQtYnRuLWNvbXBhY3QiIHR5cGU9ImJ1dHRvbiI+LTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBpZD0iY29vbGRvd25JbnB1dCIgY2xhc3M9IndwbGFjZS1udW1iZXItaW5wdXQtY29tcGFjdCIgbWluPSIxIiBtYXg9Ijk5OSIgdmFsdWU9IiR7c3RhdGUuY29vbGRvd25DaGFyZ2VUaHJlc2hvbGR9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iY29vbGRvd25JbmNyZWFzZSIgY2xhc3M9IndwbGFjZS1pbnB1dC1idG4tY29tcGFjdCIgdHlwZT0iYnV0dG9uIj4rPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJjb29sZG93blZhbHVlIiBjbGFzcz0id3BsYWNlLWlucHV0LWxhYmVsLWNvbXBhY3QiPiR7VXRpbHMudCgnY2hhcmdlcycpfTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBEYXRhIFNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24iPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24tdGl0bGUiPvCfkr4gRGF0YSBNYW5hZ2VtZW50PC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtY29udHJvbHMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utcm93Ij4KICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJzYXZlQnRuIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLXByaW1hcnkiIGRpc2FibGVkPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zYXZlIj48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ3NhdmVEYXRhJyl9PC9zcGFuPgogICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9ImxvYWRCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tcHJpbWFyeSIgZGlzYWJsZWQgdGl0bGU9IiR7VXRpbHMudCgKICAgICAgICAgICAgICAgICd3YWl0aW5nVG9rZW5HZW5lcmF0b3InCiAgICAgICAgICAgICAgKX0iPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mb2xkZXItb3BlbiI+PC9pPgogICAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdsb2FkRGF0YScpfTwvc3Bhbj4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1yb3ciPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9InNhdmVUb0ZpbGVCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tZmlsZSIgZGlzYWJsZWQ+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWRvd25sb2FkIj48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ3NhdmVUb0ZpbGUnKX08L3NwYW4+CiAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ibG9hZEZyb21GaWxlQnRuIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLWZpbGUiIGRpc2FibGVkIHRpdGxlPSIke1V0aWxzLnQoCiAgICAgICAgICAgICAgICAnd2FpdGluZ1Rva2VuR2VuZXJhdG9yJwogICAgICAgICAgICAgICl9Ij4KICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdXBsb2FkIj48L2k+CiAgICAgICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ2xvYWRGcm9tRmlsZScpfTwvc3Bhbj4KICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICBgOwoKICAgIC8vIFN0YXRzIFdpbmRvdyAtIFNlcGFyYXRlIFVJCiAgICBjb25zdCBzdGF0c0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgc3RhdHNDb250YWluZXIuaWQgPSAnd3BsYWNlLXN0YXRzLWNvbnRhaW5lcic7CiAgICBzdGF0c0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgc3RhdHNDb250YWluZXIuaW5uZXJIVE1MID0gYAogICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtaGVhZGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtaGVhZGVyLXRpdGxlIj4KICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2hhcnQtYmFyIj48L2k+CiAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ3BhaW50aW5nU3RhdHMnKX08L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWhlYWRlci1jb250cm9scyI+CiAgICAgICAgICA8YnV0dG9uIGlkPSJyZWZyZXNoQ2hhcmdlc0J0biIgY2xhc3M9IndwbGFjZS1oZWFkZXItYnRuIiB0aXRsZT0iJHtVdGlscy50KAogICAgICAgICAgICAncmVmcmVzaENoYXJnZXMnCiAgICAgICAgICApfSI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3luYyI+PC9pPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGlkPSJjbG9zZVN0YXRzQnRuIiBjbGFzcz0id3BsYWNlLWhlYWRlci1idG4iIHRpdGxlPSIke1V0aWxzLnQoJ2Nsb3NlU3RhdHMnKX0iPgogICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRpbWVzIj48L2k+CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1jb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdHMiPgogICAgICAgICAgPGRpdiBpZD0ic3RhdHNBcmVhIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtbGFiZWwiPjxpIGNsYXNzPSJmYXMgZmEtaW5mby1jaXJjbGUiPjwvaT4gJHtVdGlscy50KAogICAgICAgICAgICAgICAgJ2luaXRNZXNzYWdlJwogICAgICAgICAgICAgICl9PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgYDsKCiAgICAvLyBNb2Rlcm4gU2V0dGluZ3MgQ29udGFpbmVyIHdpdGggVGhlbWUgU3VwcG9ydAogICAgLy8gVXNlIHRoZSB0aGVtZSB2YXJpYWJsZSBhbHJlYWR5IGRlY2xhcmVkIGF0IHRoZSB0b3Agb2YgY3JlYXRlVUkgZnVuY3Rpb24KICAgIGNvbnN0IHNldHRpbmdzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBzZXR0aW5nc0NvbnRhaW5lci5pZCA9ICd3cGxhY2Utc2V0dGluZ3MtY29udGFpbmVyJzsKCiAgICAvLyBBcHBseSB0aGVtZS1iYXNlZCBzdHlsaW5nCiAgICBjb25zdCB0aGVtZUJhY2tncm91bmQgPSB0aGVtZS5wcmltYXJ5CiAgICAgID8gYGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICR7dGhlbWUucHJpbWFyeX0gMCUsICR7dGhlbWUuc2Vjb25kYXJ5IHx8IHRoZW1lLnByaW1hcnl9IDEwMCUpYAogICAgICA6IGBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjNjY3ZWVhIDAlLCAjNzY0YmEyIDEwMCUpYDsKCiAgICBzZXR0aW5nc0NvbnRhaW5lci5jbGFzc05hbWUgPSAnd3BsYWNlLXNldHRpbmdzLWNvbnRhaW5lci1iYXNlJzsKICAgIC8vIEFwcGx5IHRoZW1lLXNwZWNpZmljIGJhY2tncm91bmQKICAgIHNldHRpbmdzQ29udGFpbmVyLnN0eWxlLmJhY2tncm91bmQgPSB0aGVtZUJhY2tncm91bmQ7CiAgICBzZXR0aW5nc0NvbnRhaW5lci5zdHlsZS5jc3NUZXh0ICs9IGAKICAgICAgbWluLXdpZHRoOiA0MjBweDsKICAgICAgbWF4LXdpZHRoOiA0ODBweDsKICAgICAgei1pbmRleDogOTk5OTk7CiAgICAgIGNvbG9yOiAke3RoZW1lLnRleHQgfHwgJ3doaXRlJ307CiAgICAgIGZvbnQtZmFtaWx5OiAke3RoZW1lLmZvbnRGYW1pbHkgfHwgIidTZWdvZSBVSScsIFRhaG9tYSwgR2VuZXZhLCBWZXJkYW5hLCBzYW5zLXNlcmlmIn07CiAgICAgIGJveC1zaGFkb3c6ICR7CiAgICAgICAgdGhlbWUuYm94U2hhZG93IHx8ICcwIDIwcHggNDBweCByZ2JhKDAsMCwwLDAuMyksIDAgMCAwIDFweCByZ2JhKDI1NSwyNTUsMjU1LDAuMSknCiAgICAgIH07CiAgICAgIGJhY2tkcm9wLWZpbHRlcjogJHt0aGVtZS5iYWNrZHJvcEZpbHRlciB8fCAnYmx1cigxMHB4KSd9OwogICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICBhbmltYXRpb246IHNldHRpbmdzLXNsaWRlLWluIDAuNHMgZWFzZS1vdXQ7CiAgICAgICR7CiAgICAgICAgdGhlbWUuYW5pbWF0aW9ucz8uZ2xvdwogICAgICAgICAgPyBgCiAgICAgICAgYm94LXNoYWRvdzogJHt0aGVtZS5ib3hTaGFkb3cgfHwgJzAgMjBweCA0MHB4IHJnYmEoMCwwLDAsMC4zKSd9LCAKICAgICAgICAgICAgICAgICAgIDAgMCAzMHB4ICR7dGhlbWUuaGlnaGxpZ2h0IHx8IHRoZW1lLm5lb24gfHwgJyMwMGZmZmYnfTsKICAgICAgYAogICAgICAgICAgOiAnJwogICAgICB9CiAgICBgOwoKICAgIC8vIG5vaW5zcGVjdGlvbiBDc3NJbnZhbGlkRnVuY3Rpb24KICAgIHNldHRpbmdzQ29udGFpbmVyLmlubmVySFRNTCA9IGAKICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLWhlYWRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRpdGxlLXdyYXBwZXIiPgogICAgICAgICAgPGgzIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtdGl0bGUiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNvZyB3cGxhY2Utc2V0dGluZ3MtaWNvbiI+PC9pPgogICAgICAgICAgICAke1V0aWxzLnQoJ3NldHRpbmdzJyl9CiAgICAgICAgICA8L2gzPgogICAgICAgICAgPGJ1dHRvbiBpZD0iY2xvc2VTZXR0aW5nc0J0biIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1jbG9zZS1idG4iPuKclTwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1jb250ZW50Ij4KICAgICAgICAKICAgICAgICA8IS0tIFRva2VuIFNvdXJjZSBTZWxlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24iPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbi1sYWJlbCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEta2V5IHdwbGFjZS1pY29uLWtleSI+PC9pPgogICAgICAgICAgICBUb2tlbiBTb3VyY2UKICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbi13cmFwcGVyIj4KICAgICAgICAgICAgPHNlbGVjdCBpZD0idG9rZW5Tb3VyY2VTZWxlY3QiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VsZWN0Ij4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJnZW5lcmF0b3IiICR7CiAgICAgICAgICAgICAgICBzdGF0ZS50b2tlblNvdXJjZSA9PT0gJ2dlbmVyYXRvcicgPyAnc2VsZWN0ZWQnIDogJycKICAgICAgICAgICAgICB9IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7wn6SWIEF1dG9tYXRpYyBUb2tlbiBHZW5lcmF0b3IgKFJlY29tbWVuZGVkKTwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Imh5YnJpZCIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLnRva2VuU291cmNlID09PSAnaHlicmlkJyA/ICdzZWxlY3RlZCcgOiAnJwogICAgICAgICAgICAgIH0gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCflIQgR2VuZXJhdG9yICsgQXV0byBGYWxsYmFjazwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im1hbnVhbCIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLnRva2VuU291cmNlID09PSAnbWFudWFsJyA/ICdzZWxlY3RlZCcgOiAnJwogICAgICAgICAgICAgIH0gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfjq8gTWFudWFsIFBpeGVsIFBsYWNlbWVudDwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgPHAgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1kZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgR2VuZXJhdG9yIG1vZGUgY3JlYXRlcyB0b2tlbnMgYXV0b21hdGljYWxseS4gSHlicmlkIG1vZGUgZmFsbHMgYmFjayB0byBtYW51YWwgd2hlbiBnZW5lcmF0b3IgZmFpbHMuIE1hbnVhbCBtb2RlIG9ubHkgdXNlcyBwaXhlbCBwbGFjZW1lbnQuCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIEF1dG9tYXRpb24gU2VjdGlvbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbiI+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWN0aW9uLWxhYmVsIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1yb2JvdCB3cGxhY2UtaWNvbi1yb2JvdCI+PC9pPgogICAgICAgICAgICAke1V0aWxzLnQoJ2F1dG9tYXRpb24nKX0KICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8IS0tIFRva2VuIGdlbmVyYXRvciBpcyBhbHdheXMgZW5hYmxlZCAtIHNldHRpbmdzIG1vdmVkIHRvIFRva2VuIFNvdXJjZSBhYm92ZSAtLT4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBPdmVybGF5IFNldHRpbmdzIFNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24iPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbi1sYWJlbCIgc3R5bGU9ImNvbG9yOiAke3RoZW1lLnRleHQgfHwgJ3doaXRlJ307Ij4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1leWUgd3BsYWNlLWljb24tZXllIiBzdHlsZT0iY29sb3I6ICR7CiAgICAgICAgICAgICAgdGhlbWUuaGlnaGxpZ2h0IHx8ICcjNDhkYmZiJwogICAgICAgICAgICB9OyI+PC9pPgogICAgICAgICAgICBPdmVybGF5IFNldHRpbmdzCiAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24td3JhcHBlciB3cGxhY2Utb3ZlcmxheS13cmFwcGVyIiBzdHlsZT0iCiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7dGhlbWUuYWNjZW50ID8gYCR7dGhlbWUuYWNjZW50fTIwYCA6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMSknfTsgCiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dGhlbWUuYm9yZGVyUmFkaXVzIHx8ICcxMnB4J307IAogICAgICAgICAgICBwYWRkaW5nOiAxOHB4OyAKICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJHt0aGVtZS5hY2NlbnQgfHwgJ3JnYmEoMjU1LDI1NSwyNTUsMC4xKSd9OwogICAgICAgICAgICAkewogICAgICAgICAgICAgIHRoZW1lLmFuaW1hdGlvbnM/Lmdsb3cKICAgICAgICAgICAgICAgID8gYAogICAgICAgICAgICAgIGJveC1zaGFkb3c6IDAgMCAxNXB4ICR7dGhlbWUuYWNjZW50IHx8ICdyZ2JhKDI1NSwyNTUsMjU1LDAuMSknfTMzOwogICAgICAgICAgICBgCiAgICAgICAgICAgICAgICA6ICcnCiAgICAgICAgICAgIH0KICAgICAgICAgICI+CiAgICAgICAgICAgICAgPCEtLSBPcGFjaXR5IFNsaWRlciAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utb3ZlcmxheS1vcGFjaXR5LWNvbnRyb2wiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLW92ZXJsYXktb3BhY2l0eS1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IndwbGFjZS1vdmVybGF5LW9wYWNpdHktbGFiZWwiIHN0eWxlPSJjb2xvcjogJHsKICAgICAgICAgICAgICAgICAgICAgdGhlbWUudGV4dCB8fCAnd2hpdGUnCiAgICAgICAgICAgICAgICAgICB9OyI+T3ZlcmxheSBPcGFjaXR5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ib3ZlcmxheU9wYWNpdHlWYWx1ZSIgY2xhc3M9IndwbGFjZS1vdmVybGF5LW9wYWNpdHktdmFsdWUiIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJHt0aGVtZS5zZWNvbmRhcnkgfHwgJ3JnYmEoMCwwLDAsMC4yKSd9OyAKICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICR7dGhlbWUudGV4dCB8fCAnd2hpdGUnfTsKICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogNHB4IDhweDsgCiAgICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dGhlbWUuYm9yZGVyUmFkaXVzID09PSAnMCcgPyAnMCcgOiAnNnB4J307IAogICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7CiAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICR7dGhlbWUuYWNjZW50IHx8ICd0cmFuc3BhcmVudCd9OwogICAgICAgICAgICAgICAgICAgIj4ke01hdGgucm91bmQoc3RhdGUub3ZlcmxheU9wYWNpdHkgKiAxMDApfSU8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhbmdlIiBpZD0ib3ZlcmxheU9wYWNpdHlTbGlkZXIiIG1pbj0iMC4xIiBtYXg9IjEiIHN0ZXA9IjAuMDUiIHZhbHVlPSIke3N0YXRlLm92ZXJsYXlPcGFjaXR5fSIgY2xhc3M9IndwbGFjZS1vdmVybGF5LW9wYWNpdHktc2xpZGVyIiBzdHlsZT0iCiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJHsKICAgICAgICAgICAgICAgICAgICB0aGVtZS5oaWdobGlnaHQgfHwgJyM0OGRiZmInCiAgICAgICAgICAgICAgICAgIH0gMCUsICR7dGhlbWUucHVycGxlIHx8IHRoZW1lLm5lb24gfHwgJyNkM2E0ZmYnfSAxMDAlKTsgCiAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6ICR7dGhlbWUuYm9yZGVyUmFkaXVzID09PSAnMCcgPyAnMCcgOiAnNHB4J307IAogICAgICAgICAgICAgICAgIj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8IS0tIEJsdWUgTWFyYmxlIFRvZ2dsZSAtLT4KICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJlbmFibGVCbHVlTWFyYmxlVG9nZ2xlIiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZSI+CiAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZS10aXRsZSIgc3R5bGU9ImNvbG9yOiAkewogICAgICAgICAgICAgICAgICAgICAgICB0aGVtZS50ZXh0IHx8ICd3aGl0ZScKICAgICAgICAgICAgICAgICAgICAgIH07Ij5CbHVlIE1hcmJsZSBFZmZlY3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZS1kZXNjcmlwdGlvbiIgc3R5bGU9ImNvbG9yOiAkewogICAgICAgICAgICAgICAgICAgICAgICB0aGVtZS50ZXh0ID8gYCR7dGhlbWUudGV4dH1CQmAgOiAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJwogICAgICAgICAgICAgICAgICAgICAgfTsiPlJlbmRlcnMgYSBkaXRoZXJlZCAic2hyZWRkZWQiIG92ZXJsYXkuPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0iZW5hYmxlQmx1ZU1hcmJsZVRvZ2dsZSIgJHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ibHVlTWFyYmxlRW5hYmxlZCA/ICdjaGVja2VkJyA6ICcnCiAgICAgICAgICAgICAgICAgIH0gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1jaGVja2JveCIgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgIGFjY2VudC1jb2xvcjogJHt0aGVtZS5oaWdobGlnaHQgfHwgJyM0OGRiZmInfTsKICAgICAgICAgICAgICAgICAgIi8+CiAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIFBhaW50IE9wdGlvbnMgU2VjdGlvbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbiI+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWN0aW9uLWxhYmVsIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1wYWludC1icnVzaCB3cGxhY2UtaWNvbi1wYWludCI+PC9pPgogICAgICAgICAgICAke1V0aWxzLnQoJ3BhaW50T3B0aW9ucycpfQogICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwhLS0gUGl4ZWwgRmlsdGVyIFRvZ2dsZXMgLS0+CiAgICAgICAgICA8ZGl2IGlkPSJwaXhlbEZpbHRlckNvbnRyb2xzIiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24td3JhcHBlciB3cGxhY2UtcGl4ZWwtZmlsdGVyLWNvbnRyb2xzIj4KICAgICAgICAgICAgPCEtLSBQYWludCBXaGl0ZSBQaXhlbHMgLS0+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZSI+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtdG9nZ2xlLXRpdGxlIiBzdHlsZT0iY29sb3I6ICR7dGhlbWUudGV4dCB8fCAnd2hpdGUnfTsiPgogICAgICAgICAgICAgICAgICAke1V0aWxzLnQoJ3BhaW50V2hpdGVQaXhlbHMnKX0KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtdG9nZ2xlLWRlc2NyaXB0aW9uIiBzdHlsZT0iY29sb3I6ICR7CiAgICAgICAgICAgICAgICAgIHRoZW1lLnRleHQgPyBgJHt0aGVtZS50ZXh0fUJCYCA6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNyknCiAgICAgICAgICAgICAgICB9OyI+CiAgICAgICAgICAgICAgICAgICR7VXRpbHMudCgncGFpbnRXaGl0ZVBpeGVsc0Rlc2NyaXB0aW9uJyl9CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0ic2V0dGluZ3NQYWludFdoaXRlVG9nZ2xlIiAke3N0YXRlLnBhaW50V2hpdGVQaXhlbHMgPyAnY2hlY2tlZCcgOiAnJ30gCiAgICAgICAgICAgICAgICBjbGFzcz0id3BsYWNlLXNldHRpbmdzLWNoZWNrYm94IgogICAgICAgICAgICAgICAgc3R5bGU9ImFjY2VudC1jb2xvcjogJHt0aGVtZS5oaWdobGlnaHQgfHwgJyM0OGRiZmInfTsiLz4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgCiAgICAgICAgICAgIDwhLS0gUGFpbnQgVHJhbnNwYXJlbnQgUGl4ZWxzIC0tPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy10b2dnbGUiPgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZS10aXRsZSIgc3R5bGU9ImNvbG9yOiAke3RoZW1lLnRleHQgfHwgJ3doaXRlJ307Ij4KICAgICAgICAgICAgICAgICAgJHtVdGlscy50KCdwYWludFRyYW5zcGFyZW50UGl4ZWxzJyl9CiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZS1kZXNjcmlwdGlvbiIgc3R5bGU9ImNvbG9yOiAkewogICAgICAgICAgICAgICAgICB0aGVtZS50ZXh0ID8gYCR7dGhlbWUudGV4dH1CQmAgOiAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJwogICAgICAgICAgICAgICAgfTsiPgogICAgICAgICAgICAgICAgICAke1V0aWxzLnQoJ3BhaW50VHJhbnNwYXJlbnRQaXhlbHNEZXNjcmlwdGlvbicpfQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9InNldHRpbmdzUGFpbnRUcmFuc3BhcmVudFRvZ2dsZSIgJHtzdGF0ZS5wYWludFRyYW5zcGFyZW50UGl4ZWxzID8gJ2NoZWNrZWQnIDogJyd9IAogICAgICAgICAgICAgICAgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1jaGVja2JveCIKICAgICAgICAgICAgICAgIHN0eWxlPSJhY2NlbnQtY29sb3I6ICR7dGhlbWUuaGlnaGxpZ2h0IHx8ICcjNDhkYmZiJ307Ii8+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZSI+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtdG9nZ2xlLXRpdGxlIiBzdHlsZT0iY29sb3I6ICR7CiAgICAgICAgICAgICAgICAgIHRoZW1lLnRleHQgfHwgJ3doaXRlJwogICAgICAgICAgICAgICAgfTsiPiR7VXRpbHMudCgncGFpbnRVbmF2YWlsYWJsZVBpeGVscycpfTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtdG9nZ2xlLWRlc2NyaXB0aW9uIiBzdHlsZT0iY29sb3I6ICR7CiAgICAgICAgICAgICAgICAgIHRoZW1lLnRleHQgPyBgJHt0aGVtZS50ZXh0fUJCYCA6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNyknCiAgICAgICAgICAgICAgICB9OyI+JHtVdGlscy50KCdwYWludFVuYXZhaWxhYmxlUGl4ZWxzRGVzY3JpcHRpb24nKX08L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZSIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLnBhaW50VW5hdmFpbGFibGVQaXhlbHMgPyAnY2hlY2tlZCcgOiAnJwogICAgICAgICAgICAgIH0gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1jaGVja2JveCIgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgIGFjY2VudC1jb2xvcjogJHt0aGVtZS5oaWdobGlnaHQgfHwgJyM0OGRiZmInfTsKICAgICAgICAgICAgICAgICAgIi8+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSBTcGVlZCBDb250cm9sIFNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24iPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbi1sYWJlbCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtdGFjaG9tZXRlci1hbHQgd3BsYWNlLWljb24tc3BlZWQiPjwvaT4KICAgICAgICAgICAgJHtVdGlscy50KCdwYWludGluZ1NwZWVkJyl9CiAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgCiAgICAgICAgICA8IS0tIEJhdGNoIE1vZGUgU2VsZWN0aW9uIC0tPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLW1vZGUtc2VsZWN0aW9uIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2UtbW9kZS1sYWJlbCI+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1kaWNlIHdwbGFjZS1pY29uLWRpY2UiPjwvaT4KICAgICAgICAgICAgICBCYXRjaCBNb2RlCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImJhdGNoTW9kZVNlbGVjdCIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWxlY3QiPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im5vcm1hbCIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfk6YgTm9ybWFsIChGaXhlZCBTaXplKTwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InJhbmRvbSIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfjrIgUmFuZG9tIChSYW5nZSk8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgICAgPCEtLSBOb3JtYWwgTW9kZTogRml4ZWQgU2l6ZSBDb250cm9scyAtLT4KICAgICAgICAgIDxkaXYgaWQ9Im5vcm1hbEJhdGNoQ29udHJvbHMiIGNsYXNzPSJ3cGxhY2UtYmF0Y2gtY29udHJvbHMgd3BsYWNlLW5vcm1hbC1iYXRjaC1jb250cm9scyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1iYXRjaC1zaXplLWhlYWRlciI+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9IndwbGFjZS1iYXRjaC1zaXplLWxhYmVsIj4ke1V0aWxzLnQoJ2JhdGNoU2l6ZScpfTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1kdWFsLWNvbnRyb2wtY29tcGFjdCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3BlZWQtc2xpZGVyLWNvbnRhaW5lci1jb21wYWN0Ij4KICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InJhbmdlIiBpZD0ic3BlZWRTbGlkZXIiIG1pbj0iJHtDT05GSUcuUEFJTlRJTkdfU1BFRUQuTUlOfSIgbWF4PSIke0NPTkZJRy5QQUlOVElOR19TUEVFRC5NQVh9IiB2YWx1ZT0iJHtDT05GSUcuUEFJTlRJTkdfU1BFRUQuREVGQVVMVH0iIGNsYXNzPSJ3cGxhY2Utc3BlZWQtc2xpZGVyIj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNwZWVkLWlucHV0LWNvbnRhaW5lci1jb21wYWN0Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWlucHV0LWdyb3VwLWNvbXBhY3QiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InNwZWVkRGVjcmVhc2UiIGNsYXNzPSJ3cGxhY2UtaW5wdXQtYnRuLWNvbXBhY3QiIHR5cGU9ImJ1dHRvbiI+LTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJzcGVlZElucHV0IiBjbGFzcz0id3BsYWNlLW51bWJlci1pbnB1dC1jb21wYWN0IiBtaW49IiR7Q09ORklHLlBBSU5USU5HX1NQRUVELk1JTn0iIG1heD0iJHtDT05GSUcuUEFJTlRJTkdfU1BFRUQuTUFYfSIgdmFsdWU9IiR7Q09ORklHLlBBSU5USU5HX1NQRUVELkRFRkFVTFR9Ij4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJzcGVlZEluY3JlYXNlIiBjbGFzcz0id3BsYWNlLWlucHV0LWJ0bi1jb21wYWN0IiB0eXBlPSJidXR0b24iPis8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0ic3BlZWRWYWx1ZSIgY2xhc3M9IndwbGFjZS1pbnB1dC1sYWJlbC1jb21wYWN0Ij5waXhlbHM8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3BlZWQtbGFiZWxzIj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0id3BsYWNlLXNwZWVkLW1pbiI+PGkgY2xhc3M9ImZhcyBmYS10dXJ0bGUiPjwvaT4gJHtDT05GSUcuUEFJTlRJTkdfU1BFRUQuTUlOfTwvc3Bhbj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0id3BsYWNlLXNwZWVkLW1heCI+PGkgY2xhc3M9ImZhcyBmYS1yYWJiaXQiPjwvaT4gJHtDT05GSUcuUEFJTlRJTkdfU1BFRUQuTUFYfTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgICAgPCEtLSBSYW5kb20gTW9kZTogUmFuZ2UgQ29udHJvbHMgLS0+CiAgICAgICAgICA8ZGl2IGlkPSJyYW5kb21CYXRjaENvbnRyb2xzIiBjbGFzcz0id3BsYWNlLWJhdGNoLWNvbnRyb2xzIHdwbGFjZS1yYW5kb20tYmF0Y2gtY29udHJvbHMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtcmFuZG9tLWJhdGNoLWdyaWQiPgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1yYW5kb20tYmF0Y2gtbGFiZWwiPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWFycm93LWRvd24gd3BsYWNlLWljb24tbWluIj48L2k+CiAgICAgICAgICAgICAgICAgIE1pbmltdW0gQmF0Y2ggU2l6ZQogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJyYW5kb21CYXRjaE1pbiIgbWluPSIxIiBtYXg9IjEwMDAiIHZhbHVlPSIke0NPTkZJRy5SQU5ET01fQkFUQ0hfUkFOR0UuTUlOfSIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1udW1iZXItaW5wdXQiPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1yYW5kb20tYmF0Y2gtbGFiZWwiPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWFycm93LXVwIHdwbGFjZS1pY29uLW1heCI+PC9pPgogICAgICAgICAgICAgICAgICBNYXhpbXVtIEJhdGNoIFNpemUKICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ibnVtYmVyIiBpZD0icmFuZG9tQmF0Y2hNYXgiIG1pbj0iMSIgbWF4PSIxMDAwIiB2YWx1ZT0iJHtDT05GSUcuUkFORE9NX0JBVENIX1JBTkdFLk1BWH0iIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtbnVtYmVyLWlucHV0Ij4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ3cGxhY2UtcmFuZG9tLWJhdGNoLWRlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICDwn46yIFJhbmRvbSBiYXRjaCBzaXplIGJldHdlZW4gbWluIGFuZCBtYXggdmFsdWVzCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgICA8IS0tIFNwZWVkIENvbnRyb2wgVG9nZ2xlIC0tPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2Utc3BlZWQtY29udHJvbC10b2dnbGUiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJlbmFibGVTcGVlZFRvZ2dsZSIgJHsKICAgICAgICAgICAgICBDT05GSUcuUEFJTlRJTkdfU1BFRURfRU5BQkxFRCA/ICdjaGVja2VkJyA6ICcnCiAgICAgICAgICAgIH0gY2xhc3M9IndwbGFjZS1zcGVlZC1jaGVja2JveCIvPgogICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ2VuYWJsZVBhaW50aW5nU3BlZWRMaW1pdCcpfTwvc3Bhbj4KICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgPCEtLSBDb29yZGluYXRlIEdlbmVyYXRpb24gU2VjdGlvbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbiI+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWN0aW9uLWxhYmVsIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1yb3V0ZSB3cGxhY2UtaWNvbi1yb3V0ZSI+PC9pPgogICAgICAgICAgICBDb29yZGluYXRlIEdlbmVyYXRpb24KICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAKICAgICAgICAgIDwhLS0gTW9kZSBTZWxlY3Rpb24gLS0+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtbW9kZS1zZWxlY3Rpb24iPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1tb2RlLWxhYmVsIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXRoIHdwbGFjZS1pY29uLXRhYmxlIj48L2k+CiAgICAgICAgICAgICAgR2VuZXJhdGlvbiBNb2RlCiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImNvb3JkaW5hdGVNb2RlU2VsZWN0IiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlbGVjdCI+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0icm93cyIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfk48gUm93cyAoSG9yaXpvbnRhbCBMaW5lcyk8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJjb2x1bW5zIiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+TkCBDb2x1bW5zIChWZXJ0aWNhbCBMaW5lcyk8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJjaXJjbGUtb3V0IiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+4q2VIENpcmNsZSBPdXQgKENlbnRlciDihpIgRWRnZXMpPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iY2lyY2xlLWluIiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+4q2VIENpcmNsZSBJbiAoRWRnZXMg4oaSIENlbnRlcik8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJibG9ja3MiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7wn5+rIEJsb2NrcyAoT3JkZXJlZCk8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJzaHVmZmxlLWJsb2NrcyIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfjrIgU2h1ZmZsZSBCbG9ja3MgKFJhbmRvbSk8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIAogICAgICAgICAgPCEtLSBEaXJlY3Rpb24gU2VsZWN0aW9uIChvbmx5IGZvciByb3dzL2NvbHVtbnMpIC0tPgogICAgICAgICAgPGRpdiBpZD0iZGlyZWN0aW9uQ29udHJvbHMiIGNsYXNzPSJ3cGxhY2UtbW9kZS1zZWxlY3Rpb24iPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1tb2RlLWxhYmVsIj4KICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNvbXBhc3Mgd3BsYWNlLWljb24tY29tcGFzcyI+PC9pPgogICAgICAgICAgICAgIFN0YXJ0aW5nIERpcmVjdGlvbgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGlkPSJjb29yZGluYXRlRGlyZWN0aW9uU2VsZWN0IiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlbGVjdCI+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idG9wLWxlZnQiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7ihpbvuI8gVG9wLUxlZnQ8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ0b3AtcmlnaHQiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7ihpfvuI8gVG9wLVJpZ2h0PC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iYm90dG9tLWxlZnQiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7ihpnvuI8gQm90dG9tLUxlZnQ8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJib3R0b20tcmlnaHQiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7ihpjvuI8gQm90dG9tLVJpZ2h0PC9vcHRpb24+CiAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgICAKICAgICAgICAgIDwhLS0gU25ha2UgUGF0dGVybiBUb2dnbGUgKG9ubHkgZm9yIHJvd3MvY29sdW1ucykgLS0+CiAgICAgICAgICA8ZGl2IGlkPSJzbmFrZUNvbnRyb2xzIiBjbGFzcz0id3BsYWNlLXNuYWtlLXBhdHRlcm4tY29udHJvbHMgd3BsYWNlLXNldHRpbmdzLXNlY3Rpb24td3JhcHBlciI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZSI+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtdG9nZ2xlLXRpdGxlIiBzdHlsZT0iY29sb3I6ICR7CiAgICAgICAgICAgICAgICAgIHRoZW1lLnRleHQgfHwgJ3doaXRlJwogICAgICAgICAgICAgICAgfTsiPlNuYWtlIFBhdHRlcm48L3NwYW4+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXRvZ2dsZS1kZXNjcmlwdGlvbiIgc3R5bGU9ImNvbG9yOiAkewogICAgICAgICAgICAgICAgICB0aGVtZS50ZXh0ID8gYCR7dGhlbWUudGV4dH1CQmAgOiAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJwogICAgICAgICAgICAgICAgfTsiPkFsdGVybmF0ZSBkaXJlY3Rpb24gZm9yIGVhY2ggcm93L2NvbHVtbiAoemlnemFnIHBhdHRlcm4pPC9wPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImNvb3JkaW5hdGVTbmFrZVRvZ2dsZSIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLmNvb3JkaW5hdGVTbmFrZSA/ICdjaGVja2VkJyA6ICcnCiAgICAgICAgICAgICAgfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLWNoZWNrYm94IiBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgYWNjZW50LWNvbG9yOiAke3RoZW1lLmhpZ2hsaWdodCB8fCAnIzQ4ZGJmYid9OwogICAgICAgICAgICAgICAgICAiLz4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgCiAgICAgICAgICA8IS0tIEJsb2NrIFNpemUgQ29udHJvbHMgKG9ubHkgZm9yIGJsb2Nrcy9zaHVmZmxlLWJsb2NrcykgLS0+CiAgICAgICAgICA8ZGl2IGlkPSJibG9ja0NvbnRyb2xzIiBjbGFzcz0id3BsYWNlLWJsb2NrLXNpemUtY29udHJvbHMgd3BsYWNlLXNldHRpbmdzLXNlY3Rpb24td3JhcHBlciB3cGxhY2Utc2h1ZmZsZS1ibG9jay1zaXplLWNvbnRyb2xzIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWJsb2NrLXNpemUtZ3JpZCI+CiAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0id3BsYWNlLWJsb2NrLXNpemUtbGFiZWwiPgogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWFycm93cy1hbHQtaCB3cGxhY2UtaWNvbi13aWR0aCI+PC9pPgogICAgICAgICAgICAgICAgICBCbG9jayBXaWR0aAogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJibG9ja1dpZHRoSW5wdXQiIG1pbj0iMSIgbWF4PSI1MCIgdmFsdWU9IjYiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3MtbnVtYmVyLWlucHV0Ij4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGxhYmVsIHN0eWxlPSJkaXNwbGF5OiBibG9jazsgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTsgZm9udC1zaXplOiAxMnB4OyBtYXJnaW4tYm90dG9tOiA4cHg7Ij4KICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1hcnJvd3MtYWx0LXYgd3BsYWNlLWljb24taGVpZ2h0Ij48L2k+CiAgICAgICAgICAgICAgICAgIEJsb2NrIEhlaWdodAogICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJibG9ja0hlaWdodElucHV0IiBtaW49IjEiIG1heD0iNTAiIHZhbHVlPSIyIiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW51bWJlci1pbnB1dCI+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8cCBjbGFzcz0id3BsYWNlLWJsb2NrLXNpemUtZGVzY3JpcHRpb24iPgogICAgICAgICAgICAgIPCfp7EgQmxvY2sgZGltZW5zaW9ucyBmb3IgYmxvY2stYmFzZWQgZ2VuZXJhdGlvbiBtb2RlcwogICAgICAgICAgICA8L3A+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICA8IS0tIE5vdGlmaWNhdGlvbnMgU2VjdGlvbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbiI+CiAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWN0aW9uLWxhYmVsIj4KICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1iZWxsIHdwbGFjZS1pY29uLWJlbGwiPjwvaT4KICAgICAgICAgICAgRGVza3RvcCBOb3RpZmljYXRpb25zCiAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24td3JhcHBlciB3cGxhY2Utbm90aWZpY2F0aW9ucy13cmFwcGVyIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2Utbm90aWZpY2F0aW9uLXRvZ2dsZSI+CiAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdlbmFibGVOb3RpZmljYXRpb25zJyl9PC9zcGFuPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9Im5vdGlmRW5hYmxlZFRvZ2dsZSIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLm5vdGlmaWNhdGlvbnNFbmFibGVkID8gJ2NoZWNrZWQnIDogJycKICAgICAgICAgICAgICB9IGNsYXNzPSJ3cGxhY2Utbm90aWZpY2F0aW9uLWNoZWNrYm94IiAvPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9IndwbGFjZS1ub3RpZmljYXRpb24tdG9nZ2xlIj4KICAgICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ25vdGlmeU9uQ2hhcmdlc1RocmVzaG9sZCcpfTwvc3Bhbj4KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJub3RpZk9uQ2hhcmdlc1RvZ2dsZSIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLm5vdGlmeU9uQ2hhcmdlc1JlYWNoZWQgPyAnY2hlY2tlZCcgOiAnJwogICAgICAgICAgICAgIH0gY2xhc3M9IndwbGFjZS1ub3RpZmljYXRpb24tY2hlY2tib3giIC8+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0id3BsYWNlLW5vdGlmaWNhdGlvbi10b2dnbGUiPgogICAgICAgICAgICAgIDxzcGFuPiR7VXRpbHMudCgnb25seVdoZW5Ob3RGb2N1c2VkJyl9PC9zcGFuPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9Im5vdGlmT25seVVuZm9jdXNlZFRvZ2dsZSIgJHsKICAgICAgICAgICAgICAgIHN0YXRlLm5vdGlmeU9ubHlXaGVuVW5mb2N1c2VkID8gJ2NoZWNrZWQnIDogJycKICAgICAgICAgICAgICB9IGNsYXNzPSJ3cGxhY2Utbm90aWZpY2F0aW9uLWNoZWNrYm94IiAvPgogICAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utbm90aWZpY2F0aW9uLWludGVydmFsIj4KICAgICAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ3JlcGVhdEV2ZXJ5Jyl9PC9zcGFuPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJub3RpZkludGVydmFsSW5wdXQiIG1pbj0iMSIgbWF4PSI2MCIgdmFsdWU9IiR7c3RhdGUubm90aWZpY2F0aW9uSW50ZXJ2YWxNaW51dGVzfSIgY2xhc3M9IndwbGFjZS1ub3RpZmljYXRpb24taW50ZXJ2YWwtaW5wdXQiIC8+CiAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdtaW51dGVzUGwnKX08L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utbm90aWZpY2F0aW9uLWJ1dHRvbnMiPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9Im5vdGlmUmVxdWVzdFBlcm1CdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tc2Vjb25kYXJ5IHdwbGFjZS1ub3RpZmljYXRpb24tcGVybS1idG4iPjxpIGNsYXNzPSJmYXMgZmEtdW5sb2NrIj48L2k+PHNwYW4+JHtVdGlscy50KAogICAgICAgICAgICAgICAgJ2dyYW50UGVybWlzc2lvbicKICAgICAgICAgICAgICApfTwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJub3RpZlRlc3RCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1ub3RpZmljYXRpb24tdGVzdC1idG4iPjxpIGNsYXNzPSJmYXMgZmEtYmVsbCI+PC9pPjxzcGFuPiR7VXRpbHMudCgKICAgICAgICAgICAgICAgICd0ZXN0JwogICAgICAgICAgICAgICl9PC9zcGFuPjwvYnV0dG9uPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8IS0tIFRoZW1lIFNlbGVjdGlvbiBTZWN0aW9uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWN0aW9uIj4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24tbGFiZWwiPgogICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXBhbGV0dGUgd3BsYWNlLWljb24tcGFsZXR0ZSI+PC9pPgogICAgICAgICAgICAke1V0aWxzLnQoJ3RoZW1lU2V0dGluZ3MnKX0KICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbi13cmFwcGVyIj4KICAgICAgICAgICAgPHNlbGVjdCBpZD0idGhlbWVTZWxlY3QiIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VsZWN0Ij4KICAgICAgICAgICAgICAke09iamVjdC5rZXlzKENPTkZJRy5USEVNRVMpCiAgICAgICAgICAgICAgICAubWFwKAogICAgICAgICAgICAgICAgICAodGhlbWVOYW1lKSA9PgogICAgICAgICAgICAgICAgICAgIGA8b3B0aW9uIHZhbHVlPSIke3RoZW1lTmFtZX0iICR7CiAgICAgICAgICAgICAgICAgICAgICBDT05GSUcuY3VycmVudFRoZW1lID09PSB0aGVtZU5hbWUgPyAnc2VsZWN0ZWQnIDogJycKICAgICAgICAgICAgICAgICAgICB9IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj4ke3RoZW1lTmFtZX08L29wdGlvbj5gCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAuam9pbignJyl9CiAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDwhLS0gTGFuZ3VhZ2UgU2VsZWN0aW9uIFNlY3Rpb24gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNldHRpbmdzLXNlY3Rpb24iPgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtc2VjdGlvbi1sYWJlbCI+CiAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZ2xvYmUgd3BsYWNlLWljb24tZ2xvYmUiPjwvaT4KICAgICAgICAgICAgJHtVdGlscy50KCdsYW5ndWFnZScpfQogICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWN0aW9uLXdyYXBwZXIiPgogICAgICAgICAgICA8c2VsZWN0IGlkPSJsYW5ndWFnZVNlbGVjdCIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1zZWxlY3QiPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InZpIiAke3N0YXRlLmxhbmd1YWdlID09PSAndmknID8gJ3NlbGVjdGVkJyA6ICcnfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+Hu/Cfh7MgVGnhur9uZyBWaeG7h3Q8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJpZCIgJHtzdGF0ZS5sYW5ndWFnZSA9PT0gJ2lkJyA/ICdzZWxlY3RlZCcgOiAnJ30gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfh67wn4epIEJhaGFzYSBJbmRvbmVzaWE8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJydSIgJHtzdGF0ZS5sYW5ndWFnZSA9PT0gJ3J1JyA/ICdzZWxlY3RlZCcgOiAnJ30gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfh7fwn4e6INCg0YPRgdGB0LrQuNC5PC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idWsiICR7c3RhdGUubGFuZ3VhZ2UgPT09ICd1aycgPyAnc2VsZWN0ZWQnIDogJyd9IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7wn4e68J+HpiDQo9C60YDQsNGX0L3RgdGM0LrQsDwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImVuIiAke3N0YXRlLmxhbmd1YWdlID09PSAnZW4nID8gJ3NlbGVjdGVkJyA6ICcnfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+HuvCfh7ggRW5nbGlzaDwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InB0IiAke3N0YXRlLmxhbmd1YWdlID09PSAncHQnID8gJ3NlbGVjdGVkJyA6ICcnfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+Hp/Cfh7cgUG9ydHVndcOqczwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImZyIiAke3N0YXRlLmxhbmd1YWdlID09PSAnZnInID8gJ3NlbGVjdGVkJyA6ICcnfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+Hq/Cfh7cgRnJhbsOnYWlzPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0idHIiICR7c3RhdGUubGFuZ3VhZ2UgPT09ICd0cicgPyAnc2VsZWN0ZWQnIDogJyd9IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7wn4e58J+HtyBUw7xya8OnZTwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InpoLUNOIiAke3N0YXRlLmxhbmd1YWdlID09PSAnemgtQ04nID8gJ3NlbGVjdGVkJyA6ICcnfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+HqPCfh7Mg566A5L2T5Lit5paHPC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iemgtVFciICR7c3RhdGUubGFuZ3VhZ2UgPT09ICd6aC1UVycgPyAnc2VsZWN0ZWQnIDogJyd9IGNsYXNzPSJ3cGxhY2Utc2V0dGluZ3Mtb3B0aW9uIj7wn4e58J+HvCDnuYHpq5TkuK3mloc8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJqYSIgJHtzdGF0ZS5sYW5ndWFnZSA9PT0gJ2phJyA/ICdzZWxlY3RlZCcgOiAnJ30gY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1vcHRpb24iPvCfh6/wn4e1IOaXpeacrOiqnjwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImtvIiAke3N0YXRlLmxhbmd1YWdlID09PSAna28nID8gJ3NlbGVjdGVkJyA6ICcnfSBjbGFzcz0id3BsYWNlLXNldHRpbmdzLW9wdGlvbiI+8J+HsPCfh7cg7ZWc6rWt7Ja0PC9vcHRpb24+CiAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1mb290ZXIiPgogICAgICAgICAgICAgPGJ1dHRvbiBpZD0iYXBwbHlTZXR0aW5nc0J0biIgY2xhc3M9IndwbGFjZS1zZXR0aW5ncy1hcHBseS1idG4iPgogICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2hlY2siPjwvaT4gJHtVdGlscy50KCdhcHBseVNldHRpbmdzJyl9CiAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KCiAgICAgIDxzdHlsZT4KICAgICAgICBAa2V5ZnJhbWVzIHNwaW4gewogICAgICAgICAgZnJvbSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9CiAgICAgICAgICB0byB7IHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH0KICAgICAgICB9CgogICAgICAgIEBrZXlmcmFtZXMgc2V0dGluZ3Mtc2xpZGUtaW4gewogICAgICAgICAgZnJvbSB7CiAgICAgICAgICAgIG9wYWNpdHk6IDA7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDAuOSk7CiAgICAgICAgICB9CiAgICAgICAgICB0byB7CiAgICAgICAgICAgIG9wYWNpdHk6IDE7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDEpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgQGtleWZyYW1lcyBzZXR0aW5ncy1mYWRlLW91dCB7CiAgICAgICAgICBmcm9tIHsKICAgICAgICAgICAgb3BhY2l0eTogMTsKICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoMSk7CiAgICAgICAgICB9CiAgICAgICAgICB0byB7CiAgICAgICAgICAgIG9wYWNpdHk6IDA7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDAuOSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAjc3BlZWRTbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iLCAjY29vbGRvd25TbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iLCAjb3ZlcmxheU9wYWNpdHlTbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHsKICAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsKICAgICAgICAgIHdpZHRoOiAxOHB4OwogICAgICAgICAgaGVpZ2h0OiAxOHB4OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlOwogICAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7CiAgICAgICAgICBib3gtc2hhZG93OiAwIDNweCA2cHggcmdiYSgwLDAsMCwwLjMpLCAwIDAgMCAycHggIzRmYWNmZTsKICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2U7CiAgICAgICAgfQoKICAgICAgICAjc3BlZWRTbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iOmhvdmVyLCAjY29vbGRvd25TbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iOmhvdmVyLCAjb3ZlcmxheU9wYWNpdHlTbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iOmhvdmVyIHsKICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4yKTsKICAgICAgICAgIGJveC1zaGFkb3c6IDAgNHB4IDhweCByZ2JhKDAsMCwwLDAuNCksIDAgMCAwIDNweCAjNGZhY2ZlOwogICAgICAgIH0KCiAgICAgICAgI3NwZWVkU2xpZGVyOjotbW96LXJhbmdlLXRodW1iLCAjY29vbGRvd25TbGlkZXI6Oi1tb3otcmFuZ2UtdGh1bWIsICNvdmVybGF5T3BhY2l0eVNsaWRlcjo6LW1vei1yYW5nZS10aHVtYiB7CiAgICAgICAgICB3aWR0aDogMThweDsKICAgICAgICAgIGhlaWdodDogMThweDsKICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTsKICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlOwogICAgICAgICAgYm94LXNoYWRvdzogMCAzcHggNnB4IHJnYmEoMCwwLDAsMC4zKSwgMCAwIDAgMnB4ICM0ZmFjZmU7CiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgICAgICBib3JkZXI6IG5vbmU7CiAgICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlOwogICAgICAgIH0KCiAgICAgICAgI3RoZW1lU2VsZWN0OmhvdmVyLCAjbGFuZ3VhZ2VTZWxlY3Q6aG92ZXIgewogICAgICAgICAgYm9yZGVyLWNvbG9yOiByZ2JhKDI1NSwyNTUsMjU1LDAuNCk7CiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuMik7CiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTFweCk7CiAgICAgICAgICBib3gtc2hhZG93OiAwIDVweCAxNXB4IHJnYmEoMCwwLDAsMC4xNSk7CiAgICAgICAgfQoKICAgICAgICAjdGhlbWVTZWxlY3Q6Zm9jdXMsICNsYW5ndWFnZVNlbGVjdDpmb2N1cyB7CiAgICAgICAgICBib3JkZXItY29sb3I6ICM0ZmFjZmU7CiAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSg3OSwgMTcyLCAyNTQsIDAuMyk7CiAgICAgICAgfQoKICAgICAgICAjdGhlbWVTZWxlY3Qgb3B0aW9uLCAjbGFuZ3VhZ2VTZWxlY3Qgb3B0aW9uIHsKICAgICAgICAgIGJhY2tncm91bmQ6ICMyZDM3NDg7CiAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICBwYWRkaW5nOiAxMHB4OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4OwogICAgICAgIH0KCiAgICAgICAgI3RoZW1lU2VsZWN0IG9wdGlvbjpob3ZlciwgI2xhbmd1YWdlU2VsZWN0IG9wdGlvbjpob3ZlciB7CiAgICAgICAgICBiYWNrZ3JvdW5kOiAjNGE1NTY4OwogICAgICAgIH0KCiAgICAgICAgLndwbGFjZS1kcmFnZ2luZyB7CiAgICAgICAgICBvcGFjaXR5OiAwLjk7CiAgICAgICAgICBib3gtc2hhZG93OiAwIDMwcHggNjBweCByZ2JhKDAsMCwwLDAuNCksIDAgMCAwIDFweCByZ2JhKDI1NSwyNTUsMjU1LDAuMik7CiAgICAgICAgICB0cmFuc2l0aW9uOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLndwbGFjZS1zZXR0aW5ncy1oZWFkZXI6aG92ZXIgewogICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjE1KSAhaW1wb3J0YW50OwogICAgICAgIH0KCiAgICAgICAgLndwbGFjZS1zZXR0aW5ncy1oZWFkZXI6YWN0aXZlIHsKICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LDI1NSwyNTUsMC4yKSAhaW1wb3J0YW50OwogICAgICAgIH0KCiAgICAgICAgLyogQ3VzdG9tIFNjcm9sbGJhciBmb3IgQ29udGVudCBBcmVhICovCiAgICAgICAgLndwbGFjZS1jb250ZW50Ojotd2Via2l0LXNjcm9sbGJhciB7CiAgICAgICAgICB3aWR0aDogNnB4OwogICAgICAgIH0KCiAgICAgICAgLndwbGFjZS1jb250ZW50Ojotd2Via2l0LXNjcm9sbGJhci10cmFjayB7CiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwyNTUsMjU1LDAuMSk7CiAgICAgICAgICBib3JkZXItcmFkaXVzOiAzcHg7CiAgICAgICAgfQoKICAgICAgICAud3BsYWNlLWNvbnRlbnQ6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsKICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LDI1NSwyNTUsMC4zKTsKICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDNweDsKICAgICAgICB9CgogICAgICAgIC53cGxhY2UtY29udGVudDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIgewogICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsMjU1LDI1NSwwLjUpOwogICAgICAgIH0KICAgICAgPC9zdHlsZT4KICAgIGA7CgogICAgY29uc3QgcmVzaXplQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICByZXNpemVDb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc2l6ZS1jb250YWluZXInOwogICAgcmVzaXplQ29udGFpbmVyLmlubmVySFRNTCA9IGAKICAgICAgPGgzIGNsYXNzPSJyZXNpemUtZGlhbG9nLXRpdGxlIiBzdHlsZT0iY29sb3I6ICR7dGhlbWUudGV4dH0iPiR7VXRpbHMudCgncmVzaXplSW1hZ2UnKX08L2gzPgogICAgICA8ZGl2IGNsYXNzPSJyZXNpemUtY29udHJvbHMiPgogICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWNvbnRyb2wtbGFiZWwiPgogICAgICAgICAgV2lkdGg6IDxzcGFuIGlkPSJ3aWR0aFZhbHVlIj4wPC9zcGFuPnB4CiAgICAgICAgICA8aW5wdXQgdHlwZT0icmFuZ2UiIGlkPSJ3aWR0aFNsaWRlciIgY2xhc3M9InJlc2l6ZS1zbGlkZXIiIG1pbj0iMTAiIG1heD0iNTAwIiB2YWx1ZT0iMTAwIj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWNvbnRyb2wtbGFiZWwiPgogICAgICAgICAgSGVpZ2h0OiA8c3BhbiBpZD0iaGVpZ2h0VmFsdWUiPjA8L3NwYW4+cHgKICAgICAgICAgIDxpbnB1dCB0eXBlPSJyYW5nZSIgaWQ9ImhlaWdodFNsaWRlciIgY2xhc3M9InJlc2l6ZS1zbGlkZXIiIG1pbj0iMTAiIG1heD0iNTAwIiB2YWx1ZT0iMTAwIj4KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWNoZWNrYm94LWxhYmVsIj4KICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImtlZXBBc3BlY3QiIGNoZWNrZWQ+CiAgICAgICAgICAke1V0aWxzLnQoJ2tlZXBBc3BlY3RSYXRpbycpfQogICAgICAgIDwvbGFiZWw+CiAgICAgICAgPGxhYmVsIGNsYXNzPSJyZXNpemUtY2hlY2tib3gtbGFiZWwiPgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJwYWludFdoaXRlVG9nZ2xlIiBjaGVja2VkPgogICAgICAgICAgICAke1V0aWxzLnQoJ3BhaW50V2hpdGVQaXhlbHMnKX0KICAgICAgICA8L2xhYmVsPgogICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWNoZWNrYm94LWxhYmVsIj4KICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icGFpbnRUcmFuc3BhcmVudFRvZ2dsZSIgY2hlY2tlZD4KICAgICAgICAgICAgJHtVdGlscy50KCdwYWludFRyYW5zcGFyZW50UGl4ZWxzJyl9CiAgICAgICAgPC9sYWJlbD4KICAgICAgICA8ZGl2IGNsYXNzPSJyZXNpemUtem9vbS1jb250cm9scyI+CiAgICAgICAgICA8YnV0dG9uIGlkPSJ6b29tT3V0QnRuIiBjbGFzcz0id3BsYWNlLWJ0biByZXNpemUtem9vbS1idG4iIHRpdGxlPSIke1V0aWxzLnQoCiAgICAgICAgICAgICd6b29tT3V0JwogICAgICAgICAgKX0iPjxpIGNsYXNzPSJmYXMgZmEtc2VhcmNoLW1pbnVzIj48L2k+PC9idXR0b24+CiAgICAgICAgICA8aW5wdXQgdHlwZT0icmFuZ2UiIGlkPSJ6b29tU2xpZGVyIiBjbGFzcz0icmVzaXplLXNsaWRlciByZXNpemUtem9vbS1zbGlkZXIiIG1pbj0iMC4xIiBtYXg9IjIwIiB2YWx1ZT0iMSIgc3RlcD0iMC4wNSI+CiAgICAgICAgICA8YnV0dG9uIGlkPSJ6b29tSW5CdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHJlc2l6ZS16b29tLWJ0biIgdGl0bGU9IiR7VXRpbHMudCgKICAgICAgICAgICAgJ3pvb21JbicKICAgICAgICAgICl9Ij48aSBjbGFzcz0iZmFzIGZhLXNlYXJjaC1wbHVzIj48L2k+PC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGlkPSJ6b29tRml0QnRuIiBjbGFzcz0id3BsYWNlLWJ0biByZXNpemUtem9vbS1idG4iIHRpdGxlPSIke1V0aWxzLnQoCiAgICAgICAgICAgICdmaXRUb1ZpZXcnCiAgICAgICAgICApfSI+JHtVdGlscy50KCdmaXQnKX08L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9Inpvb21BY3R1YWxCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHJlc2l6ZS16b29tLWJ0biIgdGl0bGU9IiR7VXRpbHMudCgKICAgICAgICAgICAgJ2FjdHVhbFNpemUnCiAgICAgICAgICApfSI+JHtVdGlscy50KCdodW5kcmVkJyl9PC9idXR0b24+CiAgICAgICAgICA8YnV0dG9uIGlkPSJwYW5Nb2RlQnRuIiBjbGFzcz0id3BsYWNlLWJ0biByZXNpemUtem9vbS1idG4iIHRpdGxlPSIke1V0aWxzLnQoJ3Bhbk1vZGUnKX0iPgogICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWhhbmQtcGFwZXIiPjwvaT4KICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgPHNwYW4gaWQ9Inpvb21WYWx1ZSIgY2xhc3M9InJlc2l6ZS16b29tLXZhbHVlIj4xMDAlPC9zcGFuPgogICAgICAgICAgPGRpdiBpZD0iY2FtZXJhSGVscCIgY2xhc3M9InJlc2l6ZS1jYW1lcmEtaGVscCI+CiAgICAgICAgICAgIERyYWcgdG8gcGFuIOKAoiBQaW5jaCB0byB6b29tIOKAoiBEb3VibGXigJF0YXAgdG8gem9vbQogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0icmVzaXplLXByZXZpZXctd3JhcHBlciI+CiAgICAgICAgICA8ZGl2IGlkPSJyZXNpemVQYW5TdGFnZSIgY2xhc3M9InJlc2l6ZS1wYW4tc3RhZ2UiPgogICAgICAgICAgICA8ZGl2IGlkPSJyZXNpemVDYW52YXNTdGFjayIgY2xhc3M9InJlc2l6ZS1jYW52YXMtc3RhY2sgcmVzaXplLWNhbnZhcy1wb3NpdGlvbmVkIj4KICAgICAgICAgICAgICA8Y2FudmFzIGlkPSJyZXNpemVDYW52YXMiIGNsYXNzPSJyZXNpemUtYmFzZS1jYW52YXMiPjwvY2FudmFzPgogICAgICAgICAgICAgIDxjYW52YXMgaWQ9Im1hc2tDYW52YXMiIGNsYXNzPSJyZXNpemUtbWFzay1jYW52YXMiPjwvY2FudmFzPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0icmVzaXplLXRvb2xzIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyZXNpemUtdG9vbHMtY29udGFpbmVyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJlc2l6ZS1icnVzaC1jb250cm9scyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLWJydXNoLWNvbnRyb2wiPgogICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyZXNpemUtdG9vbC1sYWJlbCI+QnJ1c2g8L2xhYmVsPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLXRvb2wtaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9Im1hc2tCcnVzaFNpemUiIHR5cGU9InJhbmdlIiBtaW49IjEiIG1heD0iNyIgc3RlcD0iMSIgdmFsdWU9IjEiIGNsYXNzPSJyZXNpemUtdG9vbC1zbGlkZXIiPgogICAgICAgICAgICAgICAgICA8c3BhbiBpZD0ibWFza0JydXNoU2l6ZVZhbHVlIiBjbGFzcz0icmVzaXplLXRvb2wtdmFsdWUiPjE8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLWJydXNoLWNvbnRyb2wiPgogICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLXRvb2wtbGFiZWwiPlJvdy9jb2wgc2l6ZTwvbGFiZWw+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLXRvb2wtaW5wdXQtZ3JvdXAiPgogICAgICAgICAgICAgICAgPGlucHV0IGlkPSJyb3dDb2xTaXplIiB0eXBlPSJyYW5nZSIgbWluPSIxIiBtYXg9IjciIHN0ZXA9IjEiIHZhbHVlPSIxIiBjbGFzcz0icmVzaXplLXRvb2wtc2xpZGVyIj4KICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJyb3dDb2xTaXplVmFsdWUiIGNsYXNzPSJyZXNpemUtdG9vbC12YWx1ZSI+MTwvc3Bhbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9InJlc2l6ZS1tb2RlLWNvbnRyb2xzIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJyZXNpemUtdG9vbC1sYWJlbCI+TW9kZTwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1hc2stbW9kZS1ncm91cCByZXNpemUtbW9kZS1ncm91cCI+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ibWFza01vZGVJZ25vcmUiIGNsYXNzPSJ3cGxhY2UtYnRuIHJlc2l6ZS1tb2RlLWJ0biI+SWdub3JlPC9idXR0b24+CiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ibWFza01vZGVVbmlnbm9yZSIgY2xhc3M9IndwbGFjZS1idG4gcmVzaXplLW1vZGUtYnRuIj5Vbmlnbm9yZTwvYnV0dG9uPgogICAgICAgICAgICAgIDxidXR0b24gaWQ9Im1hc2tNb2RlVG9nZ2xlIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLXByaW1hcnkgcmVzaXplLW1vZGUtYnRuIj5Ub2dnbGU8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxidXR0b24gaWQ9ImNsZWFySWdub3JlZEJ0biIgY2xhc3M9IndwbGFjZS1idG4gcmVzaXplLWNsZWFyLWJ0biIgdGl0bGU9IkNsZWFyIGFsbCBpZ25vcmVkIHBpeGVscyI+Q2xlYXI8L2J1dHRvbj4KICAgICAgICAgIDxidXR0b24gaWQ9ImludmVydE1hc2tCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHJlc2l6ZS1pbnZlcnQtYnRuIiB0aXRsZT0iSW52ZXJ0IG1hc2siPkludmVydDwvYnV0dG9uPgogICAgICAgICAgPHNwYW4gY2xhc3M9InJlc2l6ZS1zaG9ydGN1dC1oZWxwIj5TaGlmdCA9IFJvdyDigKIgQWx0ID0gQ29sdW1uPC9zcGFuPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZWN0aW9uIHJlc2l6ZS1jb2xvci1wYWxldHRlLXNlY3Rpb24iIGlkPSJjb2xvci1wYWxldHRlLXNlY3Rpb24iPgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24tdGl0bGUiPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtcGFsZXR0ZSI+PC9pPiZuYnNwO0NvbG9yIFBhbGV0dGUKICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLWNvbnRyb2xzIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utcm93IHNpbmdsZSI+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWNvbG9yLXRvZ2dsZS1sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJzaG93QWxsQ29sb3JzVG9nZ2xlIiBjbGFzcz0icmVzaXplLWNvbG9yLWNoZWNrYm94Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiR7VXRpbHMudCgnc2hvd0FsbENvbG9yc0luY2x1ZGluZycpfTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utcm93IiBzdHlsZT0iZGlzcGxheTogZmxleDsiPgogICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJzZWxlY3RBbGxCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIiBzdHlsZT0iZmxleDogMTsiPlNlbGVjdCBBbGw8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0idW5zZWxlY3RBbGxCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIiBzdHlsZT0iZmxleDogMTsiPlVuc2VsZWN0IEFsbDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJ1bnNlbGVjdFBhaWRCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIj5VbnNlbGVjdCBQYWlkPC9idXR0b24+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBpZD0iY29sb3JzLWNvbnRhaW5lciIgY2xhc3M9IndwbGFjZS1jb2xvci1ncmlkIj48L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zZWN0aW9uIHJlc2l6ZS1hZHZhbmNlZC1jb2xvci1zZWN0aW9uIiBpZD0iYWR2YW5jZWQtY29sb3Itc2VjdGlvbiI+CiAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXNlY3Rpb24tdGl0bGUiPgogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mbGFzayI+PC9pPiZuYnNwO0FkdmFuY2VkIENvbG9yIE1hdGNoaW5nCiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLWFkdmFuY2VkLWNvbnRyb2xzIj4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWFkdmFuY2VkLWxhYmVsIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlc2l6ZS1hZHZhbmNlZC1sYWJlbC10ZXh0Ij5BbGdvcml0aG08L3NwYW4+CiAgICAgICAgICAgIDxzZWxlY3QgaWQ9ImNvbG9yQWxnb3JpdGhtU2VsZWN0IiBjbGFzcz0icmVzaXplLWFkdmFuY2VkLXNlbGVjdCI+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibGFiIiAkewogICAgICAgICAgICAgICAgc3RhdGUuY29sb3JNYXRjaGluZ0FsZ29yaXRobSA9PT0gJ2xhYicgPyAnc2VsZWN0ZWQnIDogJycKICAgICAgICAgICAgICB9PlBlcmNlcHR1YWwgKExhYik8L29wdGlvbj4KICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibGVnYWN5IiAkewogICAgICAgICAgICAgIHN0YXRlLmNvbG9yTWF0Y2hpbmdBbGdvcml0aG0gPT09ICdsZWdhY3knID8gJ3NlbGVjdGVkJyA6ICcnCiAgICAgICAgICAgIH0+TGVnYWN5IChSR0IpPC9vcHRpb24+CiAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLWFkdmFuY2VkLXRvZ2dsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlc2l6ZS1hZHZhbmNlZC10b2dnbGUtY29udGVudCI+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlc2l6ZS1hZHZhbmNlZC1sYWJlbC10ZXh0Ij5DaHJvbWEgUGVuYWx0eTwvc3Bhbj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXNpemUtYWR2YW5jZWQtZGVzY3JpcHRpb24iPlByZXNlcnZlIHZpdmlkIGNvbG9ycyAoTGFiIG9ubHkpPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJlbmFibGVDaHJvbWFQZW5hbHR5VG9nZ2xlIiAkewogICAgICAgICAgICAgIHN0YXRlLmVuYWJsZUNocm9tYVBlbmFsdHkgPyAnY2hlY2tlZCcgOiAnJwogICAgICAgICAgICB9IGNsYXNzPSJyZXNpemUtYWR2YW5jZWQtY2hlY2tib3giIC8+CiAgICAgICAgICA8L2xhYmVsPgogICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLWNocm9tYS13ZWlnaHQtY29udHJvbCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlc2l6ZS1jaHJvbWEtd2VpZ2h0LWhlYWRlciI+CiAgICAgICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdjaHJvbWFXZWlnaHQnKX08L3NwYW4+CiAgICAgICAgICAgICAgPHNwYW4gaWQ9ImNocm9tYVdlaWdodFZhbHVlIiBjbGFzcz0icmVzaXplLWNocm9tYS13ZWlnaHQtdmFsdWUiPiR7c3RhdGUuY2hyb21hUGVuYWx0eVdlaWdodH08L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8aW5wdXQgdHlwZT0icmFuZ2UiIGlkPSJjaHJvbWFQZW5hbHR5V2VpZ2h0U2xpZGVyIiBtaW49IjAiIG1heD0iMC41IiBzdGVwPSIwLjAxIiB2YWx1ZT0iJHtzdGF0ZS5jaHJvbWFQZW5hbHR5V2VpZ2h0fSIgY2xhc3M9InJlc2l6ZS1jaHJvbWEtd2VpZ2h0LXNsaWRlciIgLz4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGxhYmVsIGNsYXNzPSJyZXNpemUtYWR2YW5jZWQtdG9nZ2xlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLWFkdmFuY2VkLXRvZ2dsZS1jb250ZW50Ij4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmVzaXplLWFkdmFuY2VkLWxhYmVsLXRleHQiPkVuYWJsZSBEaXRoZXJpbmc8L3NwYW4+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmVzaXplLWFkdmFuY2VkLWRlc2NyaXB0aW9uIj5GbG95ZOKAk1N0ZWluYmVyZyBlcnJvciBkaWZmdXNpb24gaW4gcHJldmlldyBhbmQgYXBwbGllZCBvdXRwdXQ8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9ImVuYWJsZURpdGhlcmluZ1RvZ2dsZSIgJHsKICAgICAgICAgICAgICBzdGF0ZS5kaXRoZXJpbmdFbmFibGVkID8gJ2NoZWNrZWQnIDogJycKICAgICAgICAgICAgfSBjbGFzcz0icmVzaXplLWFkdmFuY2VkLWNoZWNrYm94IiAvPgogICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDxkaXYgY2xhc3M9InJlc2l6ZS10aHJlc2hvbGQtY29udHJvbHMiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9InJlc2l6ZS10aHJlc2hvbGQtbGFiZWwiPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyZXNpemUtYWR2YW5jZWQtbGFiZWwtdGV4dCI+VHJhbnNwYXJlbmN5PC9zcGFuPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGlkPSJ0cmFuc3BhcmVuY3lUaHJlc2hvbGRJbnB1dCIgbWluPSIwIiBtYXg9IjI1NSIgdmFsdWU9IiR7c3RhdGUuY3VzdG9tVHJhbnNwYXJlbmN5VGhyZXNob2xkfSIgY2xhc3M9InJlc2l6ZS10aHJlc2hvbGQtaW5wdXQiIC8+CiAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icmVzaXplLXRocmVzaG9sZC1sYWJlbCI+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJlc2l6ZS1hZHZhbmNlZC1sYWJlbC10ZXh0Ij5XaGl0ZSBUaHJlc2g8L3NwYW4+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgaWQ9IndoaXRlVGhyZXNob2xkSW5wdXQiIG1pbj0iMjAwIiBtYXg9IjI1NSIgdmFsdWU9IiR7c3RhdGUuY3VzdG9tV2hpdGVUaHJlc2hvbGR9IiBjbGFzcz0icmVzaXplLXRocmVzaG9sZC1pbnB1dCIgLz4KICAgICAgICAgICAgPC9sYWJlbD4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGJ1dHRvbiBpZD0icmVzZXRBZHZhbmNlZENvbG9yQnRuIiBjbGFzcz0id3BsYWNlLWJ0biByZXNpemUtcmVzZXQtYWR2YW5jZWQtYnRuIj5SZXNldCBBZHZhbmNlZDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9InJlc2l6ZS1idXR0b25zIj4KICAgICAgICA8YnV0dG9uIGlkPSJkb3dubG9hZFByZXZpZXdCdG4iIGNsYXNzPSJ3cGxhY2UtYnRuIHdwbGFjZS1idG4tcHJpbWFyeSI+CiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWRvd25sb2FkIj48L2k+CiAgICAgICAgICA8c3Bhbj4ke1V0aWxzLnQoJ2Rvd25sb2FkUHJldmlldycpfTwvc3Bhbj4KICAgICAgICA8L2J1dHRvbj4KICAgICAgICA8YnV0dG9uIGlkPSJjb25maXJtUmVzaXplIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLXN0YXJ0Ij4KICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY2hlY2siPjwvaT4KICAgICAgICAgIDxzcGFuPiR7VXRpbHMudCgnYXBwbHknKX08L3NwYW4+CiAgICAgICAgPC9idXR0b24+CiAgICAgICAgPGJ1dHRvbiBpZD0iY2FuY2VsUmVzaXplIiBjbGFzcz0id3BsYWNlLWJ0biB3cGxhY2UtYnRuLXN0b3AiPgogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS10aW1lcyI+PC9pPgogICAgICAgICAgPHNwYW4+JHtVdGlscy50KCdjYW5jZWwnKX08L3NwYW4+CiAgICAgICAgPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgYDsKCiAgICBjb25zdCByZXNpemVPdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICByZXNpemVPdmVybGF5LmNsYXNzTmFtZSA9ICdyZXNpemUtb3ZlcmxheSc7CgogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZXNpemVPdmVybGF5KTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVzaXplQ29udGFpbmVyKTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3RhdHNDb250YWluZXIpOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzZXR0aW5nc0NvbnRhaW5lcik7CgogICAgLy8gU2hvdyB0aGUgbWFpbiBjb250YWluZXIgYWZ0ZXIgYWxsIGVsZW1lbnRzIGFyZSBhcHBlbmRlZAogICAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwoKICAgIGNvbnN0IHVwbG9hZEJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjdXBsb2FkQnRuJyk7CiAgICBjb25zdCByZXNpemVCdG4gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3Jlc2l6ZUJ0bicpOwogICAgY29uc3Qgc2VsZWN0UG9zQnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzZWxlY3RQb3NCdG4nKTsKICAgIGNvbnN0IHN0YXJ0QnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzdGFydEJ0bicpOwogICAgY29uc3Qgc3RvcEJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc3RvcEJ0bicpOwogICAgY29uc3Qgc2F2ZUJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc2F2ZUJ0bicpOwogICAgY29uc3QgbG9hZEJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbG9hZEJ0bicpOwogICAgY29uc3Qgc2F2ZVRvRmlsZUJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc2F2ZVRvRmlsZUJ0bicpOwogICAgY29uc3QgbG9hZEZyb21GaWxlQnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNsb2FkRnJvbUZpbGVCdG4nKTsKCiAgICBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLndwbGFjZS1zZWN0aW9uLXRpdGxlJykuZm9yRWFjaCgodGl0bGUpID0+IHsKICAgICAgLy8gQWRkIGEgcmlnaHQtc2lkZSBhcnJvdyBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgIGlmICghdGl0bGUucXVlcnlTZWxlY3RvcignaS5hcnJvdycpKSB7CiAgICAgICAgY29uc3QgYXJyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7CiAgICAgICAgYXJyb3cuY2xhc3NOYW1lID0gJ2ZhcyBmYS1jaGV2cm9uLWRvd24gYXJyb3cnOyAvLyBGb250QXdlc29tZSBkb3duIGFycm93CiAgICAgICAgdGl0bGUuYXBwZW5kQ2hpbGQoYXJyb3cpOwogICAgICB9CgogICAgICAvLyBDbGljayBldmVudCB0byB0b2dnbGUgY29sbGFwc2UvZXhwYW5kIG9mIHRoZSBzZWN0aW9uCiAgICAgIHRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aXRsZS5wYXJlbnRFbGVtZW50OwogICAgICAgIHNlY3Rpb24uY2xhc3NMaXN0LnRvZ2dsZSgnY29sbGFwc2VkJyk7CiAgICAgIH0pOwogICAgfSk7CgogICAgLy8gRGlzYWJsZSBsb2FkL3VwbG9hZCBidXR0b25zIHVudGlsIGluaXRpYWwgc2V0dXAgaXMgY29tcGxldGUgKHN0YXJ0dXAgb25seSkKICAgIGlmIChsb2FkQnRuKSB7CiAgICAgIGxvYWRCdG4uZGlzYWJsZWQgPSAhc3RhdGUuaW5pdGlhbFNldHVwQ29tcGxldGU7CiAgICAgIGxvYWRCdG4udGl0bGUgPSBzdGF0ZS5pbml0aWFsU2V0dXBDb21wbGV0ZQogICAgICAgID8gJycKICAgICAgICA6ICfwn5SEIFdhaXRpbmcgZm9yIGluaXRpYWwgc2V0dXAgdG8gY29tcGxldGUuLi4nOwogICAgfQogICAgaWYgKGxvYWRGcm9tRmlsZUJ0bikgewogICAgICBsb2FkRnJvbUZpbGVCdG4uZGlzYWJsZWQgPSAhc3RhdGUuaW5pdGlhbFNldHVwQ29tcGxldGU7CiAgICAgIGxvYWRGcm9tRmlsZUJ0bi50aXRsZSA9IHN0YXRlLmluaXRpYWxTZXR1cENvbXBsZXRlCiAgICAgICAgPyAnJwogICAgICAgIDogJ/CflIQgV2FpdGluZyBmb3IgaW5pdGlhbCBzZXR1cCB0byBjb21wbGV0ZS4uLic7CiAgICB9CiAgICBpZiAodXBsb2FkQnRuKSB7CiAgICAgIHVwbG9hZEJ0bi5kaXNhYmxlZCA9ICFzdGF0ZS5pbml0aWFsU2V0dXBDb21wbGV0ZTsKICAgICAgdXBsb2FkQnRuLnRpdGxlID0gc3RhdGUuaW5pdGlhbFNldHVwQ29tcGxldGUKICAgICAgICA/ICcnCiAgICAgICAgOiAn8J+UhCBXYWl0aW5nIGZvciBpbml0aWFsIHNldHVwIHRvIGNvbXBsZXRlLi4uJzsKICAgIH0KCiAgICBjb25zdCBtaW5pbWl6ZUJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbWluaW1pemVCdG4nKTsKICAgIGNvbnN0IGNvbXBhY3RCdG4gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI2NvbXBhY3RCdG4nKTsKICAgIGNvbnN0IHN0YXRzQnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzdGF0c0J0bicpOwogICAgY29uc3QgdG9nZ2xlT3ZlcmxheUJ0biA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjdG9nZ2xlT3ZlcmxheUJ0bicpOwogICAgY29uc3Qgc3RhdHVzVGV4dCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc3RhdHVzVGV4dCcpOwogICAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI3Byb2dyZXNzQmFyJyk7CiAgICBjb25zdCBzdGF0c0FyZWEgPSBzdGF0c0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc3RhdHNBcmVhJyk7CiAgICBjb25zdCBjb250ZW50ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy53cGxhY2UtY29udGVudCcpOwogICAgY29uc3QgY2xvc2VTdGF0c0J0biA9IHN0YXRzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjbG9zZVN0YXRzQnRuJyk7CiAgICBjb25zdCByZWZyZXNoQ2hhcmdlc0J0biA9IHN0YXRzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNyZWZyZXNoQ2hhcmdlc0J0bicpOwogICAgY29uc3QgY29vbGRvd25TbGlkZXIgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignI2Nvb2xkb3duU2xpZGVyJyk7CiAgICBjb25zdCBjb29sZG93bklucHV0ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjb29sZG93bklucHV0Jyk7CiAgICBjb25zdCBjb29sZG93bkRlY3JlYXNlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjb29sZG93bkRlY3JlYXNlJyk7CiAgICBjb25zdCBjb29sZG93bkluY3JlYXNlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjb29sZG93bkluY3JlYXNlJyk7CiAgICBjb25zdCBjb29sZG93blZhbHVlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjb29sZG93blZhbHVlJyk7CgogICAgaWYgKCF1cGxvYWRCdG4gfHwgIXNlbGVjdFBvc0J0biB8fCAhc3RhcnRCdG4gfHwgIXN0b3BCdG4pIHsKICAgICAgY29uc29sZS5lcnJvcignU29tZSBVSSBlbGVtZW50cyBub3QgZm91bmQ6JywgewogICAgICAgIHVwbG9hZEJ0bjogISF1cGxvYWRCdG4sCiAgICAgICAgc2VsZWN0UG9zQnRuOiAhIXNlbGVjdFBvc0J0biwKICAgICAgICBzdGFydEJ0bjogISFzdGFydEJ0biwKICAgICAgICBzdG9wQnRuOiAhIXN0b3BCdG4sCiAgICAgIH0pOwogICAgfQoKICAgIGlmICghc3RhdHNDb250YWluZXIgfHwgIXN0YXRzQXJlYSB8fCAhY2xvc2VTdGF0c0J0bikgewogICAgICAvLyBOb3RlOiBiYXNlIENTUyBub3cgYWxpZ25zIHdpdGggdGhpcyBsYXlvdXQ6IG1haW4gcGFuZWwgYXQgbGVmdDoyMHB4ICh3aWR0aCAyODApLCBzdGF0cyBhdCBsZWZ0OjMzMHB4LgogICAgfQoKICAgIGNvbnN0IGhlYWRlciA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcud3BsYWNlLWhlYWRlcicpOwoKICAgIG1ha2VEcmFnZ2FibGUoY29udGFpbmVyKTsKCiAgICBmdW5jdGlvbiBtYWtlRHJhZ2dhYmxlKGVsZW1lbnQpIHsKICAgICAgbGV0IHBvczEgPSAwLAogICAgICAgIHBvczIgPSAwLAogICAgICAgIHBvczMgPSAwLAogICAgICAgIHBvczQgPSAwOwogICAgICBsZXQgaXNEcmFnZ2luZyA9IGZhbHNlOwogICAgICBjb25zdCBoZWFkZXIgPQogICAgICAgIGVsZW1lbnQucXVlcnlTZWxlY3RvcignLndwbGFjZS1oZWFkZXInKSB8fCBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cGxhY2Utc2V0dGluZ3MtaGVhZGVyJyk7CgogICAgICBpZiAoIWhlYWRlcikgewogICAgICAgIGNvbnNvbGUud2FybignTm8gZHJhZ2dhYmxlIGhlYWRlciBmb3VuZCBmb3IgZWxlbWVudDonLCBlbGVtZW50KTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGhlYWRlci5vbm1vdXNlZG93biA9IGRyYWdNb3VzZURvd247CgogICAgICBmdW5jdGlvbiBkcmFnTW91c2VEb3duKGUpIHsKICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLndwbGFjZS1oZWFkZXItYnRuJykgfHwgZS50YXJnZXQuY2xvc2VzdCgnYnV0dG9uJykpIHJldHVybjsKCiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIGlzRHJhZ2dpbmcgPSB0cnVlOwoKICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKCiAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7CiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSByZWN0LnRvcCArICdweCc7CiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcmVjdC5sZWZ0ICsgJ3B4JzsKCiAgICAgICAgcG9zMyA9IGUuY2xpZW50WDsKICAgICAgICBwb3M0ID0gZS5jbGllbnRZOwogICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnd3BsYWNlLWRyYWdnaW5nJyk7CiAgICAgICAgZG9jdW1lbnQub25tb3VzZXVwID0gY2xvc2VEcmFnRWxlbWVudDsKICAgICAgICBkb2N1bWVudC5vbm1vdXNlbW92ZSA9IGVsZW1lbnREcmFnOwoKICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSc7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGVsZW1lbnREcmFnKGUpIHsKICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjsKCiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIHBvczEgPSBwb3MzIC0gZS5jbGllbnRYOwogICAgICAgIHBvczIgPSBwb3M0IC0gZS5jbGllbnRZOwogICAgICAgIHBvczMgPSBlLmNsaWVudFg7CiAgICAgICAgcG9zNCA9IGUuY2xpZW50WTsKCiAgICAgICAgbGV0IG5ld1RvcCA9IGVsZW1lbnQub2Zmc2V0VG9wIC0gcG9zMjsKICAgICAgICBsZXQgbmV3TGVmdCA9IGVsZW1lbnQub2Zmc2V0TGVmdCAtIHBvczE7CgogICAgICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgIGNvbnN0IG1heFRvcCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHJlY3QuaGVpZ2h0OwogICAgICAgIGNvbnN0IG1heExlZnQgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIHJlY3Qud2lkdGg7CgogICAgICAgIG5ld1RvcCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG5ld1RvcCwgbWF4VG9wKSk7CiAgICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG5ld0xlZnQsIG1heExlZnQpKTsKCiAgICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBuZXdUb3AgKyAncHgnOwogICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IG5ld0xlZnQgKyAncHgnOwogICAgICB9CgogICAgICBmdW5jdGlvbiBjbG9zZURyYWdFbGVtZW50KCkgewogICAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTsKICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3dwbGFjZS1kcmFnZ2luZycpOwogICAgICAgIGRvY3VtZW50Lm9ubW91c2V1cCA9IG51bGw7CiAgICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSBudWxsOwogICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudXNlclNlbGVjdCA9ICcnOwogICAgICB9CiAgICB9CgogICAgbWFrZURyYWdnYWJsZShzdGF0c0NvbnRhaW5lcik7CiAgICBtYWtlRHJhZ2dhYmxlKGNvbnRhaW5lcik7CgogICAgaWYgKHN0YXRzQnRuICYmIGNsb3NlU3RhdHNCdG4pIHsKICAgICAgc3RhdHNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gc3RhdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnOwogICAgICAgIGlmIChpc1Zpc2libGUpIHsKICAgICAgICAgIHN0YXRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICBzdGF0c0J0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS1jaGFydC1iYXIiPjwvaT4nOwogICAgICAgICAgc3RhdHNCdG4udGl0bGUgPSBVdGlscy50KCdzaG93U3RhdHMnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc3RhdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICBzdGF0c0J0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS1jaGFydC1saW5lIj48L2k+JzsKICAgICAgICAgIHN0YXRzQnRuLnRpdGxlID0gVXRpbHMudCgnaGlkZVN0YXRzJyk7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGNsb3NlU3RhdHNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgc3RhdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICBzdGF0c0J0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS1jaGFydC1iYXIiPjwvaT4nOwogICAgICAgIHN0YXRzQnRuLnRpdGxlID0gVXRpbHMudCgnc2hvd1N0YXRzJyk7CiAgICAgIH0pOwoKICAgICAgaWYgKHJlZnJlc2hDaGFyZ2VzQnRuKSB7CiAgICAgICAgcmVmcmVzaENoYXJnZXNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7CiAgICAgICAgICByZWZyZXNoQ2hhcmdlc0J0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS1zcGlubmVyIGZhLXNwaW4iPjwvaT4nOwogICAgICAgICAgcmVmcmVzaENoYXJnZXNCdG4uZGlzYWJsZWQgPSB0cnVlOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVN0YXRzKHRydWUpOwogICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVmcmVzaGluZyBjaGFyZ2VzOicsIGVycm9yKTsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIHJlZnJlc2hDaGFyZ2VzQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLXN5bmMiPjwvaT4nOwogICAgICAgICAgICByZWZyZXNoQ2hhcmdlc0J0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgICBpZiAoc3RhdHNDb250YWluZXIgJiYgc3RhdHNCdG4pIHsKICAgICAgLy8gU3RhdHMgY29udGFpbmVyIHN0YXJ0cyBoaWRkZW4gLSB1c2VyIGNsaWNrcyBidXR0b24gdG8gc2hvdwogICAgICBzdGF0c0J0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS1jaGFydC1iYXIiPjwvaT4nOwogICAgICBzdGF0c0J0bi50aXRsZSA9IFV0aWxzLnQoJ3Nob3dTdGF0cycpOwogICAgfQoKICAgIGNvbnN0IHNldHRpbmdzQnRuID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzZXR0aW5nc0J0bicpOwogICAgY29uc3QgY2xvc2VTZXR0aW5nc0J0biA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjbG9zZVNldHRpbmdzQnRuJyk7CiAgICBjb25zdCBhcHBseVNldHRpbmdzQnRuID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI2FwcGx5U2V0dGluZ3NCdG4nKTsKCiAgICBpZiAoc2V0dGluZ3NCdG4gJiYgY2xvc2VTZXR0aW5nc0J0biAmJiBhcHBseVNldHRpbmdzQnRuKSB7CiAgICAgIHNldHRpbmdzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNldHRpbmdzQ29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygnc2hvdycpOwogICAgICAgIGlmIChpc1Zpc2libGUpIHsKICAgICAgICAgIHNldHRpbmdzQ29udGFpbmVyLnN0eWxlLmFuaW1hdGlvbiA9ICdzZXR0aW5ncy1mYWRlLW91dCAwLjNzIGVhc2Utb3V0IGZvcndhcmRzJzsKICAgICAgICAgIHNldHRpbmdzQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTsKICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICBzZXR0aW5nc0NvbnRhaW5lci5zdHlsZS5hbmltYXRpb24gPSAnJzsKICAgICAgICAgIH0sIDMwMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNldHRpbmdzQ29udGFpbmVyLnN0eWxlLnRvcCA9ICc1MCUnOwogICAgICAgICAgc2V0dGluZ3NDb250YWluZXIuc3R5bGUubGVmdCA9ICc1MCUnOwogICAgICAgICAgc2V0dGluZ3NDb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKSc7CiAgICAgICAgICBzZXR0aW5nc0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7CiAgICAgICAgICBzZXR0aW5nc0NvbnRhaW5lci5zdHlsZS5hbmltYXRpb24gPSAnc2V0dGluZ3Mtc2xpZGUtaW4gMC40cyBlYXNlLW91dCc7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGNsb3NlU2V0dGluZ3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgc2V0dGluZ3NDb250YWluZXIuc3R5bGUuYW5pbWF0aW9uID0gJ3NldHRpbmdzLWZhZGUtb3V0IDAuM3MgZWFzZS1vdXQgZm9yd2FyZHMnOwogICAgICAgIHNldHRpbmdzQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIHNldHRpbmdzQ29udGFpbmVyLnN0eWxlLmFuaW1hdGlvbiA9ICcnOwogICAgICAgICAgc2V0dGluZ3NDb250YWluZXIuc3R5bGUudG9wID0gJzUwJSc7CiAgICAgICAgICBzZXR0aW5nc0NvbnRhaW5lci5zdHlsZS5sZWZ0ID0gJzUwJSc7CiAgICAgICAgICBzZXR0aW5nc0NvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKC01MCUsIC01MCUpJzsKICAgICAgICB9LCAzMDApOwogICAgICB9KTsKCiAgICAgIGFwcGx5U2V0dGluZ3NCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgLy8gU3luYyBhZHZhbmNlZCBzZXR0aW5ncyBiZWZvcmUgc2F2ZQogICAgICAgIGNvbnN0IGNvbG9yQWxnb3JpdGhtU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbG9yQWxnb3JpdGhtU2VsZWN0Jyk7CiAgICAgICAgaWYgKGNvbG9yQWxnb3JpdGhtU2VsZWN0KSBzdGF0ZS5jb2xvck1hdGNoaW5nQWxnb3JpdGhtID0gY29sb3JBbGdvcml0aG1TZWxlY3QudmFsdWU7CiAgICAgICAgY29uc3QgZW5hYmxlQ2hyb21hUGVuYWx0eVRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmFibGVDaHJvbWFQZW5hbHR5VG9nZ2xlJyk7CiAgICAgICAgaWYgKGVuYWJsZUNocm9tYVBlbmFsdHlUb2dnbGUpCiAgICAgICAgICBzdGF0ZS5lbmFibGVDaHJvbWFQZW5hbHR5ID0gZW5hYmxlQ2hyb21hUGVuYWx0eVRvZ2dsZS5jaGVja2VkOwogICAgICAgIGNvbnN0IGNocm9tYVBlbmFsdHlXZWlnaHRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hyb21hUGVuYWx0eVdlaWdodFNsaWRlcicpOwogICAgICAgIGlmIChjaHJvbWFQZW5hbHR5V2VpZ2h0U2xpZGVyKQogICAgICAgICAgc3RhdGUuY2hyb21hUGVuYWx0eVdlaWdodCA9IHBhcnNlRmxvYXQoY2hyb21hUGVuYWx0eVdlaWdodFNsaWRlci52YWx1ZSkgfHwgMC4xNTsKICAgICAgICBjb25zdCB0cmFuc3BhcmVuY3lUaHJlc2hvbGRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmFuc3BhcmVuY3lUaHJlc2hvbGRJbnB1dCcpOwogICAgICAgIGlmICh0cmFuc3BhcmVuY3lUaHJlc2hvbGRJbnB1dCkgewogICAgICAgICAgY29uc3QgdiA9IHBhcnNlSW50KHRyYW5zcGFyZW5jeVRocmVzaG9sZElucHV0LnZhbHVlLCAxMCk7CiAgICAgICAgICBpZiAoIWlzTmFOKHYpICYmIHYgPj0gMCAmJiB2IDw9IDI1NSkgc3RhdGUuY3VzdG9tVHJhbnNwYXJlbmN5VGhyZXNob2xkID0gdjsKICAgICAgICB9CiAgICAgICAgY29uc3Qgd2hpdGVUaHJlc2hvbGRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aGl0ZVRocmVzaG9sZElucHV0Jyk7CiAgICAgICAgaWYgKHdoaXRlVGhyZXNob2xkSW5wdXQpIHsKICAgICAgICAgIGNvbnN0IHYgPSBwYXJzZUludCh3aGl0ZVRocmVzaG9sZElucHV0LnZhbHVlLCAxMCk7CiAgICAgICAgICBpZiAoIWlzTmFOKHYpICYmIHYgPj0gMjAwICYmIHYgPD0gMjU1KSBzdGF0ZS5jdXN0b21XaGl0ZVRocmVzaG9sZCA9IHY7CiAgICAgICAgfQogICAgICAgIC8vIFVwZGF0ZSBmdW5jdGlvbmFsIHRocmVzaG9sZHMKICAgICAgICBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRCA9IHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZDsKICAgICAgICBDT05GSUcuV0hJVEVfVEhSRVNIT0xEID0gc3RhdGUuY3VzdG9tV2hpdGVUaHJlc2hvbGQ7CiAgICAgICAgLy8gTm90aWZpY2F0aW9ucwogICAgICAgIGNvbnN0IG5vdGlmRW5hYmxlZFRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZkVuYWJsZWRUb2dnbGUnKTsKICAgICAgICBjb25zdCBub3RpZk9uQ2hhcmdlc1RvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZk9uQ2hhcmdlc1RvZ2dsZScpOwogICAgICAgIGNvbnN0IG5vdGlmT25seVVuZm9jdXNlZFRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZk9ubHlVbmZvY3VzZWRUb2dnbGUnKTsKICAgICAgICBjb25zdCBub3RpZkludGVydmFsSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90aWZJbnRlcnZhbElucHV0Jyk7CiAgICAgICAgaWYgKG5vdGlmRW5hYmxlZFRvZ2dsZSkgc3RhdGUubm90aWZpY2F0aW9uc0VuYWJsZWQgPSAhIW5vdGlmRW5hYmxlZFRvZ2dsZS5jaGVja2VkOwogICAgICAgIGlmIChub3RpZk9uQ2hhcmdlc1RvZ2dsZSkgc3RhdGUubm90aWZ5T25DaGFyZ2VzUmVhY2hlZCA9ICEhbm90aWZPbkNoYXJnZXNUb2dnbGUuY2hlY2tlZDsKICAgICAgICBpZiAobm90aWZPbmx5VW5mb2N1c2VkVG9nZ2xlKQogICAgICAgICAgc3RhdGUubm90aWZ5T25seVdoZW5VbmZvY3VzZWQgPSAhIW5vdGlmT25seVVuZm9jdXNlZFRvZ2dsZS5jaGVja2VkOwogICAgICAgIGlmIChub3RpZkludGVydmFsSW5wdXQpIHsKICAgICAgICAgIGNvbnN0IHYgPSBwYXJzZUludChub3RpZkludGVydmFsSW5wdXQudmFsdWUsIDEwKTsKICAgICAgICAgIGlmICghaXNOYU4odikgJiYgdiA+PSAxICYmIHYgPD0gNjApIHN0YXRlLm5vdGlmaWNhdGlvbkludGVydmFsTWludXRlcyA9IHY7CiAgICAgICAgfQogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdzZXR0aW5nc1NhdmVkJyksICdzdWNjZXNzJyk7CiAgICAgICAgY2xvc2VTZXR0aW5nc0J0bi5jbGljaygpOwogICAgICAgIE5vdGlmaWNhdGlvbk1hbmFnZXIuc3luY0Zyb21TdGF0ZSgpOwogICAgICB9KTsKCiAgICAgIG1ha2VEcmFnZ2FibGUoc2V0dGluZ3NDb250YWluZXIpOwoKICAgICAgY29uc3QgdG9rZW5Tb3VyY2VTZWxlY3QgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjdG9rZW5Tb3VyY2VTZWxlY3QnKTsKICAgICAgaWYgKHRva2VuU291cmNlU2VsZWN0KSB7CiAgICAgICAgdG9rZW5Tb3VyY2VTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgICAgIHN0YXRlLnRva2VuU291cmNlID0gZS50YXJnZXQudmFsdWU7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5SRIFRva2VuIHNvdXJjZSBjaGFuZ2VkIHRvOiAke3N0YXRlLnRva2VuU291cmNlfWApOwogICAgICAgICAgY29uc3Qgc291cmNlTmFtZXMgPSB7CiAgICAgICAgICAgIGdlbmVyYXRvcjogJ0F1dG9tYXRpYyBHZW5lcmF0b3InLAogICAgICAgICAgICBoeWJyaWQ6ICdHZW5lcmF0b3IgKyBBdXRvIEZhbGxiYWNrJywKICAgICAgICAgICAgbWFudWFsOiAnTWFudWFsIFBpeGVsIFBsYWNlbWVudCcsCiAgICAgICAgICB9OwogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KAogICAgICAgICAgICBVdGlscy50KCd0b2tlblNvdXJjZVNldCcsIHsgc291cmNlOiBzb3VyY2VOYW1lc1tzdGF0ZS50b2tlblNvdXJjZV0gfSksCiAgICAgICAgICAgICdzdWNjZXNzJwogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgLy8gQmF0Y2ggbW9kZSBjb250cm9scwogICAgICBjb25zdCBiYXRjaE1vZGVTZWxlY3QgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjYmF0Y2hNb2RlU2VsZWN0Jyk7CiAgICAgIGNvbnN0IG5vcm1hbEJhdGNoQ29udHJvbHMgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbm9ybWFsQmF0Y2hDb250cm9scycpOwogICAgICBjb25zdCByYW5kb21CYXRjaENvbnRyb2xzID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI3JhbmRvbUJhdGNoQ29udHJvbHMnKTsKICAgICAgY29uc3QgcmFuZG9tQmF0Y2hNaW4gPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcmFuZG9tQmF0Y2hNaW4nKTsKICAgICAgY29uc3QgcmFuZG9tQmF0Y2hNYXggPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcmFuZG9tQmF0Y2hNYXgnKTsKCiAgICAgIGlmIChiYXRjaE1vZGVTZWxlY3QpIHsKICAgICAgICBiYXRjaE1vZGVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgICAgIHN0YXRlLmJhdGNoTW9kZSA9IGUudGFyZ2V0LnZhbHVlOwoKICAgICAgICAgIC8vIFN3aXRjaCBiZXR3ZWVuIG5vcm1hbCBhbmQgcmFuZG9tIGNvbnRyb2xzCiAgICAgICAgICBpZiAobm9ybWFsQmF0Y2hDb250cm9scyAmJiByYW5kb21CYXRjaENvbnRyb2xzKSB7CiAgICAgICAgICAgIGlmIChlLnRhcmdldC52YWx1ZSA9PT0gJ3JhbmRvbScpIHsKICAgICAgICAgICAgICBub3JtYWxCYXRjaENvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgcmFuZG9tQmF0Y2hDb250cm9scy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBub3JtYWxCYXRjaENvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgIHJhbmRvbUJhdGNoQ29udHJvbHMuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgICAgY29uc29sZS5sb2coYPCfk6YgQmF0Y2ggbW9kZSBjaGFuZ2VkIHRvOiAke3N0YXRlLmJhdGNoTW9kZX1gKTsKICAgICAgICAgIFV0aWxzLnNob3dBbGVydCgKICAgICAgICAgICAgVXRpbHMudCgnYmF0Y2hNb2RlU2V0JywgewogICAgICAgICAgICAgIG1vZGU6CiAgICAgICAgICAgICAgICBzdGF0ZS5iYXRjaE1vZGUgPT09ICdyYW5kb20nID8gVXRpbHMudCgncmFuZG9tUmFuZ2UnKSA6IFV0aWxzLnQoJ25vcm1hbEZpeGVkU2l6ZScpLAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgJ3N1Y2Nlc3MnCiAgICAgICAgICApOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAocmFuZG9tQmF0Y2hNaW4pIHsKICAgICAgICByYW5kb21CYXRjaE1pbi5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7CiAgICAgICAgICBjb25zdCBtaW4gPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICBpZiAobWluID49IDEgJiYgbWluIDw9IDEwMDApIHsKICAgICAgICAgICAgc3RhdGUucmFuZG9tQmF0Y2hNaW4gPSBtaW47CiAgICAgICAgICAgIC8vIEVuc3VyZSBtaW4gZG9lc24ndCBleGNlZWQgbWF4CiAgICAgICAgICAgIGlmIChyYW5kb21CYXRjaE1heCAmJiBtaW4gPiBzdGF0ZS5yYW5kb21CYXRjaE1heCkgewogICAgICAgICAgICAgIHN0YXRlLnJhbmRvbUJhdGNoTWF4ID0gbWluOwogICAgICAgICAgICAgIHJhbmRvbUJhdGNoTWF4LnZhbHVlID0gbWluOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAocmFuZG9tQmF0Y2hNYXgpIHsKICAgICAgICByYW5kb21CYXRjaE1heC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7CiAgICAgICAgICBjb25zdCBtYXggPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICBpZiAobWF4ID49IDEgJiYgbWF4IDw9IDEwMDApIHsKICAgICAgICAgICAgc3RhdGUucmFuZG9tQmF0Y2hNYXggPSBtYXg7CiAgICAgICAgICAgIC8vIEVuc3VyZSBtYXggZG9lc24ndCBnbyBiZWxvdyBtaW4KICAgICAgICAgICAgaWYgKHJhbmRvbUJhdGNoTWluICYmIG1heCA8IHN0YXRlLnJhbmRvbUJhdGNoTWluKSB7CiAgICAgICAgICAgICAgc3RhdGUucmFuZG9tQmF0Y2hNaW4gPSBtYXg7CiAgICAgICAgICAgICAgcmFuZG9tQmF0Y2hNaW4udmFsdWUgPSBtYXg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2F2ZUJvdFNldHRpbmdzKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGNvbnN0IGxhbmd1YWdlU2VsZWN0ID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI2xhbmd1YWdlU2VsZWN0Jyk7CiAgICAgIGlmIChsYW5ndWFnZVNlbGVjdCkgewogICAgICAgIGxhbmd1YWdlU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICBjb25zdCBuZXdMYW5ndWFnZSA9IGUudGFyZ2V0LnZhbHVlOwogICAgICAgICAgc3RhdGUubGFuZ3VhZ2UgPSBuZXdMYW5ndWFnZTsKICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3cGxhY2VfbGFuZ3VhZ2UnLCBuZXdMYW5ndWFnZSk7CgogICAgICAgICAgLy8gTG9hZCB0aGUgbmV3IGxhbmd1YWdlIHRyYW5zbGF0aW9ucwogICAgICAgICAgYXdhaXQgbG9hZFRyYW5zbGF0aW9ucyhuZXdMYW5ndWFnZSk7CgogICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIHNldHRpbmdzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgIGNyZWF0ZVVJKCk7CiAgICAgICAgICB9LCAxMDApOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBjb25zdCB0aGVtZVNlbGVjdCA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN0aGVtZVNlbGVjdCcpOwogICAgICBpZiAodGhlbWVTZWxlY3QpIHsKICAgICAgICB0aGVtZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgY29uc3QgbmV3VGhlbWUgPSBlLnRhcmdldC52YWx1ZTsKICAgICAgICAgIHN3aXRjaFRoZW1lKG5ld1RoZW1lKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgY29uc3Qgb3ZlcmxheU9wYWNpdHlTbGlkZXIgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjb3ZlcmxheU9wYWNpdHlTbGlkZXInKTsKICAgICAgY29uc3Qgb3ZlcmxheU9wYWNpdHlWYWx1ZSA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNvdmVybGF5T3BhY2l0eVZhbHVlJyk7CiAgICAgIGNvbnN0IGVuYWJsZUJsdWVNYXJibGVUb2dnbGUgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjZW5hYmxlQmx1ZU1hcmJsZVRvZ2dsZScpOwogICAgICBjb25zdCBzZXR0aW5nc1BhaW50V2hpdGVUb2dnbGUgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc2V0dGluZ3NQYWludFdoaXRlVG9nZ2xlJyk7CiAgICAgIGNvbnN0IHNldHRpbmdzUGFpbnRUcmFuc3BhcmVudFRvZ2dsZSA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoCiAgICAgICAgJyNzZXR0aW5nc1BhaW50VHJhbnNwYXJlbnRUb2dnbGUnCiAgICAgICk7CgogICAgICBpZiAob3ZlcmxheU9wYWNpdHlTbGlkZXIgJiYgb3ZlcmxheU9wYWNpdHlWYWx1ZSkgewogICAgICAgIGNvbnN0IHVwZGF0ZU9wYWNpdHkgPSAobmV3VmFsdWUpID0+IHsKICAgICAgICAgIGNvbnN0IG9wYWNpdHkgPSBwYXJzZUZsb2F0KG5ld1ZhbHVlKTsKICAgICAgICAgIHN0YXRlLm92ZXJsYXlPcGFjaXR5ID0gb3BhY2l0eTsKICAgICAgICAgIG92ZXJsYXlPcGFjaXR5U2xpZGVyLnZhbHVlID0gb3BhY2l0eTsKICAgICAgICAgIG92ZXJsYXlPcGFjaXR5VmFsdWUudGV4dENvbnRlbnQgPSBgJHtNYXRoLnJvdW5kKG9wYWNpdHkgKiAxMDApfSVgOwogICAgICAgIH07CgogICAgICAgIG92ZXJsYXlPcGFjaXR5U2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHsKICAgICAgICAgIHVwZGF0ZU9wYWNpdHkoZS50YXJnZXQudmFsdWUpOwogICAgICAgIH0pOwoKICAgICAgICAvLyBBZGQgc2Nyb2xsLXRvLWFkanVzdCBmb3Igb3ZlcmxheSBvcGFjaXR5IHNsaWRlcgogICAgICAgIFV0aWxzLmNyZWF0ZVNjcm9sbFRvQWRqdXN0KG92ZXJsYXlPcGFjaXR5U2xpZGVyLCB1cGRhdGVPcGFjaXR5LCAwLCAxLCAwLjA1KTsKICAgICAgfQoKICAgICAgaWYgKHNldHRpbmdzUGFpbnRXaGl0ZVRvZ2dsZSkgewogICAgICAgIHNldHRpbmdzUGFpbnRXaGl0ZVRvZ2dsZS5jaGVja2VkID0gc3RhdGUucGFpbnRXaGl0ZVBpeGVsczsKICAgICAgICBzZXR0aW5nc1BhaW50V2hpdGVUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgICAgIHN0YXRlLnBhaW50V2hpdGVQaXhlbHMgPSBlLnRhcmdldC5jaGVja2VkOwogICAgICAgICAgc2F2ZUJvdFNldHRpbmdzKCk7CiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBQYWludCB3aGl0ZSBwaXhlbHM6ICR7c3RhdGUucGFpbnRXaGl0ZVBpeGVscyA/ICdPTicgOiAnT0ZGJ31gKTsKICAgICAgICAgIGNvbnN0IHN0YXR1c1RleHQgPSBzdGF0ZS5wYWludFdoaXRlUGl4ZWxzCiAgICAgICAgICAgID8gJ1doaXRlIHBpeGVscyBpbiB0aGUgdGVtcGxhdGUgd2lsbCBiZSBwYWludGVkJwogICAgICAgICAgICA6ICdXaGl0ZSBwaXhlbHMgd2lsbCBiZSBza2lwcGVkJzsKICAgICAgICAgIFV0aWxzLnNob3dBbGVydChzdGF0dXNUZXh0LCAnc3VjY2VzcycpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAoc2V0dGluZ3NQYWludFRyYW5zcGFyZW50VG9nZ2xlKSB7CiAgICAgICAgc2V0dGluZ3NQYWludFRyYW5zcGFyZW50VG9nZ2xlLmNoZWNrZWQgPSBzdGF0ZS5wYWludFRyYW5zcGFyZW50UGl4ZWxzOwogICAgICAgIHNldHRpbmdzUGFpbnRUcmFuc3BhcmVudFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgc3RhdGUucGFpbnRUcmFuc3BhcmVudFBpeGVscyA9IGUudGFyZ2V0LmNoZWNrZWQ7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAgIGNvbnNvbGUubG9nKAogICAgICAgICAgICBg8J+OqCBQYWludCB0cmFuc3BhcmVudCBwaXhlbHM6ICR7c3RhdGUucGFpbnRUcmFuc3BhcmVudFBpeGVscyA/ICdPTicgOiAnT0ZGJ31gCiAgICAgICAgICApOwogICAgICAgICAgY29uc3Qgc3RhdHVzVGV4dCA9IHN0YXRlLnBhaW50VHJhbnNwYXJlbnRQaXhlbHMKICAgICAgICAgICAgPyAnVHJhbnNwYXJlbnQgcGl4ZWxzIGluIHRoZSB0ZW1wbGF0ZSB3aWxsIGJlIHBhaW50ZWQgd2l0aCB0aGUgY2xvc2VzdCBhdmFpbGFibGUgY29sb3InCiAgICAgICAgICAgIDogJ1RyYW5zcGFyZW50IHBpeGVscyB3aWxsIGJlIHNraXBwZWQnOwogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KHN0YXR1c1RleHQsICdzdWNjZXNzJyk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIFNwZWVkIGNvbnRyb2xzIC0gYm90aCBzbGlkZXIgYW5kIGlucHV0CiAgICAgIGNvbnN0IHNwZWVkU2xpZGVyID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI3NwZWVkU2xpZGVyJyk7CiAgICAgIGNvbnN0IHNwZWVkSW5wdXQgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc3BlZWRJbnB1dCcpOwogICAgICBjb25zdCBzcGVlZERlY3JlYXNlID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI3NwZWVkRGVjcmVhc2UnKTsKICAgICAgY29uc3Qgc3BlZWRJbmNyZWFzZSA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzcGVlZEluY3JlYXNlJyk7CiAgICAgIGNvbnN0IHNwZWVkVmFsdWUgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjc3BlZWRWYWx1ZScpOwogICAgICAKICAgICAgaWYgKHNwZWVkU2xpZGVyICYmIHNwZWVkSW5wdXQgJiYgc3BlZWRWYWx1ZSAmJiBzcGVlZERlY3JlYXNlICYmIHNwZWVkSW5jcmVhc2UpIHsKICAgICAgICBjb25zdCB1cGRhdGVTcGVlZCA9IChuZXdWYWx1ZSkgPT4gewogICAgICAgICAgY29uc3Qgc3BlZWQgPSBNYXRoLm1heChDT05GSUcuUEFJTlRJTkdfU1BFRUQuTUlOLCBNYXRoLm1pbihDT05GSUcuUEFJTlRJTkdfU1BFRUQuTUFYLCBwYXJzZUludChuZXdWYWx1ZSkpKTsKICAgICAgICAgIHN0YXRlLnBhaW50aW5nU3BlZWQgPSBzcGVlZDsKICAgICAgICAgIAogICAgICAgICAgLy8gVXBkYXRlIGJvdGggY29udHJvbHMgKHZhbHVlIHNob3dzIGluIGlucHV0LCBsYWJlbCBzaG93cyB1bml0IG9ubHkpCiAgICAgICAgICBzcGVlZFNsaWRlci52YWx1ZSA9IHNwZWVkOwogICAgICAgICAgc3BlZWRJbnB1dC52YWx1ZSA9IHNwZWVkOwogICAgICAgICAgc3BlZWRWYWx1ZS50ZXh0Q29udGVudCA9IGBwaXhlbHNgOwogICAgICAgICAgCiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICB9OwoKICAgICAgICAvLyBTbGlkZXIgZXZlbnQgbGlzdGVuZXIKICAgICAgICBzcGVlZFNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIChlKSA9PiB7CiAgICAgICAgICB1cGRhdGVTcGVlZChlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIE51bWJlciBpbnB1dCBldmVudCBsaXN0ZW5lcgogICAgICAgIHNwZWVkSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4gewogICAgICAgICAgdXBkYXRlU3BlZWQoZS50YXJnZXQudmFsdWUpOwogICAgICAgIH0pOwoKICAgICAgICAvLyBEZWNyZWFzZSBidXR0b24KICAgICAgICBzcGVlZERlY3JlYXNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgICAgdXBkYXRlU3BlZWQocGFyc2VJbnQoc3BlZWRJbnB1dC52YWx1ZSkgLSAxKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gSW5jcmVhc2UgYnV0dG9uCiAgICAgICAgc3BlZWRJbmNyZWFzZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICAgIHVwZGF0ZVNwZWVkKHBhcnNlSW50KHNwZWVkSW5wdXQudmFsdWUpICsgMSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIEFkZCBzY3JvbGwtdG8tYWRqdXN0IGZvciBzcGVlZCBzbGlkZXIKICAgICAgICBVdGlscy5jcmVhdGVTY3JvbGxUb0FkanVzdChzcGVlZFNsaWRlciwgdXBkYXRlU3BlZWQsIENPTkZJRy5QQUlOVElOR19TUEVFRC5NSU4sIENPTkZJRy5QQUlOVElOR19TUEVFRC5NQVgsIDEpOwogICAgICB9CgogICAgICBpZiAoZW5hYmxlQmx1ZU1hcmJsZVRvZ2dsZSkgewogICAgICAgIGVuYWJsZUJsdWVNYXJibGVUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7CiAgICAgICAgICBzdGF0ZS5ibHVlTWFyYmxlRW5hYmxlZCA9IGVuYWJsZUJsdWVNYXJibGVUb2dnbGUuY2hlY2tlZDsKICAgICAgICAgIGlmIChzdGF0ZS5pbWFnZUxvYWRlZCAmJiBvdmVybGF5TWFuYWdlci5pbWFnZUJpdG1hcCkgewogICAgICAgICAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgncmVwcm9jZXNzaW5nT3ZlcmxheScpLCAnaW5mbycpOwogICAgICAgICAgICBhd2FpdCBvdmVybGF5TWFuYWdlci5wcm9jZXNzSW1hZ2VJbnRvQ2h1bmtzKCk7CiAgICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdvdmVybGF5VXBkYXRlZCcpLCAnc3VjY2VzcycpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICAvLyAoQWR2YW5jZWQgY29sb3IgbGlzdGVuZXJzIG1vdmVkIG91dHNpZGUgdG8gd29yayB3aXRoIHJlc2l6ZSBkaWFsb2cpCiAgICAgIC8vIChBZHZhbmNlZCBjb2xvciBsaXN0ZW5lcnMgbW92ZWQgb3V0c2lkZSB0byB3b3JrIHdpdGggcmVzaXplIGRpYWxvZykKICAgICAgLy8gTm90aWZpY2F0aW9ucyBsaXN0ZW5lcnMKICAgICAgY29uc3Qgbm90aWZQZXJtQnRuID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI25vdGlmUmVxdWVzdFBlcm1CdG4nKTsKICAgICAgY29uc3Qgbm90aWZUZXN0QnRuID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI25vdGlmVGVzdEJ0bicpOwogICAgICBpZiAobm90aWZQZXJtQnRuKSB7CiAgICAgICAgbm90aWZQZXJtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4gewogICAgICAgICAgY29uc3QgcGVybSA9IGF3YWl0IE5vdGlmaWNhdGlvbk1hbmFnZXIucmVxdWVzdFBlcm1pc3Npb24oKTsKICAgICAgICAgIGlmIChwZXJtID09PSAnZ3JhbnRlZCcpIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdub3RpZmljYXRpb25zRW5hYmxlZCcpLCAnc3VjY2VzcycpOwogICAgICAgICAgZWxzZSBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgnbm90aWZpY2F0aW9uc1Blcm1pc3Npb25EZW5pZWQnKSwgJ3dhcm5pbmcnKTsKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAobm90aWZUZXN0QnRuKSB7CiAgICAgICAgbm90aWZUZXN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgICAgTm90aWZpY2F0aW9uTWFuYWdlci5ub3RpZnkoCiAgICAgICAgICAgIFV0aWxzLnQoJ3Rlc3ROb3RpZmljYXRpb25UaXRsZScpLAogICAgICAgICAgICBVdGlscy50KCd0ZXN0Tm90aWZpY2F0aW9uTWVzc2FnZScpLAogICAgICAgICAgICAnd3BsYWNlLW5vdGlmeS10ZXN0JywKICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIGNvbnN0IHdpZHRoU2xpZGVyID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN3aWR0aFNsaWRlcicpOwogICAgY29uc3QgaGVpZ2h0U2xpZGVyID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNoZWlnaHRTbGlkZXInKTsKICAgIGNvbnN0IHdpZHRoVmFsdWUgPSByZXNpemVDb250YWluZXIucXVlcnlTZWxlY3RvcignI3dpZHRoVmFsdWUnKTsKICAgIGNvbnN0IGhlaWdodFZhbHVlID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNoZWlnaHRWYWx1ZScpOwogICAgY29uc3Qga2VlcEFzcGVjdCA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcja2VlcEFzcGVjdCcpOwogICAgY29uc3QgcGFpbnRXaGl0ZVRvZ2dsZSA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcGFpbnRXaGl0ZVRvZ2dsZScpOwogICAgY29uc3QgcGFpbnRUcmFuc3BhcmVudFRvZ2dsZSA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcGFpbnRUcmFuc3BhcmVudFRvZ2dsZScpOwogICAgY29uc3Qgem9vbVNsaWRlciA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjem9vbVNsaWRlcicpOwogICAgY29uc3Qgem9vbVZhbHVlID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN6b29tVmFsdWUnKTsKICAgIGNvbnN0IHpvb21JbkJ0biA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjem9vbUluQnRuJyk7CiAgICBjb25zdCB6b29tT3V0QnRuID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN6b29tT3V0QnRuJyk7CiAgICBjb25zdCB6b29tRml0QnRuID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN6b29tRml0QnRuJyk7CiAgICBjb25zdCB6b29tQWN0dWFsQnRuID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyN6b29tQWN0dWFsQnRuJyk7CiAgICBjb25zdCBwYW5Nb2RlQnRuID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNwYW5Nb2RlQnRuJyk7CiAgICBjb25zdCBwYW5TdGFnZSA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcmVzaXplUGFuU3RhZ2UnKTsKICAgIGNvbnN0IGNhbnZhc1N0YWNrID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNyZXNpemVDYW52YXNTdGFjaycpOwogICAgY29uc3QgYmFzZUNhbnZhcyA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcmVzaXplQ2FudmFzJyk7CiAgICBjb25zdCBtYXNrQ2FudmFzID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNtYXNrQ2FudmFzJyk7CiAgICBjb25zdCBiYXNlQ3R4ID0gYmFzZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpOwogICAgY29uc3QgbWFza0N0eCA9IG1hc2tDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgIGNvbnN0IGNvbmZpcm1SZXNpemUgPSByZXNpemVDb250YWluZXIucXVlcnlTZWxlY3RvcignI2NvbmZpcm1SZXNpemUnKTsKICAgIGNvbnN0IGNhbmNlbFJlc2l6ZSA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjY2FuY2VsUmVzaXplJyk7CiAgICBjb25zdCBkb3dubG9hZFByZXZpZXdCdG4gPSByZXNpemVDb250YWluZXIucXVlcnlTZWxlY3RvcignI2Rvd25sb2FkUHJldmlld0J0bicpOwogICAgY29uc3QgY2xlYXJJZ25vcmVkQnRuID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjbGVhcklnbm9yZWRCdG4nKTsKCiAgICAvLyBDb29yZGluYXRlIGdlbmVyYXRpb24gY29udHJvbHMgd2l0aCBzbWFydCB2aXNpYmlsaXR5CiAgICBjb25zdCBjb29yZGluYXRlTW9kZVNlbGVjdCA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjb29yZGluYXRlTW9kZVNlbGVjdCcpOwogICAgY29uc3QgY29vcmRpbmF0ZURpcmVjdGlvblNlbGVjdCA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNjb29yZGluYXRlRGlyZWN0aW9uU2VsZWN0Jyk7CiAgICBjb25zdCBjb29yZGluYXRlU25ha2VUb2dnbGUgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjY29vcmRpbmF0ZVNuYWtlVG9nZ2xlJyk7CiAgICBjb25zdCBkaXJlY3Rpb25Db250cm9scyA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNkaXJlY3Rpb25Db250cm9scycpOwogICAgY29uc3Qgc25ha2VDb250cm9scyA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzbmFrZUNvbnRyb2xzJyk7CiAgICBjb25zdCBibG9ja0NvbnRyb2xzID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI2Jsb2NrQ29udHJvbHMnKTsKICAgIGNvbnN0IGJsb2NrV2lkdGhJbnB1dCA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNibG9ja1dpZHRoSW5wdXQnKTsKICAgIGNvbnN0IGJsb2NrSGVpZ2h0SW5wdXQgPSBzZXR0aW5nc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjYmxvY2tIZWlnaHRJbnB1dCcpOwogICAgY29uc3QgcGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZSA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoCiAgICAgICcjcGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZScKICAgICk7CgogICAgaWYgKHBhaW50VW5hdmFpbGFibGVQaXhlbHNUb2dnbGUpIHsKICAgICAgcGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZS5jaGVja2VkID0gc3RhdGUucGFpbnRVbmF2YWlsYWJsZVBpeGVsczsKICAgICAgcGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgIHN0YXRlLnBhaW50VW5hdmFpbGFibGVQaXhlbHMgPSBlLnRhcmdldC5jaGVja2VkOwogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIGNvbnNvbGUubG9nKGDwn46oIFBhaW50IHVuYXZhaWxhYmxlIGNvbG9yczogJHtzdGF0ZS5wYWludFVuYXZhaWxhYmxlUGl4ZWxzID8gJ09OJyA6ICdPRkYnfWApOwogICAgICAgIGNvbnN0IHN0YXR1c1RleHQgPSBzdGF0ZS5wYWludFVuYXZhaWxhYmxlUGl4ZWxzCiAgICAgICAgICA/ICdVbmF2YWlsYWJsZSB0ZW1wbGF0ZSBjb2xvcnMgd2lsbCBiZSBwYWludGVkIHdpdGggdGhlIGNsb3Nlc3QgYXZhaWxhYmxlIGNvbG9yJwogICAgICAgICAgOiAnVW5hdmFpbGFibGUgdGVtcGxhdGUgY29sb3JzIHdpbGwgYmUgc2tpcHBlZCc7CiAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KHN0YXR1c1RleHQsICdzdWNjZXNzJyk7CiAgICAgIH0pOwogICAgfQogICAgaWYgKGNvb3JkaW5hdGVNb2RlU2VsZWN0KSB7CiAgICAgIGNvb3JkaW5hdGVNb2RlU2VsZWN0LnZhbHVlID0gc3RhdGUuY29vcmRpbmF0ZU1vZGU7CiAgICAgIGNvb3JkaW5hdGVNb2RlU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgICAgc3RhdGUuY29vcmRpbmF0ZU1vZGUgPSBlLnRhcmdldC52YWx1ZTsKICAgICAgICBVdGlscy51cGRhdGVDb29yZGluYXRlVUkoewogICAgICAgICAgbW9kZTogc3RhdGUuY29vcmRpbmF0ZU1vZGUsCiAgICAgICAgICBkaXJlY3Rpb25Db250cm9scywKICAgICAgICAgIHNuYWtlQ29udHJvbHMsCiAgICAgICAgICBibG9ja0NvbnRyb2xzLAogICAgICAgIH0pOwogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIGNvbnNvbGUubG9nKGDwn5SEIENvb3JkaW5hdGUgbW9kZSBjaGFuZ2VkIHRvOiAke3N0YXRlLmNvb3JkaW5hdGVNb2RlfWApOwogICAgICAgIFV0aWxzLnNob3dBbGVydChgQ29vcmRpbmF0ZSBtb2RlIHNldCB0bzogJHtzdGF0ZS5jb29yZGluYXRlTW9kZX1gLCAnc3VjY2VzcycpOwogICAgICB9KTsKICAgIH0KCiAgICBpZiAoY29vcmRpbmF0ZURpcmVjdGlvblNlbGVjdCkgewogICAgICBjb29yZGluYXRlRGlyZWN0aW9uU2VsZWN0LnZhbHVlID0gc3RhdGUuY29vcmRpbmF0ZURpcmVjdGlvbjsKICAgICAgY29vcmRpbmF0ZURpcmVjdGlvblNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgIHN0YXRlLmNvb3JkaW5hdGVEaXJlY3Rpb24gPSBlLnRhcmdldC52YWx1ZTsKICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICBjb25zb2xlLmxvZyhg8J+nrSBDb29yZGluYXRlIGRpcmVjdGlvbiBjaGFuZ2VkIHRvOiAke3N0YXRlLmNvb3JkaW5hdGVEaXJlY3Rpb259YCk7CiAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KGBDb29yZGluYXRlIGRpcmVjdGlvbiBzZXQgdG86ICR7c3RhdGUuY29vcmRpbmF0ZURpcmVjdGlvbn1gLCAnc3VjY2VzcycpOwogICAgICB9KTsKICAgIH0KCiAgICBpZiAoY29vcmRpbmF0ZVNuYWtlVG9nZ2xlKSB7CiAgICAgIGNvb3JkaW5hdGVTbmFrZVRvZ2dsZS5jaGVja2VkID0gc3RhdGUuY29vcmRpbmF0ZVNuYWtlOwogICAgICBjb29yZGluYXRlU25ha2VUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgICBzdGF0ZS5jb29yZGluYXRlU25ha2UgPSBlLnRhcmdldC5jaGVja2VkOwogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIGNvbnNvbGUubG9nKGDwn5CNIFNuYWtlIHBhdHRlcm4gJHtzdGF0ZS5jb29yZGluYXRlU25ha2UgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWApOwogICAgICAgIFV0aWxzLnNob3dBbGVydCgKICAgICAgICAgIGBTbmFrZSBwYXR0ZXJuICR7c3RhdGUuY29vcmRpbmF0ZVNuYWtlID8gJ2VuYWJsZWQnIDogJ2Rpc2FibGVkJ31gLAogICAgICAgICAgJ3N1Y2Nlc3MnCiAgICAgICAgKTsKICAgICAgfSk7CiAgICB9CgogICAgaWYgKGJsb2NrV2lkdGhJbnB1dCkgewogICAgICBibG9ja1dpZHRoSW5wdXQudmFsdWUgPSBzdGF0ZS5ibG9ja1dpZHRoOwogICAgICBibG9ja1dpZHRoSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4gewogICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQoZS50YXJnZXQudmFsdWUpOwogICAgICAgIGlmICh3aWR0aCA+PSAxICYmIHdpZHRoIDw9IDUwKSB7CiAgICAgICAgICBzdGF0ZS5ibG9ja1dpZHRoID0gd2lkdGg7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmIChibG9ja0hlaWdodElucHV0KSB7CiAgICAgIGJsb2NrSGVpZ2h0SW5wdXQudmFsdWUgPSBzdGF0ZS5ibG9ja0hlaWdodDsKICAgICAgYmxvY2tIZWlnaHRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlKTsKICAgICAgICBpZiAoaGVpZ2h0ID49IDEgJiYgaGVpZ2h0IDw9IDUwKSB7CiAgICAgICAgICBzdGF0ZS5ibG9ja0hlaWdodCA9IGhlaWdodDsKICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgaWYgKGNvbXBhY3RCdG4pIHsKICAgICAgY29tcGFjdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnd3BsYWNlLWNvbXBhY3QnKTsKICAgICAgICBjb25zdCBpc0NvbXBhY3QgPSBjb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd3cGxhY2UtY29tcGFjdCcpOwoKICAgICAgICBpZiAoaXNDb21wYWN0KSB7CiAgICAgICAgICBjb21wYWN0QnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLWV4cGFuZCI+PC9pPic7CiAgICAgICAgICBjb21wYWN0QnRuLnRpdGxlID0gVXRpbHMudCgnZXhwYW5kTW9kZScpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb21wYWN0QnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLWNvbXByZXNzIj48L2k+JzsKICAgICAgICAgIGNvbXBhY3RCdG4udGl0bGUgPSBVdGlscy50KCdjb21wYWN0TW9kZScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgaWYgKG1pbmltaXplQnRuKSB7CiAgICAgIG1pbmltaXplQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIHN0YXRlLm1pbmltaXplZCA9ICFzdGF0ZS5taW5pbWl6ZWQ7CiAgICAgICAgaWYgKHN0YXRlLm1pbmltaXplZCkgewogICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3dwbGFjZS1taW5pbWl6ZWQnKTsKICAgICAgICAgIGNvbnRlbnQuY2xhc3NMaXN0LmFkZCgnd3BsYWNlLWhpZGRlbicpOwogICAgICAgICAgbWluaW1pemVCdG4uaW5uZXJIVE1MID0gJzxpIGNsYXNzPSJmYXMgZmEtZXhwYW5kIj48L2k+JzsKICAgICAgICAgIG1pbmltaXplQnRuLnRpdGxlID0gVXRpbHMudCgncmVzdG9yZScpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnd3BsYWNlLW1pbmltaXplZCcpOwogICAgICAgICAgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCd3cGxhY2UtaGlkZGVuJyk7CiAgICAgICAgICBtaW5pbWl6ZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9ImZhcyBmYS1taW51cyI+PC9pPic7CiAgICAgICAgICBtaW5pbWl6ZUJ0bi50aXRsZSA9IFV0aWxzLnQoJ21pbmltaXplJyk7CiAgICAgICAgfQogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICB9KTsKICAgIH0KCiAgICBpZiAodG9nZ2xlT3ZlcmxheUJ0bikgewogICAgICB0b2dnbGVPdmVybGF5QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIGNvbnN0IGlzRW5hYmxlZCA9IG92ZXJsYXlNYW5hZ2VyLnRvZ2dsZSgpOwogICAgICAgIHRvZ2dsZU92ZXJsYXlCdG4uY2xhc3NMaXN0LnRvZ2dsZSgnYWN0aXZlJywgaXNFbmFibGVkKTsKICAgICAgICB0b2dnbGVPdmVybGF5QnRuLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgaXNFbmFibGVkID8gJ3RydWUnIDogJ2ZhbHNlJyk7CiAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KGlzRW5hYmxlZCA/IFV0aWxzLnQoJ292ZXJsYXlFbmFibGVkJykgOiBVdGlscy50KCdvdmVybGF5RGlzYWJsZWQnKSwgJ2luZm8nKTsKICAgICAgfSk7CiAgICB9CgogICAgaWYgKHN0YXRlLm1pbmltaXplZCkgewogICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnd3BsYWNlLW1pbmltaXplZCcpOwogICAgICBjb250ZW50LmNsYXNzTGlzdC5hZGQoJ3dwbGFjZS1oaWRkZW4nKTsKICAgICAgaWYgKG1pbmltaXplQnRuKSB7CiAgICAgICAgbWluaW1pemVCdG4uaW5uZXJIVE1MID0gJzxpIGNsYXNzPSJmYXMgZmEtZXhwYW5kIj48L2k+JzsKICAgICAgICBtaW5pbWl6ZUJ0bi50aXRsZSA9IFV0aWxzLnQoJ3Jlc3RvcmUnKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3dwbGFjZS1taW5pbWl6ZWQnKTsKICAgICAgY29udGVudC5jbGFzc0xpc3QucmVtb3ZlKCd3cGxhY2UtaGlkZGVuJyk7CiAgICAgIGlmIChtaW5pbWl6ZUJ0bikgewogICAgICAgIG1pbmltaXplQnRuLmlubmVySFRNTCA9ICc8aSBjbGFzcz0iZmFzIGZhLW1pbnVzIj48L2k+JzsKICAgICAgICBtaW5pbWl6ZUJ0bi50aXRsZSA9IFV0aWxzLnQoJ21pbmltaXplJyk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoc2F2ZUJ0bikgewogICAgICBzYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIGlmICghc3RhdGUuaW1hZ2VMb2FkZWQpIHsKICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdtaXNzaW5nUmVxdWlyZW1lbnRzJyksICdlcnJvcicpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IFV0aWxzLnNhdmVQcm9ncmVzcygpOwogICAgICAgIGlmIChzdWNjZXNzKSB7CiAgICAgICAgICB1cGRhdGVVSSgnYXV0b1NhdmVkJywgJ3N1Y2Nlc3MnKTsKICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdhdXRvU2F2ZWQnKSwgJ3N1Y2Nlc3MnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2Vycm9yU2F2aW5nUHJvZ3Jlc3MnKSwgJ2Vycm9yJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICBpZiAobG9hZEJ0bikgewogICAgICBsb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIC8vIENoZWNrIGlmIGluaXRpYWwgc2V0dXAgaXMgY29tcGxldGUKICAgICAgICBpZiAoIXN0YXRlLmluaXRpYWxTZXR1cENvbXBsZXRlKSB7CiAgICAgICAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgncGxlYXNlV2FpdEluaXRpYWxTZXR1cCcpLCAnd2FybmluZycpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgc2F2ZWREYXRhID0gVXRpbHMubG9hZFByb2dyZXNzKCk7CiAgICAgICAgaWYgKCFzYXZlZERhdGEpIHsKICAgICAgICAgIHVwZGF0ZVVJKCdub1NhdmVkRGF0YScsICd3YXJuaW5nJyk7CiAgICAgICAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgnbm9TYXZlZERhdGEnKSwgJ3dhcm5pbmcnKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGNvbmZpcm1Mb2FkID0gY29uZmlybSgKICAgICAgICAgIGAke1V0aWxzLnQoJ3NhdmVkRGF0YUZvdW5kJyl9XG5cbmAgKwogICAgICAgICAgICBgU2F2ZWQ6ICR7bmV3IERhdGUoc2F2ZWREYXRhLnRpbWVzdGFtcCkudG9Mb2NhbGVTdHJpbmcoKX1cbmAgKwogICAgICAgICAgICBgUHJvZ3Jlc3M6ICR7c2F2ZWREYXRhLnN0YXRlLnBhaW50ZWRQaXhlbHN9LyR7c2F2ZWREYXRhLnN0YXRlLnRvdGFsUGl4ZWxzfSBwaXhlbHNgCiAgICAgICAgKTsKCiAgICAgICAgaWYgKGNvbmZpcm1Mb2FkKSB7CiAgICAgICAgICBjb25zdCBzdWNjZXNzID0gVXRpbHMucmVzdG9yZVByb2dyZXNzKHNhdmVkRGF0YSk7CiAgICAgICAgICBpZiAoc3VjY2VzcykgewogICAgICAgICAgICB1cGRhdGVVSSgnZGF0YUxvYWRlZCcsICdzdWNjZXNzJyk7CiAgICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdkYXRhTG9hZGVkJyksICdzdWNjZXNzJyk7CiAgICAgICAgICAgIHVwZGF0ZURhdGFCdXR0b25zKCk7CgogICAgICAgICAgICB1cGRhdGVTdGF0cygpOwoKICAgICAgICAgICAgLy8gUmVzdG9yZSBvdmVybGF5IGlmIGltYWdlIGRhdGEgd2FzIGxvYWRlZCBmcm9tIGxvY2FsU3RvcmFnZQogICAgICAgICAgICBVdGlscy5yZXN0b3JlT3ZlcmxheUZyb21EYXRhKCkuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHJlc3RvcmUgb3ZlcmxheSBmcm9tIGxvY2FsU3RvcmFnZTonLCBlcnJvcik7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKCFzdGF0ZS5jb2xvcnNDaGVja2VkKSB7CiAgICAgICAgICAgICAgdXBsb2FkQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdXBsb2FkQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgc2VsZWN0UG9zQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzdGF0ZS5pbWFnZUxvYWRlZCAmJiBzdGF0ZS5zdGFydFBvc2l0aW9uICYmIHN0YXRlLnJlZ2lvbiAmJiBzdGF0ZS5jb2xvcnNDaGVja2VkKSB7CiAgICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2Vycm9yTG9hZGluZ1Byb2dyZXNzJyksICdlcnJvcicpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgaWYgKHNhdmVUb0ZpbGVCdG4pIHsKICAgICAgc2F2ZVRvRmlsZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICBjb25zdCBzdWNjZXNzID0gVXRpbHMuc2F2ZVByb2dyZXNzVG9GaWxlKCk7CiAgICAgICAgaWYgKHN1Y2Nlc3MpIHsKICAgICAgICAgIHVwZGF0ZVVJKCdmaWxlU2F2ZWQnLCAnc3VjY2VzcycpOwogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2ZpbGVTYXZlZCcpLCAnc3VjY2VzcycpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgnZmlsZUVycm9yJyksICdlcnJvcicpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgaWYgKGxvYWRGcm9tRmlsZUJ0bikgewogICAgICBsb2FkRnJvbUZpbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7CiAgICAgICAgLy8gQ2hlY2sgaWYgaW5pdGlhbCBzZXR1cCBpcyBjb21wbGV0ZQogICAgICAgIGlmICghc3RhdGUuaW5pdGlhbFNldHVwQ29tcGxldGUpIHsKICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdwbGVhc2VXYWl0RmlsZVNldHVwJyksICd3YXJuaW5nJyk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IFV0aWxzLmxvYWRQcm9ncmVzc0Zyb21GaWxlKCk7CiAgICAgICAgICBpZiAoc3VjY2VzcykgewogICAgICAgICAgICB1cGRhdGVVSSgnZmlsZUxvYWRlZCcsICdzdWNjZXNzJyk7CiAgICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdmaWxlTG9hZGVkJyksICdzdWNjZXNzJyk7CiAgICAgICAgICAgIHVwZGF0ZURhdGFCdXR0b25zKCk7CgogICAgICAgICAgICBhd2FpdCB1cGRhdGVTdGF0cygpOwoKICAgICAgICAgICAgLy8gUmVzdG9yZSBvdmVybGF5IGlmIGltYWdlIGRhdGEgd2FzIGxvYWRlZCBmcm9tIGZpbGUKICAgICAgICAgICAgYXdhaXQgVXRpbHMucmVzdG9yZU92ZXJsYXlGcm9tRGF0YSgpLmNhdGNoKChlcnJvcikgPT4gewogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZXN0b3JlIG92ZXJsYXkgZnJvbSBmaWxlOicsIGVycm9yKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoc3RhdGUuY29sb3JzQ2hlY2tlZCkgewogICAgICAgICAgICAgIHVwbG9hZEJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgIHNlbGVjdFBvc0J0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgIHJlc2l6ZUJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHVwbG9hZEJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3RhdGUuaW1hZ2VMb2FkZWQgJiYgc3RhdGUuc3RhcnRQb3NpdGlvbiAmJiBzdGF0ZS5yZWdpb24gJiYgc3RhdGUuY29sb3JzQ2hlY2tlZCkgewogICAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09ICdJbnZhbGlkIEpTT04gZmlsZScpIHsKICAgICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2ludmFsaWRGaWxlRm9ybWF0JyksICdlcnJvcicpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2ZpbGVFcnJvcicpLCAnZXJyb3InKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIHVwZGF0ZVVJID0gKG1lc3NhZ2VLZXksIHR5cGUgPSAnZGVmYXVsdCcsIHBhcmFtcyA9IHt9LCBzaWxlbnQgPSBmYWxzZSkgPT4gewogICAgICBjb25zdCBtZXNzYWdlID0gVXRpbHMudChtZXNzYWdlS2V5LCBwYXJhbXMpOwogICAgICBzdGF0dXNUZXh0LnRleHRDb250ZW50ID0gbWVzc2FnZTsKICAgICAgc3RhdHVzVGV4dC5jbGFzc05hbWUgPSBgd3BsYWNlLXN0YXR1cyBzdGF0dXMtJHt0eXBlfWA7CgogICAgICBpZiAoIXNpbGVudCkgewogICAgICAgIC8vIFRyaWdnZXIgYW5pbWF0aW9uIG9ubHkgd2hlbiBzaWxlbnQgPSBmYWxzZQogICAgICAgIHN0YXR1c1RleHQuc3R5bGUuYW5pbWF0aW9uID0gJ25vbmUnOwogICAgICAgIHZvaWQgc3RhdHVzVGV4dC5vZmZzZXRXaWR0aDsgLy8gdHJpY2sgdG8gcmVzdGFydCB0aGUgYW5pbWF0aW9uCiAgICAgICAgc3RhdHVzVGV4dC5zdHlsZS5hbmltYXRpb24gPSAnc2xpZGUtaW4gMC4zcyBlYXNlLW91dCc7CiAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gdXBkYXRlQ2hhcmdlU3RhdHNEaXNwbGF5KGludGVydmFsTXMpIHsKICAgICAgY29uc3QgY3VycmVudENoYXJnZXNFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cGxhY2Utc3RhdC1jaGFyZ2VzLXZhbHVlJyk7CiAgICAgIGNvbnN0IGZ1bGxDaGFyZ2VFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3cGxhY2Utc3RhdC1mdWxsY2hhcmdlLXZhbHVlJyk7CiAgICAgIGlmICghZnVsbENoYXJnZUVsICYmICFjdXJyZW50Q2hhcmdlc0VsKSByZXR1cm47CiAgICAgIGlmICghc3RhdGUuZnVsbENoYXJnZURhdGEpIHsKICAgICAgICBmdWxsQ2hhcmdlRWwudGV4dENvbnRlbnQgPSAnLS06LS06LS0nOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY29uc3QgeyBjdXJyZW50LCBtYXgsIGNvb2xkb3duTXMsIHN0YXJ0VGltZSwgc3BlbnRTaW5jZVNob3QgfSA9IHN0YXRlLmZ1bGxDaGFyZ2VEYXRhOwogICAgICBjb25zdCBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTsKCiAgICAgIC8vIHRvdGFsIGNoYXJnZXMgaW5jbHVkaW5nIGVsYXBzZWQgdGltZSBhbmQgc3BlbnQgZHVyaW5nIHBhaW50aW5nIHNpbmNlIHNuYXBzaG90CiAgICAgIGNvbnN0IGNoYXJnZXNHYWluZWQgPSBlbGFwc2VkIC8gY29vbGRvd25NczsKICAgICAgY29uc3QgcmF3Q2hhcmdlcyA9IGN1cnJlbnQgKyBjaGFyZ2VzR2FpbmVkIC0gc3BlbnRTaW5jZVNob3Q7CiAgICAgIGNvbnN0IGNhcHBlZENoYXJnZXMgPSBNYXRoLm1pbihyYXdDaGFyZ2VzLCBtYXgpOwoKICAgICAgLy8gcm91bmRpbmcgd2l0aCAwLjk1IHRocmVzaG9sZAogICAgICBsZXQgZGlzcGxheUNoYXJnZXM7CiAgICAgIGNvbnN0IGZyYWN0aW9uID0gY2FwcGVkQ2hhcmdlcyAtIE1hdGguZmxvb3IoY2FwcGVkQ2hhcmdlcyk7CiAgICAgIGlmIChmcmFjdGlvbiA+PSAwLjk1KSB7CiAgICAgICAgZGlzcGxheUNoYXJnZXMgPSBNYXRoLmNlaWwoY2FwcGVkQ2hhcmdlcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGlzcGxheUNoYXJnZXMgPSBNYXRoLmZsb29yKGNhcHBlZENoYXJnZXMpOwogICAgICB9CgogICAgICBzdGF0ZS5kaXNwbGF5Q2hhcmdlcyA9IE1hdGgubWF4KDAsIGRpc3BsYXlDaGFyZ2VzKTsKICAgICAgc3RhdGUucHJlY2lzZUN1cnJlbnRDaGFyZ2VzID0gY2FwcGVkQ2hhcmdlczsKCiAgICAgIGNvbnN0IHJlbWFpbmluZ01zID0gZ2V0TXNUb1RhcmdldENoYXJnZXMoY2FwcGVkQ2hhcmdlcywgbWF4LCBzdGF0ZS5jb29sZG93biwgaW50ZXJ2YWxNcyk7CiAgICAgIGNvbnN0IHRpbWVUZXh0ID0gVXRpbHMubXNUb1RpbWVUZXh0KHJlbWFpbmluZ01zKTsKCiAgICAgIGlmIChjdXJyZW50Q2hhcmdlc0VsKSB7CiAgICAgICAgY3VycmVudENoYXJnZXNFbC5pbm5lckhUTUwgPSBgJHtzdGF0ZS5kaXNwbGF5Q2hhcmdlc30gLyAke3N0YXRlLm1heENoYXJnZXN9YDsKICAgICAgfQoKICAgICAgaWYgKAogICAgICAgIHN0YXRlLmRpc3BsYXlDaGFyZ2VzIDwgc3RhdGUuY29vbGRvd25DaGFyZ2VUaHJlc2hvbGQgJiYKICAgICAgICAhc3RhdGUuc3RvcEZsYWcgJiYKICAgICAgICBzdGF0ZS5ydW5uaW5nCiAgICAgICkgewogICAgICAgIHVwZGF0ZUNoYXJnZXNUaHJlc2hvbGRVSShpbnRlcnZhbE1zKTsKICAgICAgfQoKICAgICAgaWYgKGZ1bGxDaGFyZ2VFbCkgewogICAgICAgIGlmIChzdGF0ZS5kaXNwbGF5Q2hhcmdlcyA+PSBtYXgpIHsKICAgICAgICAgIGZ1bGxDaGFyZ2VFbC5pbm5lckhUTUwgPSBgPHNwYW4gc3R5bGU9ImNvbG9yOiMxMGI5ODE7Ij5GVUxMPC9zcGFuPmA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZ1bGxDaGFyZ2VFbC5pbm5lckhUTUwgPSBgCiAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJjb2xvcjojZjU5ZTBiOyI+JHt0aW1lVGV4dH08L3NwYW4+CiAgICAgICAgICBgOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHVwZGF0ZVN0YXRzID0gYXN5bmMgKGlzTWFudWFsUmVmcmVzaCA9IGZhbHNlKSA9PiB7CiAgICAgIGNvbnN0IGlzRm9yY2VkUmVmcmVzaCA9IGlzTWFudWFsUmVmcmVzaDsKICAgICAgY29uc3QgaXNGaXJzdENoZWNrID0gIXN0YXRlLmZ1bGxDaGFyZ2VEYXRhPy5zdGFydFRpbWU7CgogICAgICBjb25zdCBtaW5VcGRhdGVJbnRlcnZhbCA9IDYwXzAwMDsKICAgICAgY29uc3QgbWF4VXBkYXRlSW50ZXJ2YWwgPSA5MF8wMDA7CiAgICAgIGNvbnN0IHJhbmRvbVVwZGF0ZVRocmVzaG9sZCA9CiAgICAgICAgbWluVXBkYXRlSW50ZXJ2YWwgKyBNYXRoLnJhbmRvbSgpICogKG1heFVwZGF0ZUludGVydmFsIC0gbWluVXBkYXRlSW50ZXJ2YWwpOwogICAgICBjb25zdCB0aW1lU2luY2VMYXN0VXBkYXRlID0gRGF0ZS5ub3coKSAtIChzdGF0ZS5mdWxsQ2hhcmdlRGF0YT8uc3RhcnRUaW1lIHx8IDApOwogICAgICBjb25zdCBpc1RpbWVUb1VwZGF0ZSA9IHRpbWVTaW5jZUxhc3RVcGRhdGUgPj0gcmFuZG9tVXBkYXRlVGhyZXNob2xkOwoKICAgICAgY29uc3Qgc2hvdWxkQ2FsbEFwaSA9IGlzRm9yY2VkUmVmcmVzaCB8fCBpc0ZpcnN0Q2hlY2sgfHwgaXNUaW1lVG9VcGRhdGU7CgogICAgICBpZiAoc2hvdWxkQ2FsbEFwaSkgewogICAgICAgIGNvbnN0IHsgY2hhcmdlcywgbWF4LCBjb29sZG93biB9ID0gYXdhaXQgV1BsYWNlU2VydmljZS5nZXRDaGFyZ2VzKCk7CiAgICAgICAgc3RhdGUuZGlzcGxheUNoYXJnZXMgPSBNYXRoLmZsb29yKGNoYXJnZXMpOwogICAgICAgIHN0YXRlLnByZWNpc2VDdXJyZW50Q2hhcmdlcyA9IGNoYXJnZXM7CiAgICAgICAgc3RhdGUuY29vbGRvd24gPSBjb29sZG93bjsKICAgICAgICBzdGF0ZS5tYXhDaGFyZ2VzID0gTWF0aC5mbG9vcihtYXgpID4gMSA/IE1hdGguZmxvb3IobWF4KSA6IHN0YXRlLm1heENoYXJnZXM7CgogICAgICAgIHN0YXRlLmZ1bGxDaGFyZ2VEYXRhID0gewogICAgICAgICAgY3VycmVudDogY2hhcmdlcywKICAgICAgICAgIG1heDogbWF4LAogICAgICAgICAgY29vbGRvd25NczogY29vbGRvd24sCiAgICAgICAgICBzdGFydFRpbWU6IERhdGUubm93KCksCiAgICAgICAgICBzcGVudFNpbmNlU2hvdDogMCwKICAgICAgICB9OwogICAgICAgIC8vIEV2YWx1YXRlIG5vdGlmaWNhdGlvbnMgZXZlcnkgdGltZSB3ZSByZWZyZXNoIHNlcnZlci1zaWRlIGNoYXJnZXMKICAgICAgICBOb3RpZmljYXRpb25NYW5hZ2VyLm1heWJlTm90aWZ5Q2hhcmdlc1JlYWNoZWQoKTsKICAgICAgfQoKICAgICAgaWYgKHN0YXRlLmZ1bGxDaGFyZ2VJbnRlcnZhbCkgewogICAgICAgIGNsZWFySW50ZXJ2YWwoc3RhdGUuZnVsbENoYXJnZUludGVydmFsKTsKICAgICAgICBzdGF0ZS5mdWxsQ2hhcmdlSW50ZXJ2YWwgPSBudWxsOwogICAgICB9CiAgICAgIGNvbnN0IGludGVydmFsTXMgPSAxMDAwOwogICAgICBzdGF0ZS5mdWxsQ2hhcmdlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgKICAgICAgICAoKSA9PiB1cGRhdGVDaGFyZ2VTdGF0c0Rpc3BsYXkoaW50ZXJ2YWxNcyksCiAgICAgICAgaW50ZXJ2YWxNcwogICAgICApOwoKICAgICAgaWYgKGNvb2xkb3duU2xpZGVyICYmIGNvb2xkb3duU2xpZGVyLm1heCAhPT0gc3RhdGUubWF4Q2hhcmdlcykgewogICAgICAgIGNvb2xkb3duU2xpZGVyLm1heCA9IHN0YXRlLm1heENoYXJnZXM7CiAgICAgIH0KICAgICAgaWYgKGNvb2xkb3duSW5wdXQgJiYgY29vbGRvd25JbnB1dC5tYXggIT09IHN0YXRlLm1heENoYXJnZXMpIHsKICAgICAgICBjb29sZG93bklucHV0Lm1heCA9IHN0YXRlLm1heENoYXJnZXM7CiAgICAgIH0KCiAgICAgIGxldCBpbWFnZVN0YXRzSFRNTCA9ICcnOwogICAgICBpZiAoc3RhdGUuaW1hZ2VMb2FkZWQpIHsKICAgICAgICBjb25zdCBwcm9ncmVzcyA9CiAgICAgICAgICBzdGF0ZS50b3RhbFBpeGVscyA+IDAgPyBNYXRoLnJvdW5kKChzdGF0ZS5wYWludGVkUGl4ZWxzIC8gc3RhdGUudG90YWxQaXhlbHMpICogMTAwKSA6IDA7CiAgICAgICAgY29uc3QgcmVtYWluaW5nUGl4ZWxzID0gc3RhdGUudG90YWxQaXhlbHMgLSBzdGF0ZS5wYWludGVkUGl4ZWxzOwogICAgICAgIHN0YXRlLmVzdGltYXRlZFRpbWUgPSBVdGlscy5jYWxjdWxhdGVFc3RpbWF0ZWRUaW1lKAogICAgICAgICAgcmVtYWluaW5nUGl4ZWxzLAogICAgICAgICAgc3RhdGUuZGlzcGxheUNoYXJnZXMsCiAgICAgICAgICBzdGF0ZS5jb29sZG93bgogICAgICAgICk7CiAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHtwcm9ncmVzc30lYDsKCiAgICAgICAgaW1hZ2VTdGF0c0hUTUwgPSBgCiAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC1pdGVtIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtbGFiZWwiPjxpIGNsYXNzPSJmYXMgZmEtaW1hZ2UiPjwvaT4gJHtVdGlscy50KCdwcm9ncmVzcycpfTwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC12YWx1ZSI+JHtwcm9ncmVzc30lPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zdGF0LWl0ZW0iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC1sYWJlbCI+PGkgY2xhc3M9ImZhcyBmYS1wYWludC1icnVzaCI+PC9pPiAke1V0aWxzLnQoCiAgICAgICAgICAgICAgJ3BpeGVscycKICAgICAgICAgICAgKX08L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtdmFsdWUiPiR7c3RhdGUucGFpbnRlZFBpeGVsc30vJHtzdGF0ZS50b3RhbFBpeGVsc308L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtaXRlbSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndwbGFjZS1zdGF0LWxhYmVsIj48aSBjbGFzcz0iZmFzIGZhLWNsb2NrIj48L2k+ICR7VXRpbHMudCgKICAgICAgICAgICAgICAnZXN0aW1hdGVkVGltZScKICAgICAgICAgICAgKX08L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtdmFsdWUiPiR7VXRpbHMuZm9ybWF0VGltZShzdGF0ZS5lc3RpbWF0ZWRUaW1lKX08L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIGA7CiAgICAgIH0KCiAgICAgIGxldCBjb2xvclN3YXRjaGVzSFRNTCA9ICcnOwogICAgICBzdGF0ZS5hdmFpbGFibGVDb2xvcnMgPSBzdGF0ZS5hdmFpbGFibGVDb2xvcnMuZmlsdGVyKAogICAgICAgIChjKSA9PiBjLm5hbWUgIT09ICdVbmtub3duIENvSW9yIE5hTicgJiYgYy5pZCAhPT0gbnVsbAogICAgICApOwoKICAgICAgY29uc3QgYXZhaWxhYmxlQ29sb3JzID0gVXRpbHMuZXh0cmFjdEF2YWlsYWJsZUNvbG9ycygpOwogICAgICBjb25zdCBuZXdDb3VudCA9IEFycmF5LmlzQXJyYXkoYXZhaWxhYmxlQ29sb3JzKSA/IGF2YWlsYWJsZUNvbG9ycy5sZW5ndGggOiAwOwoKICAgICAgaWYgKG5ld0NvdW50ID09PSAwICYmIGlzTWFudWFsUmVmcmVzaCkgewogICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdub0NvbG9yc0ZvdW5kJyksICd3YXJuaW5nJyk7CiAgICAgIH0gZWxzZSBpZiAobmV3Q291bnQgPiAwICYmIHN0YXRlLmF2YWlsYWJsZUNvbG9ycy5sZW5ndGggPCBuZXdDb3VudCkgewogICAgICAgIGNvbnN0IG9sZENvdW50ID0gc3RhdGUuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aDsKCiAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KAogICAgICAgICAgVXRpbHMudCgnY29sb3JzVXBkYXRlZCcsIHsKICAgICAgICAgICAgb2xkQ291bnQsCiAgICAgICAgICAgIG5ld0NvdW50OiBuZXdDb3VudCwKICAgICAgICAgICAgZGlmZkNvdW50OiBuZXdDb3VudCAtIG9sZENvdW50LAogICAgICAgICAgfSksCiAgICAgICAgICAnc3VjY2VzcycKICAgICAgICApOwogICAgICAgIHN0YXRlLmF2YWlsYWJsZUNvbG9ycyA9IGF2YWlsYWJsZUNvbG9yczsKICAgICAgfQogICAgICBpZiAoc3RhdGUuY29sb3JzQ2hlY2tlZCkgewogICAgICAgIGNvbG9yU3dhdGNoZXNIVE1MID0gc3RhdGUuYXZhaWxhYmxlQ29sb3JzCiAgICAgICAgICAubWFwKChjb2xvcikgPT4gewogICAgICAgICAgICBjb25zdCByZ2JTdHJpbmcgPSBgcmdiKCR7Y29sb3IucmdiLmpvaW4oJywnKX0pYDsKICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC1jb2xvci1zd2F0Y2giIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAke3JnYlN0cmluZ307IiB0aXRsZT0iJHtVdGlscy50KAogICAgICAgICAgICAgICdjb2xvclRvb2x0aXAnLAogICAgICAgICAgICAgIHsgaWQ6IGNvbG9yLmlkLCByZ2I6IGNvbG9yLnJnYi5qb2luKCcsICcpIH0KICAgICAgICAgICAgKX0iPjwvZGl2PmA7CiAgICAgICAgICB9KQogICAgICAgICAgLmpvaW4oJycpOwogICAgICB9CgogICAgICBzdGF0c0FyZWEuaW5uZXJIVE1MID0gYAogICAgICAgICAgICAke2ltYWdlU3RhdHNIVE1MfQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC1pdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC1sYWJlbCI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWJvbHQiPjwvaT4gJHtVdGlscy50KCdjaGFyZ2VzJyl9CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtdmFsdWUiIGlkPSJ3cGxhY2Utc3RhdC1jaGFyZ2VzLXZhbHVlIj4KICAgICAgICAgICAgICAgICR7c3RhdGUuZGlzcGxheUNoYXJnZXN9IC8gJHtzdGF0ZS5tYXhDaGFyZ2VzfQogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtbGFiZWwiPgogICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1iYXR0ZXJ5LWhhbGYiPjwvaT4gJHtVdGlscy50KCdmdWxsQ2hhcmdlSW4nKX0KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC12YWx1ZSIgaWQ9IndwbGFjZS1zdGF0LWZ1bGxjaGFyZ2UtdmFsdWUiPi0tOi0tOi0tPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAkewogICAgICAgICAgICAgIHN0YXRlLmNvbG9yc0NoZWNrZWQKICAgICAgICAgICAgICAgID8gYAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2UtY29sb3JzLXNlY3Rpb24iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id3BsYWNlLXN0YXQtbGFiZWwiPjxpIGNsYXNzPSJmYXMgZmEtcGFsZXR0ZSI+PC9pPiAke1V0aWxzLnQoCiAgICAgICAgICAgICAgICAgICdhdmFpbGFibGVDb2xvcnMnLAogICAgICAgICAgICAgICAgICB7IGNvdW50OiBzdGF0ZS5hdmFpbGFibGVDb2xvcnMubGVuZ3RoIH0KICAgICAgICAgICAgICAgICl9PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cGxhY2Utc3RhdC1jb2xvcnMtZ3JpZCI+CiAgICAgICAgICAgICAgICAgICAgJHtjb2xvclN3YXRjaGVzSFRNTH0KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgYAogICAgICAgICAgICAgICAgOiAnJwogICAgICAgICAgICB9CiAgICAgICAgYDsKCiAgICAgIC8vIHNob3VsZCBiZSBhZnRlciBzdGF0c0FyZWEuaW5uZXJIVE1MID0gJy4uLicuIHRvZG8gbWFrZSBmdWxsIHN0YXRzIHVpIHVwZGF0ZSBwYXJ0aWFsCiAgICAgIHVwZGF0ZUNoYXJnZVN0YXRzRGlzcGxheShpbnRlcnZhbE1zKTsKICAgIH07CgogICAgdXBkYXRlRGF0YUJ1dHRvbnMgPSAoKSA9PiB7CiAgICAgIGNvbnN0IGhhc0ltYWdlRGF0YSA9IHN0YXRlLmltYWdlTG9hZGVkICYmIHN0YXRlLmltYWdlRGF0YTsKICAgICAgc2F2ZUJ0bi5kaXNhYmxlZCA9ICFoYXNJbWFnZURhdGE7CiAgICAgIHNhdmVUb0ZpbGVCdG4uZGlzYWJsZWQgPSAhaGFzSW1hZ2VEYXRhOwogICAgfTsKCiAgICB1cGRhdGVEYXRhQnV0dG9ucygpOwoKICAgIGZ1bmN0aW9uIHNob3dSZXNpemVEaWFsb2cocHJvY2Vzc29yKSB7CiAgICAgIGxldCBiYXNlUHJvY2Vzc29yID0gcHJvY2Vzc29yOwogICAgICBsZXQgd2lkdGgsIGhlaWdodDsKICAgICAgaWYgKHN0YXRlLm9yaWdpbmFsSW1hZ2U/LmRhdGFVcmwpIHsKICAgICAgICBiYXNlUHJvY2Vzc29yID0gbmV3IEltYWdlUHJvY2Vzc29yKHN0YXRlLm9yaWdpbmFsSW1hZ2UuZGF0YVVybCk7CiAgICAgICAgd2lkdGggPSBzdGF0ZS5vcmlnaW5hbEltYWdlLndpZHRoOwogICAgICAgIGhlaWdodCA9IHN0YXRlLm9yaWdpbmFsSW1hZ2UuaGVpZ2h0OwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnN0IGRpbXMgPSBwcm9jZXNzb3IuZ2V0RGltZW5zaW9ucygpOwogICAgICAgIHdpZHRoID0gZGltcy53aWR0aDsKICAgICAgICBoZWlnaHQgPSBkaW1zLmhlaWdodDsKICAgICAgfQogICAgICBjb25zdCBhc3BlY3RSYXRpbyA9IHdpZHRoIC8gaGVpZ2h0OwoKICAgICAgY29uc3QgcnMgPSBzdGF0ZS5yZXNpemVTZXR0aW5nczsKICAgICAgd2lkdGhTbGlkZXIubWF4ID0gd2lkdGggKiAyOwogICAgICBoZWlnaHRTbGlkZXIubWF4ID0gaGVpZ2h0ICogMjsKICAgICAgbGV0IGluaXRpYWxXID0gd2lkdGg7CiAgICAgIGxldCBpbml0aWFsSCA9IGhlaWdodDsKICAgICAgaWYgKAogICAgICAgIHJzICYmCiAgICAgICAgTnVtYmVyLmlzRmluaXRlKHJzLndpZHRoKSAmJgogICAgICAgIE51bWJlci5pc0Zpbml0ZShycy5oZWlnaHQpICYmCiAgICAgICAgcnMud2lkdGggPiAwICYmCiAgICAgICAgcnMuaGVpZ2h0ID4gMAogICAgICApIHsKICAgICAgICBpbml0aWFsVyA9IHJzLndpZHRoOwogICAgICAgIGluaXRpYWxIID0gcnMuaGVpZ2h0OwogICAgICB9CiAgICAgIC8vIENsYW1wIHRvIHNsaWRlciByYW5nZXMKICAgICAgaW5pdGlhbFcgPSBNYXRoLm1heCgKICAgICAgICBwYXJzZUludCh3aWR0aFNsaWRlci5taW4sIDEwKSB8fCAxMCwKICAgICAgICBNYXRoLm1pbihpbml0aWFsVywgcGFyc2VJbnQod2lkdGhTbGlkZXIubWF4LCAxMCkpCiAgICAgICk7CiAgICAgIGluaXRpYWxIID0gTWF0aC5tYXgoCiAgICAgICAgcGFyc2VJbnQoaGVpZ2h0U2xpZGVyLm1pbiwgMTApIHx8IDEwLAogICAgICAgIE1hdGgubWluKGluaXRpYWxILCBwYXJzZUludChoZWlnaHRTbGlkZXIubWF4LCAxMCkpCiAgICAgICk7CiAgICAgIHdpZHRoU2xpZGVyLnZhbHVlID0gaW5pdGlhbFc7CiAgICAgIGhlaWdodFNsaWRlci52YWx1ZSA9IGluaXRpYWxIOwogICAgICB3aWR0aFZhbHVlLnRleHRDb250ZW50ID0gaW5pdGlhbFc7CiAgICAgIGhlaWdodFZhbHVlLnRleHRDb250ZW50ID0gaW5pdGlhbEg7CiAgICAgIHpvb21TbGlkZXIudmFsdWUgPSAxOwogICAgICBpZiAoem9vbVZhbHVlKSB6b29tVmFsdWUudGV4dENvbnRlbnQgPSAnMTAwJSc7CiAgICAgIHBhaW50V2hpdGVUb2dnbGUuY2hlY2tlZCA9IHN0YXRlLnBhaW50V2hpdGVQaXhlbHM7CiAgICAgIHBhaW50VHJhbnNwYXJlbnRUb2dnbGUuY2hlY2tlZCA9IHN0YXRlLnBhaW50VHJhbnNwYXJlbnRQaXhlbHM7CgogICAgICBsZXQgX3ByZXZpZXdUaW1lciA9IG51bGw7CiAgICAgIGxldCBfcHJldmlld0pvYklkID0gMDsKICAgICAgbGV0IF9pc0RyYWdnaW5nU2l6ZSA9IGZhbHNlOwogICAgICBsZXQgX3pvb21MZXZlbCA9IDE7CiAgICAgIGxldCBfZGl0aGVyV29ya0J1ZiA9IG51bGw7CiAgICAgIGxldCBfZGl0aGVyRWxpZ2libGVCdWYgPSBudWxsOwogICAgICBjb25zdCBlbnN1cmVEaXRoZXJCdWZmZXJzID0gKG4pID0+IHsKICAgICAgICBpZiAoIV9kaXRoZXJXb3JrQnVmIHx8IF9kaXRoZXJXb3JrQnVmLmxlbmd0aCAhPT0gbiAqIDMpCiAgICAgICAgICBfZGl0aGVyV29ya0J1ZiA9IG5ldyBGbG9hdDMyQXJyYXkobiAqIDMpOwogICAgICAgIGlmICghX2RpdGhlckVsaWdpYmxlQnVmIHx8IF9kaXRoZXJFbGlnaWJsZUJ1Zi5sZW5ndGggIT09IG4pCiAgICAgICAgICBfZGl0aGVyRWxpZ2libGVCdWYgPSBuZXcgVWludDhBcnJheShuKTsKICAgICAgICByZXR1cm4geyB3b3JrOiBfZGl0aGVyV29ya0J1ZiwgZWxpZ2libGU6IF9kaXRoZXJFbGlnaWJsZUJ1ZiB9OwogICAgICB9OwogICAgICBsZXQgX21hc2tJbWFnZURhdGEgPSBudWxsOwogICAgICBsZXQgX21hc2tEYXRhID0gbnVsbDsKICAgICAgbGV0IF9kaXJ0eSA9IG51bGw7CiAgICAgIGNvbnN0IF9yZXNldERpcnR5ID0gKCkgPT4gewogICAgICAgIF9kaXJ0eSA9IHsgbWluWDogSW5maW5pdHksIG1pblk6IEluZmluaXR5LCBtYXhYOiAtMSwgbWF4WTogLTEgfTsKICAgICAgfTsKICAgICAgY29uc3QgX21hcmtEaXJ0eSA9ICh4LCB5KSA9PiB7CiAgICAgICAgaWYgKCFfZGlydHkpIF9yZXNldERpcnR5KCk7CiAgICAgICAgaWYgKHggPCBfZGlydHkubWluWCkgX2RpcnR5Lm1pblggPSB4OwogICAgICAgIGlmICh5IDwgX2RpcnR5Lm1pblkpIF9kaXJ0eS5taW5ZID0geTsKICAgICAgICBpZiAoeCA+IF9kaXJ0eS5tYXhYKSBfZGlydHkubWF4WCA9IHg7CiAgICAgICAgaWYgKHkgPiBfZGlydHkubWF4WSkgX2RpcnR5Lm1heFkgPSB5OwogICAgICB9OwogICAgICBjb25zdCBfZmx1c2hEaXJ0eSA9ICgpID0+IHsKICAgICAgICBpZiAoIV9kaXJ0eSB8fCBfZGlydHkubWF4WCA8IF9kaXJ0eS5taW5YIHx8IF9kaXJ0eS5tYXhZIDwgX2RpcnR5Lm1pblkpIHJldHVybjsKICAgICAgICBjb25zdCB4ID0gTWF0aC5tYXgoMCwgX2RpcnR5Lm1pblgpOwogICAgICAgIGNvbnN0IHkgPSBNYXRoLm1heCgwLCBfZGlydHkubWluWSk7CiAgICAgICAgY29uc3QgdyA9IE1hdGgubWluKG1hc2tDYW52YXMud2lkdGggLSB4LCBfZGlydHkubWF4WCAtIHggKyAxKTsKICAgICAgICBjb25zdCBoID0gTWF0aC5taW4obWFza0NhbnZhcy5oZWlnaHQgLSB5LCBfZGlydHkubWF4WSAtIHkgKyAxKTsKICAgICAgICBpZiAodyA+IDAgJiYgaCA+IDApIG1hc2tDdHgucHV0SW1hZ2VEYXRhKF9tYXNrSW1hZ2VEYXRhLCAwLCAwLCB4LCB5LCB3LCBoKTsKICAgICAgICBfcmVzZXREaXJ0eSgpOwogICAgICB9OwogICAgICBjb25zdCBfZW5zdXJlTWFza092ZXJsYXlCdWZmZXJzID0gKHcsIGgsIHJlYnVpbGRGcm9tTWFzayA9IGZhbHNlKSA9PiB7CiAgICAgICAgaWYgKCFfbWFza0ltYWdlRGF0YSB8fCBfbWFza0ltYWdlRGF0YS53aWR0aCAhPT0gdyB8fCBfbWFza0ltYWdlRGF0YS5oZWlnaHQgIT09IGgpIHsKICAgICAgICAgIF9tYXNrSW1hZ2VEYXRhID0gbWFza0N0eC5jcmVhdGVJbWFnZURhdGEodywgaCk7CiAgICAgICAgICBfbWFza0RhdGEgPSBfbWFza0ltYWdlRGF0YS5kYXRhOwogICAgICAgICAgcmVidWlsZEZyb21NYXNrID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlYnVpbGRGcm9tTWFzaykgewogICAgICAgICAgY29uc3QgbSA9IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2s7CiAgICAgICAgICBjb25zdCBtZCA9IF9tYXNrRGF0YTsKICAgICAgICAgIG1kLmZpbGwoMCk7CiAgICAgICAgICBpZiAobSkgewogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG0ubGVuZ3RoOyBpKyspCiAgICAgICAgICAgICAgaWYgKG1baV0pIHsKICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBpICogNDsKICAgICAgICAgICAgICAgIG1kW3BdID0gMjU1OwogICAgICAgICAgICAgICAgbWRbcCArIDFdID0gMDsKICAgICAgICAgICAgICAgIG1kW3AgKyAyXSA9IDA7CiAgICAgICAgICAgICAgICBtZFtwICsgM10gPSAxNTA7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgbWFza0N0eC5wdXRJbWFnZURhdGEoX21hc2tJbWFnZURhdGEsIDAsIDApOwogICAgICAgICAgX3Jlc2V0RGlydHkoKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIGNvbnN0IGVuc3VyZU1hc2tTaXplID0gKHcsIGgpID0+IHsKICAgICAgICBpZiAoIXN0YXRlLnJlc2l6ZUlnbm9yZU1hc2sgfHwgc3RhdGUucmVzaXplSWdub3JlTWFzay5sZW5ndGggIT09IHcgKiBoKSB7CiAgICAgICAgICBzdGF0ZS5yZXNpemVJZ25vcmVNYXNrID0gbmV3IFVpbnQ4QXJyYXkodyAqIGgpOwogICAgICAgIH0KICAgICAgICBiYXNlQ2FudmFzLndpZHRoID0gdzsKICAgICAgICBiYXNlQ2FudmFzLmhlaWdodCA9IGg7CiAgICAgICAgbWFza0NhbnZhcy53aWR0aCA9IHc7CiAgICAgICAgbWFza0NhbnZhcy5oZWlnaHQgPSBoOwogICAgICAgIG1hc2tDdHguY2xlYXJSZWN0KDAsIDAsIG1hc2tDYW52YXMud2lkdGgsIG1hc2tDYW52YXMuaGVpZ2h0KTsKICAgICAgICAvLyBFbnN1cmUgb3ZlcmxheSBidWZmZXJzIGV4aXN0IGFuZCByZWJ1aWxkIGZyb20gbWFzayB3aGVuIGRpbWVuc2lvbnMgY2hhbmdlCiAgICAgICAgX2Vuc3VyZU1hc2tPdmVybGF5QnVmZmVycyh3LCBoLCB0cnVlKTsKICAgICAgfTsKICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcgPSBhc3luYyAoKSA9PiB7CiAgICAgICAgY29uc3Qgam9iSWQgPSArK19wcmV2aWV3Sm9iSWQ7CiAgICAgICAgY29uc3QgbmV3V2lkdGggPSBwYXJzZUludCh3aWR0aFNsaWRlci52YWx1ZSwgMTApOwogICAgICAgIGNvbnN0IG5ld0hlaWdodCA9IHBhcnNlSW50KGhlaWdodFNsaWRlci52YWx1ZSwgMTApOwogICAgICAgIF96b29tTGV2ZWwgPSBwYXJzZUZsb2F0KHpvb21TbGlkZXIudmFsdWUpOwoKICAgICAgICB3aWR0aFZhbHVlLnRleHRDb250ZW50ID0gbmV3V2lkdGg7CiAgICAgICAgaGVpZ2h0VmFsdWUudGV4dENvbnRlbnQgPSBuZXdIZWlnaHQ7CgogICAgICAgIGVuc3VyZU1hc2tTaXplKG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgIGNhbnZhc1N0YWNrLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnOwogICAgICAgIGNhbnZhc1N0YWNrLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7CiAgICAgICAgYmFzZUN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgICBpZiAoIXN0YXRlLmF2YWlsYWJsZUNvbG9ycyB8fCBzdGF0ZS5hdmFpbGFibGVDb2xvcnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICBpZiAoYmFzZVByb2Nlc3NvciAhPT0gcHJvY2Vzc29yICYmICghYmFzZVByb2Nlc3Nvci5pbWcgfHwgIWJhc2VQcm9jZXNzb3IuY2FudmFzKSkgewogICAgICAgICAgICBhd2FpdCBiYXNlUHJvY2Vzc29yLmxvYWQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGJhc2VDdHguY2xlYXJSZWN0KDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgICAgYmFzZUN0eC5kcmF3SW1hZ2UoYmFzZVByb2Nlc3Nvci5pbWcsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgICAgLy8gRHJhdyBleGlzdGluZyBtYXNrIG92ZXJsYXkgYnVmZmVyCiAgICAgICAgICBtYXNrQ3R4LmNsZWFyUmVjdCgwLCAwLCBtYXNrQ2FudmFzLndpZHRoLCBtYXNrQ2FudmFzLmhlaWdodCk7CiAgICAgICAgICBpZiAoX21hc2tJbWFnZURhdGEpIG1hc2tDdHgucHV0SW1hZ2VEYXRhKF9tYXNrSW1hZ2VEYXRhLCAwLCAwKTsKICAgICAgICAgIHVwZGF0ZVpvb21MYXlvdXQoKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKGJhc2VQcm9jZXNzb3IgIT09IHByb2Nlc3NvciAmJiAoIWJhc2VQcm9jZXNzb3IuaW1nIHx8ICFiYXNlUHJvY2Vzc29yLmNhbnZhcykpIHsKICAgICAgICAgIGF3YWl0IGJhc2VQcm9jZXNzb3IubG9hZCgpOwogICAgICAgIH0KICAgICAgICBiYXNlQ3R4LmNsZWFyUmVjdCgwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTsKICAgICAgICBiYXNlQ3R4LmRyYXdJbWFnZShiYXNlUHJvY2Vzc29yLmltZywgMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7CiAgICAgICAgY29uc3QgaW1nRGF0YSA9IGJhc2VDdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgIGNvbnN0IGRhdGEgPSBpbWdEYXRhLmRhdGE7CgogICAgICAgIGNvbnN0IHRUaHJlc2ggPSBzdGF0ZS5jdXN0b21UcmFuc3BhcmVuY3lUaHJlc2hvbGQgfHwgQ09ORklHLlRSQU5TUEFSRU5DWV9USFJFU0hPTEQ7CgogICAgICAgIGNvbnN0IGFwcGx5RlNEaXRoZXIgPSAoKSA9PiB7CiAgICAgICAgICBjb25zdCB3ID0gbmV3V2lkdGgsCiAgICAgICAgICAgIGggPSBuZXdIZWlnaHQ7CiAgICAgICAgICBjb25zdCBuID0gdyAqIGg7CiAgICAgICAgICBjb25zdCB7IHdvcmssIGVsaWdpYmxlIH0gPSBlbnN1cmVEaXRoZXJCdWZmZXJzKG4pOwogICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoOyB5KyspIHsKICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3OyB4KyspIHsKICAgICAgICAgICAgICBjb25zdCBpZHggPSB5ICogdyArIHg7CiAgICAgICAgICAgICAgY29uc3QgaTQgPSBpZHggKiA0OwogICAgICAgICAgICAgIGNvbnN0IHIgPSBkYXRhW2k0XSwKICAgICAgICAgICAgICAgIGcgPSBkYXRhW2k0ICsgMV0sCiAgICAgICAgICAgICAgICBiID0gZGF0YVtpNCArIDJdLAogICAgICAgICAgICAgICAgYSA9IGRhdGFbaTQgKyAzXTsKICAgICAgICAgICAgICBjb25zdCBpc0VsaWdpYmxlID0KICAgICAgICAgICAgICAgIChzdGF0ZS5wYWludFRyYW5zcGFyZW50UGl4ZWxzIHx8IGEgPj0gdFRocmVzaCkgJiYKICAgICAgICAgICAgICAgIChzdGF0ZS5wYWludFdoaXRlUGl4ZWxzIHx8ICFVdGlscy5pc1doaXRlUGl4ZWwociwgZywgYikpOwogICAgICAgICAgICAgIGVsaWdpYmxlW2lkeF0gPSBpc0VsaWdpYmxlID8gMSA6IDA7CiAgICAgICAgICAgICAgd29ya1tpZHggKiAzXSA9IHI7CiAgICAgICAgICAgICAgd29ya1tpZHggKiAzICsgMV0gPSBnOwogICAgICAgICAgICAgIHdvcmtbaWR4ICogMyArIDJdID0gYjsKICAgICAgICAgICAgICBpZiAoIWlzRWxpZ2libGUpIHsKICAgICAgICAgICAgICAgIGRhdGFbaTQgKyAzXSA9IDA7IC8vIHRyYW5zcGFyZW50IGluIHByZXZpZXcgb3ZlcmxheQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGNvbnN0IGRpZmZ1c2UgPSAobngsIG55LCBlciwgZWcsIGViLCBmYWN0b3IpID0+IHsKICAgICAgICAgICAgaWYgKG54IDwgMCB8fCBueCA+PSB3IHx8IG55IDwgMCB8fCBueSA+PSBoKSByZXR1cm47CiAgICAgICAgICAgIGNvbnN0IG5pZHggPSBueSAqIHcgKyBueDsKICAgICAgICAgICAgaWYgKCFlbGlnaWJsZVtuaWR4XSkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCBiYXNlID0gbmlkeCAqIDM7CiAgICAgICAgICAgIHdvcmtbYmFzZV0gPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIHdvcmtbYmFzZV0gKyBlciAqIGZhY3RvcikpOwogICAgICAgICAgICB3b3JrW2Jhc2UgKyAxXSA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgd29ya1tiYXNlICsgMV0gKyBlZyAqIGZhY3RvcikpOwogICAgICAgICAgICB3b3JrW2Jhc2UgKyAyXSA9IE1hdGgubWluKDI1NSwgTWF0aC5tYXgoMCwgd29ya1tiYXNlICsgMl0gKyBlYiAqIGZhY3RvcikpOwogICAgICAgICAgfTsKCiAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGg7IHkrKykgewogICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHc7IHgrKykgewogICAgICAgICAgICAgIGNvbnN0IGlkeCA9IHkgKiB3ICsgeDsKICAgICAgICAgICAgICBpZiAoIWVsaWdpYmxlW2lkeF0pIGNvbnRpbnVlOwogICAgICAgICAgICAgIGNvbnN0IGJhc2UgPSBpZHggKiAzOwogICAgICAgICAgICAgIGNvbnN0IHIwID0gd29ya1tiYXNlXSwKICAgICAgICAgICAgICAgIGcwID0gd29ya1tiYXNlICsgMV0sCiAgICAgICAgICAgICAgICBiMCA9IHdvcmtbYmFzZSArIDJdOwogICAgICAgICAgICAgIGNvbnN0IFtuciwgbmcsIG5iXSA9IFV0aWxzLmZpbmRDbG9zZXN0UGFsZXR0ZUNvbG9yKAogICAgICAgICAgICAgICAgcjAsCiAgICAgICAgICAgICAgICBnMCwKICAgICAgICAgICAgICAgIGIwLAogICAgICAgICAgICAgICAgc3RhdGUuYWN0aXZlQ29sb3JQYWxldHRlCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBjb25zdCBpNCA9IGlkeCAqIDQ7CiAgICAgICAgICAgICAgZGF0YVtpNF0gPSBucjsKICAgICAgICAgICAgICBkYXRhW2k0ICsgMV0gPSBuZzsKICAgICAgICAgICAgICBkYXRhW2k0ICsgMl0gPSBuYjsKICAgICAgICAgICAgICBkYXRhW2k0ICsgM10gPSAyNTU7CgogICAgICAgICAgICAgIGNvbnN0IGVyID0gcjAgLSBucjsKICAgICAgICAgICAgICBjb25zdCBlZyA9IGcwIC0gbmc7CiAgICAgICAgICAgICAgY29uc3QgZWIgPSBiMCAtIG5iOwoKICAgICAgICAgICAgICBkaWZmdXNlKHggKyAxLCB5LCBlciwgZWcsIGViLCA3IC8gMTYpOwogICAgICAgICAgICAgIGRpZmZ1c2UoeCAtIDEsIHkgKyAxLCBlciwgZWcsIGViLCAzIC8gMTYpOwogICAgICAgICAgICAgIGRpZmZ1c2UoeCwgeSArIDEsIGVyLCBlZywgZWIsIDUgLyAxNik7CiAgICAgICAgICAgICAgZGlmZnVzZSh4ICsgMSwgeSArIDEsIGVyLCBlZywgZWIsIDEgLyAxNik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvLyBTa2lwIGV4cGVuc2l2ZSBkaXRoZXJpbmcgd2hpbGUgdXNlciBpcyBkcmFnZ2luZyBzbGlkZXJzCiAgICAgICAgaWYgKHN0YXRlLmRpdGhlcmluZ0VuYWJsZWQgJiYgIV9pc0RyYWdnaW5nU2l6ZSkgewogICAgICAgICAgYXBwbHlGU0RpdGhlcigpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHsKICAgICAgICAgICAgY29uc3QgciA9IGRhdGFbaV0sCiAgICAgICAgICAgICAgZyA9IGRhdGFbaSArIDFdLAogICAgICAgICAgICAgIGIgPSBkYXRhW2kgKyAyXSwKICAgICAgICAgICAgICBhID0gZGF0YVtpICsgM107CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAoIXN0YXRlLnBhaW50VHJhbnNwYXJlbnRQaXhlbHMgJiYgYSA8IHRUaHJlc2gpIHx8CiAgICAgICAgICAgICAgKCFzdGF0ZS5wYWludFdoaXRlUGl4ZWxzICYmIFV0aWxzLmlzV2hpdGVQaXhlbChyLCBnLCBiKSkKICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgZGF0YVtpICsgM10gPSAwOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnN0IFtuciwgbmcsIG5iXSA9IFV0aWxzLmZpbmRDbG9zZXN0UGFsZXR0ZUNvbG9yKHIsIGcsIGIsIHN0YXRlLmFjdGl2ZUNvbG9yUGFsZXR0ZSk7CiAgICAgICAgICAgIGRhdGFbaV0gPSBucjsKICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBuZzsKICAgICAgICAgICAgZGF0YVtpICsgMl0gPSBuYjsKICAgICAgICAgICAgZGF0YVtpICsgM10gPSAyNTU7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoam9iSWQgIT09IF9wcmV2aWV3Sm9iSWQpIHJldHVybjsKICAgICAgICBiYXNlQ3R4LnB1dEltYWdlRGF0YShpbWdEYXRhLCAwLCAwKTsKICAgICAgICBtYXNrQ3R4LmNsZWFyUmVjdCgwLCAwLCBtYXNrQ2FudmFzLndpZHRoLCBtYXNrQ2FudmFzLmhlaWdodCk7CiAgICAgICAgaWYgKF9tYXNrSW1hZ2VEYXRhKSBtYXNrQ3R4LnB1dEltYWdlRGF0YShfbWFza0ltYWdlRGF0YSwgMCwgMCk7CiAgICAgICAgdXBkYXRlWm9vbUxheW91dCgpOwogICAgICB9OwoKICAgICAgY29uc3Qgb25XaWR0aElucHV0ID0gKCkgPT4gewogICAgICAgIGlmIChrZWVwQXNwZWN0LmNoZWNrZWQpIHsKICAgICAgICAgIGhlaWdodFNsaWRlci52YWx1ZSA9IE1hdGgucm91bmQocGFyc2VJbnQod2lkdGhTbGlkZXIudmFsdWUsIDEwKSAvIGFzcGVjdFJhdGlvKTsKICAgICAgICB9CiAgICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcoKTsKICAgICAgICBjb25zdCBjdXJXID0gcGFyc2VJbnQod2lkdGhTbGlkZXIudmFsdWUsIDEwKTsKICAgICAgICBjb25zdCBjdXJIID0gcGFyc2VJbnQoaGVpZ2h0U2xpZGVyLnZhbHVlLCAxMCk7CiAgICAgICAgc3RhdGUucmVzaXplU2V0dGluZ3MgPSB7CiAgICAgICAgICBiYXNlV2lkdGg6IHdpZHRoLAogICAgICAgICAgYmFzZUhlaWdodDogaGVpZ2h0LAogICAgICAgICAgd2lkdGg6IGN1clcsCiAgICAgICAgICBoZWlnaHQ6IGN1ckgsCiAgICAgICAgfTsKICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAvLyBBdXRvLWZpdCBhZnRlciBzaXplIGNoYW5nZXMKICAgICAgICBjb25zdCBmaXQgPSB0eXBlb2YgY29tcHV0ZUZpdFpvb20gPT09ICdmdW5jdGlvbicgPyBjb21wdXRlRml0Wm9vbSgpIDogMTsKICAgICAgICBpZiAoIWlzTmFOKGZpdCkgJiYgaXNGaW5pdGUoZml0KSkgYXBwbHlab29tKGZpdCk7CiAgICAgIH07CgogICAgICBjb25zdCBvbkhlaWdodElucHV0ID0gKCkgPT4gewogICAgICAgIGlmIChrZWVwQXNwZWN0LmNoZWNrZWQpIHsKICAgICAgICAgIHdpZHRoU2xpZGVyLnZhbHVlID0gTWF0aC5yb3VuZChwYXJzZUludChoZWlnaHRTbGlkZXIudmFsdWUsIDEwKSAqIGFzcGVjdFJhdGlvKTsKICAgICAgICB9CiAgICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcoKTsKICAgICAgICBjb25zdCBjdXJXID0gcGFyc2VJbnQod2lkdGhTbGlkZXIudmFsdWUsIDEwKTsKICAgICAgICBjb25zdCBjdXJIID0gcGFyc2VJbnQoaGVpZ2h0U2xpZGVyLnZhbHVlLCAxMCk7CiAgICAgICAgc3RhdGUucmVzaXplU2V0dGluZ3MgPSB7CiAgICAgICAgICBiYXNlV2lkdGg6IHdpZHRoLAogICAgICAgICAgYmFzZUhlaWdodDogaGVpZ2h0LAogICAgICAgICAgd2lkdGg6IGN1clcsCiAgICAgICAgICBoZWlnaHQ6IGN1ckgsCiAgICAgICAgfTsKICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAvLyBBdXRvLWZpdCBhZnRlciBzaXplIGNoYW5nZXMKICAgICAgICBjb25zdCBmaXQgPSB0eXBlb2YgY29tcHV0ZUZpdFpvb20gPT09ICdmdW5jdGlvbicgPyBjb21wdXRlRml0Wm9vbSgpIDogMTsKICAgICAgICBpZiAoIWlzTmFOKGZpdCkgJiYgaXNGaW5pdGUoZml0KSkgYXBwbHlab29tKGZpdCk7CiAgICAgIH07CgogICAgICBwYWludFdoaXRlVG9nZ2xlLm9uY2hhbmdlID0gKGUpID0+IHsKICAgICAgICBzdGF0ZS5wYWludFdoaXRlUGl4ZWxzID0gZS50YXJnZXQuY2hlY2tlZDsKICAgICAgICBfdXBkYXRlUmVzaXplUHJldmlldygpOwogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICB9OwoKICAgICAgcGFpbnRUcmFuc3BhcmVudFRvZ2dsZS5vbmNoYW5nZSA9IChlKSA9PiB7CiAgICAgICAgc3RhdGUucGFpbnRUcmFuc3BhcmVudFBpeGVscyA9IGUudGFyZ2V0LmNoZWNrZWQ7CiAgICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcoKTsKICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgfTsKCiAgICAgIGxldCBwYW5YID0gMCwKICAgICAgICBwYW5ZID0gMDsKICAgICAgY29uc3QgY2xhbXBQYW4gPSAoKSA9PiB7CiAgICAgICAgY29uc3Qgd3JhcFJlY3QgPSBwYW5TdGFnZT8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgfHwgewogICAgICAgICAgd2lkdGg6IDAsCiAgICAgICAgICBoZWlnaHQ6IDAsCiAgICAgICAgfTsKICAgICAgICBjb25zdCB3ID0gKGJhc2VDYW52YXMud2lkdGggfHwgMSkgKiBfem9vbUxldmVsOwogICAgICAgIGNvbnN0IGggPSAoYmFzZUNhbnZhcy5oZWlnaHQgfHwgMSkgKiBfem9vbUxldmVsOwogICAgICAgIGlmICh3IDw9IHdyYXBSZWN0LndpZHRoKSB7CiAgICAgICAgICBwYW5YID0gTWF0aC5mbG9vcigod3JhcFJlY3Qud2lkdGggLSB3KSAvIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zdCBtaW5YID0gd3JhcFJlY3Qud2lkdGggLSB3OwogICAgICAgICAgcGFuWCA9IE1hdGgubWluKDAsIE1hdGgubWF4KG1pblgsIHBhblgpKTsKICAgICAgICB9CiAgICAgICAgaWYgKGggPD0gd3JhcFJlY3QuaGVpZ2h0KSB7CiAgICAgICAgICBwYW5ZID0gTWF0aC5mbG9vcigod3JhcFJlY3QuaGVpZ2h0IC0gaCkgLyAyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc3QgbWluWSA9IHdyYXBSZWN0LmhlaWdodCAtIGg7CiAgICAgICAgICBwYW5ZID0gTWF0aC5taW4oMCwgTWF0aC5tYXgobWluWSwgcGFuWSkpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgbGV0IF9wYW5SYWYgPSAwOwogICAgICBjb25zdCBhcHBseVBhbiA9ICgpID0+IHsKICAgICAgICBpZiAoX3BhblJhZikgcmV0dXJuOwogICAgICAgIF9wYW5SYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gewogICAgICAgICAgY2xhbXBQYW4oKTsKICAgICAgICAgIGNhbnZhc1N0YWNrLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke01hdGgucm91bmQoCiAgICAgICAgICAgIHBhblgKICAgICAgICAgICl9cHgsICR7TWF0aC5yb3VuZChwYW5ZKX1weCwgMCkgc2NhbGUoJHtfem9vbUxldmVsfSlgOwogICAgICAgICAgX3BhblJhZiA9IDA7CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICBjb25zdCB1cGRhdGVab29tTGF5b3V0ID0gKCkgPT4gewogICAgICAgIGNvbnN0IHcgPSBiYXNlQ2FudmFzLndpZHRoIHx8IDEsCiAgICAgICAgICBoID0gYmFzZUNhbnZhcy5oZWlnaHQgfHwgMTsKICAgICAgICBiYXNlQ2FudmFzLnN0eWxlLndpZHRoID0gdyArICdweCc7CiAgICAgICAgYmFzZUNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JzsKICAgICAgICBtYXNrQ2FudmFzLnN0eWxlLndpZHRoID0gdyArICdweCc7CiAgICAgICAgbWFza0NhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JzsKICAgICAgICBjYW52YXNTdGFjay5zdHlsZS53aWR0aCA9IHcgKyAncHgnOwogICAgICAgIGNhbnZhc1N0YWNrLnN0eWxlLmhlaWdodCA9IGggKyAncHgnOwogICAgICAgIGFwcGx5UGFuKCk7CiAgICAgIH07CiAgICAgIGNvbnN0IGFwcGx5Wm9vbSA9ICh6KSA9PiB7CiAgICAgICAgX3pvb21MZXZlbCA9IE1hdGgubWF4KDAuMDUsIE1hdGgubWluKDIwLCB6IHx8IDEpKTsKICAgICAgICB6b29tU2xpZGVyLnZhbHVlID0gX3pvb21MZXZlbDsKICAgICAgICB1cGRhdGVab29tTGF5b3V0KCk7CiAgICAgICAgaWYgKHpvb21WYWx1ZSkgem9vbVZhbHVlLnRleHRDb250ZW50ID0gYCR7TWF0aC5yb3VuZChfem9vbUxldmVsICogMTAwKX0lYDsKICAgICAgfTsKICAgICAgem9vbVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHsKICAgICAgICBhcHBseVpvb20ocGFyc2VGbG9hdCh6b29tU2xpZGVyLnZhbHVlKSk7CiAgICAgIH0pOwogICAgICBpZiAoem9vbUluQnRuKQogICAgICAgIHpvb21JbkJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGFwcGx5Wm9vbShwYXJzZUZsb2F0KHpvb21TbGlkZXIudmFsdWUpICsgMC4xKSk7CiAgICAgIGlmICh6b29tT3V0QnRuKQogICAgICAgIHpvb21PdXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBhcHBseVpvb20ocGFyc2VGbG9hdCh6b29tU2xpZGVyLnZhbHVlKSAtIDAuMSkpOwogICAgICBjb25zdCBjb21wdXRlRml0Wm9vbSA9ICgpID0+IHsKICAgICAgICBjb25zdCB3cmFwUmVjdCA9IHBhblN0YWdlPy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsKICAgICAgICBpZiAoIXdyYXBSZWN0KSByZXR1cm4gMTsKICAgICAgICBjb25zdCB3ID0gYmFzZUNhbnZhcy53aWR0aCB8fCAxOwogICAgICAgIGNvbnN0IGggPSBiYXNlQ2FudmFzLmhlaWdodCB8fCAxOwogICAgICAgIGNvbnN0IG1hcmdpbiA9IDEwOwogICAgICAgIGNvbnN0IHNjYWxlWCA9ICh3cmFwUmVjdC53aWR0aCAtIG1hcmdpbikgLyB3OwogICAgICAgIGNvbnN0IHNjYWxlWSA9ICh3cmFwUmVjdC5oZWlnaHQgLSBtYXJnaW4pIC8gaDsKICAgICAgICByZXR1cm4gTWF0aC5tYXgoMC4wNSwgTWF0aC5taW4oMjAsIE1hdGgubWluKHNjYWxlWCwgc2NhbGVZKSkpOwogICAgICB9OwogICAgICBpZiAoem9vbUZpdEJ0bikKICAgICAgICB6b29tRml0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgICAgYXBwbHlab29tKGNvbXB1dGVGaXRab29tKCkpOwogICAgICAgICAgY2VudGVySW5WaWV3KCk7CiAgICAgICAgfSk7CiAgICAgIGlmICh6b29tQWN0dWFsQnRuKQogICAgICAgIHpvb21BY3R1YWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgICBhcHBseVpvb20oMSk7CiAgICAgICAgICBjZW50ZXJJblZpZXcoKTsKICAgICAgICB9KTsKCiAgICAgIGNvbnN0IGNlbnRlckluVmlldyA9ICgpID0+IHsKICAgICAgICBpZiAoIXBhblN0YWdlKSByZXR1cm47CiAgICAgICAgY29uc3QgcmVjdCA9IHBhblN0YWdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgIGNvbnN0IHcgPSAoYmFzZUNhbnZhcy53aWR0aCB8fCAxKSAqIF96b29tTGV2ZWw7CiAgICAgICAgY29uc3QgaCA9IChiYXNlQ2FudmFzLmhlaWdodCB8fCAxKSAqIF96b29tTGV2ZWw7CiAgICAgICAgcGFuWCA9IE1hdGguZmxvb3IoKHJlY3Qud2lkdGggLSB3KSAvIDIpOwogICAgICAgIHBhblkgPSBNYXRoLmZsb29yKChyZWN0LmhlaWdodCAtIGgpIC8gMik7CiAgICAgICAgYXBwbHlQYW4oKTsKICAgICAgfTsKCiAgICAgIGxldCBpc1Bhbm5pbmcgPSBmYWxzZTsKICAgICAgbGV0IHN0YXJ0WCA9IDAsCiAgICAgICAgc3RhcnRZID0gMCwKICAgICAgICBzdGFydFBhblggPSAwLAogICAgICAgIHN0YXJ0UGFuWSA9IDA7CiAgICAgIGxldCBhbGxvd1BhbiA9IGZhbHNlOyAvLyBTcGFjZSBrZXkKICAgICAgbGV0IHBhbk1vZGUgPSBmYWxzZTsgLy8gRXhwbGljaXQgcGFuIG1vZGUgdG9nZ2xlIGZvciB0b3VjaC9vbmUtYnV0dG9uIG1pY2UKICAgICAgY29uc3QgaXNQYW5Nb3VzZUJ1dHRvbiA9IChlKSA9PiBlLmJ1dHRvbiA9PT0gMSB8fCBlLmJ1dHRvbiA9PT0gMjsKICAgICAgY29uc3Qgc2V0Q3Vyc29yID0gKHZhbCkgPT4gewogICAgICAgIGlmIChwYW5TdGFnZSkgcGFuU3RhZ2Uuc3R5bGUuY3Vyc29yID0gdmFsOwogICAgICB9OwogICAgICBjb25zdCBpc1BhbkFjdGl2ZSA9IChlKSA9PiBwYW5Nb2RlIHx8IGFsbG93UGFuIHx8IGlzUGFuTW91c2VCdXR0b24oZSk7CiAgICAgIGNvbnN0IHVwZGF0ZVBhbk1vZGVCdG4gPSAoKSA9PiB7CiAgICAgICAgaWYgKCFwYW5Nb2RlQnRuKSByZXR1cm47CiAgICAgICAgcGFuTW9kZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnLCBwYW5Nb2RlKTsKICAgICAgICBwYW5Nb2RlQnRuLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgcGFuTW9kZSA/ICd0cnVlJyA6ICdmYWxzZScpOwogICAgICB9OwogICAgICBpZiAocGFuTW9kZUJ0bikgewogICAgICAgIHVwZGF0ZVBhbk1vZGVCdG4oKTsKICAgICAgICBwYW5Nb2RlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgICAgcGFuTW9kZSA9ICFwYW5Nb2RlOwogICAgICAgICAgdXBkYXRlUGFuTW9kZUJ0bigpOwogICAgICAgICAgc2V0Q3Vyc29yKHBhbk1vZGUgPyAnZ3JhYicgOiAnJyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgaWYgKHBhblN0YWdlKSB7CiAgICAgICAgcGFuU3RhZ2UuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4gewogICAgICAgICAgaWYgKGFsbG93UGFuKSBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4gewogICAgICAgICAgaWYgKGUuY29kZSA9PT0gJ1NwYWNlJykgewogICAgICAgICAgICBhbGxvd1BhbiA9IHRydWU7CiAgICAgICAgICAgIHNldEN1cnNvcignZ3JhYicpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChlKSA9PiB7CiAgICAgICAgICBpZiAoZS5jb2RlID09PSAnU3BhY2UnKSB7CiAgICAgICAgICAgIGFsbG93UGFuID0gZmFsc2U7CiAgICAgICAgICAgIGlmICghaXNQYW5uaW5nKSBzZXRDdXJzb3IoJycpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHBhblN0YWdlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7CiAgICAgICAgICBpZiAoIWlzUGFuQWN0aXZlKGUpKSByZXR1cm47CiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBpc1Bhbm5pbmcgPSB0cnVlOwogICAgICAgICAgc3RhcnRYID0gZS5jbGllbnRYOwogICAgICAgICAgc3RhcnRZID0gZS5jbGllbnRZOwogICAgICAgICAgc3RhcnRQYW5YID0gcGFuWDsKICAgICAgICAgIHN0YXJ0UGFuWSA9IHBhblk7CiAgICAgICAgICBzZXRDdXJzb3IoJ2dyYWJiaW5nJyk7CiAgICAgICAgfSk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlKSA9PiB7CiAgICAgICAgICBpZiAoIWlzUGFubmluZykgcmV0dXJuOwogICAgICAgICAgY29uc3QgZHggPSBlLmNsaWVudFggLSBzdGFydFg7CiAgICAgICAgICBjb25zdCBkeSA9IGUuY2xpZW50WSAtIHN0YXJ0WTsKICAgICAgICAgIHBhblggPSBzdGFydFBhblggKyBkeDsKICAgICAgICAgIHBhblkgPSBzdGFydFBhblkgKyBkeTsKICAgICAgICAgIGFwcGx5UGFuKCk7CiAgICAgICAgfSk7CiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCAoKSA9PiB7CiAgICAgICAgICBpZiAoaXNQYW5uaW5nKSB7CiAgICAgICAgICAgIGlzUGFubmluZyA9IGZhbHNlOwogICAgICAgICAgICBzZXRDdXJzb3IoYWxsb3dQYW4gPyAnZ3JhYicgOiAnJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcGFuU3RhZ2UuYWRkRXZlbnRMaXN0ZW5lcigKICAgICAgICAgICd3aGVlbCcsCiAgICAgICAgICAoZSkgPT4gewogICAgICAgICAgICBpZiAoIWUuY3RybEtleSAmJiAhZS5tZXRhS2V5KSByZXR1cm47CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgY29uc3QgcmVjdCA9IHBhblN0YWdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICBjb25zdCBjeCA9IGUuY2xpZW50WCAtIHJlY3QubGVmdCAtIHBhblg7CiAgICAgICAgICAgIGNvbnN0IGN5ID0gZS5jbGllbnRZIC0gcmVjdC50b3AgLSBwYW5ZOwogICAgICAgICAgICBjb25zdCBiZWZvcmUgPSBfem9vbUxldmVsOwogICAgICAgICAgICBjb25zdCBzdGVwID0gTWF0aC5tYXgoMC4wNSwgTWF0aC5taW4oMC41LCBNYXRoLmFicyhlLmRlbHRhWSkgPiAyMCA/IDAuMiA6IDAuMSkpOwogICAgICAgICAgICBjb25zdCBuZXh0ID0gTWF0aC5tYXgoMC4wNSwgTWF0aC5taW4oMjAsIGJlZm9yZSArIChlLmRlbHRhWSA+IDAgPyAtc3RlcCA6IHN0ZXApKSk7CiAgICAgICAgICAgIGlmIChuZXh0ID09PSBiZWZvcmUpIHJldHVybjsKICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBuZXh0IC8gYmVmb3JlOwogICAgICAgICAgICBwYW5YID0gcGFuWCAtIGN4ICogKHNjYWxlIC0gMSk7CiAgICAgICAgICAgIHBhblkgPSBwYW5ZIC0gY3kgKiAoc2NhbGUgLSAxKTsKICAgICAgICAgICAgYXBwbHlab29tKG5leHQpOwogICAgICAgICAgfSwKICAgICAgICAgIHsgcGFzc2l2ZTogZmFsc2UgfQogICAgICAgICk7CiAgICAgICAgbGV0IGxhc3RUb3VjaERpc3QgPSBudWxsOwogICAgICAgIGxldCB0b3VjaFN0YXJ0VGltZSA9IDA7CiAgICAgICAgbGV0IGRvdWJsZVRhcFRpbWVyID0gbnVsbDsKICAgICAgICBwYW5TdGFnZS5hZGRFdmVudExpc3RlbmVyKAogICAgICAgICAgJ3RvdWNoc3RhcnQnLAogICAgICAgICAgKGUpID0+IHsKICAgICAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgICBjb25zdCB0ID0gZS50b3VjaGVzWzBdOwogICAgICAgICAgICAgIGlzUGFubmluZyA9IHRydWU7CiAgICAgICAgICAgICAgc3RhcnRYID0gdC5jbGllbnRYOwogICAgICAgICAgICAgIHN0YXJ0WSA9IHQuY2xpZW50WTsKICAgICAgICAgICAgICBzdGFydFBhblggPSBwYW5YOwogICAgICAgICAgICAgIHN0YXJ0UGFuWSA9IHBhblk7CiAgICAgICAgICAgICAgc2V0Q3Vyc29yKCdncmFiYmluZycpOwogICAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7CiAgICAgICAgICAgICAgaWYgKG5vdyAtIHRvdWNoU3RhcnRUaW1lIDwgMzAwKSB7CiAgICAgICAgICAgICAgICAvLyBkb3VibGUgdGFwIC0+IHRvZ2dsZSAxMDAlL2ZpdAogICAgICAgICAgICAgICAgY29uc3QgeiA9IE1hdGguYWJzKF96b29tTGV2ZWwgLSAxKSA8IDAuMDEgPyBjb21wdXRlRml0Wm9vbSgpIDogMTsKICAgICAgICAgICAgICAgIGFwcGx5Wm9vbSh6KTsKICAgICAgICAgICAgICAgIGNlbnRlckluVmlldygpOwogICAgICAgICAgICAgICAgaWYgKGRvdWJsZVRhcFRpbWVyKSBjbGVhclRpbWVvdXQoZG91YmxlVGFwVGltZXIpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0b3VjaFN0YXJ0VGltZSA9IG5vdzsKICAgICAgICAgICAgICAgIGRvdWJsZVRhcFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgIGRvdWJsZVRhcFRpbWVyID0gbnVsbDsKICAgICAgICAgICAgICAgIH0sIDMyMCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDIpIHsKICAgICAgICAgICAgICAvLyBQaW5jaCBzdGFydAogICAgICAgICAgICAgIGNvbnN0IFthLCBiXSA9IGUudG91Y2hlczsKICAgICAgICAgICAgICBsYXN0VG91Y2hEaXN0ID0gTWF0aC5oeXBvdChiLmNsaWVudFggLSBhLmNsaWVudFgsIGIuY2xpZW50WSAtIGEuY2xpZW50WSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7IHBhc3NpdmU6IHRydWUgfQogICAgICAgICk7CiAgICAgICAgcGFuU3RhZ2UuYWRkRXZlbnRMaXN0ZW5lcigKICAgICAgICAgICd0b3VjaG1vdmUnLAogICAgICAgICAgKGUpID0+IHsKICAgICAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT09IDEgJiYgaXNQYW5uaW5nKSB7CiAgICAgICAgICAgICAgY29uc3QgdCA9IGUudG91Y2hlc1swXTsKICAgICAgICAgICAgICBjb25zdCBkeCA9IHQuY2xpZW50WCAtIHN0YXJ0WDsKICAgICAgICAgICAgICBjb25zdCBkeSA9IHQuY2xpZW50WSAtIHN0YXJ0WTsKICAgICAgICAgICAgICBwYW5YID0gc3RhcnRQYW5YICsgZHg7CiAgICAgICAgICAgICAgcGFuWSA9IHN0YXJ0UGFuWSArIGR5OwogICAgICAgICAgICAgIGFwcGx5UGFuKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PT0gMiAmJiBsYXN0VG91Y2hEaXN0ICE9IG51bGwpIHsKICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgY29uc3QgW2EsIGJdID0gZS50b3VjaGVzOwogICAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBNYXRoLmh5cG90KGIuY2xpZW50WCAtIGEuY2xpZW50WCwgYi5jbGllbnRZIC0gYS5jbGllbnRZKTsKICAgICAgICAgICAgICBjb25zdCByZWN0ID0gcGFuU3RhZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IChhLmNsaWVudFggKyBiLmNsaWVudFgpIC8gMiAtIHJlY3QubGVmdCAtIHBhblg7CiAgICAgICAgICAgICAgY29uc3QgY2VudGVyWSA9IChhLmNsaWVudFkgKyBiLmNsaWVudFkpIC8gMiAtIHJlY3QudG9wIC0gcGFuWTsKICAgICAgICAgICAgICBjb25zdCBiZWZvcmUgPSBfem9vbUxldmVsOwogICAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gZGlzdCAvIChsYXN0VG91Y2hEaXN0IHx8IGRpc3QpOwogICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBNYXRoLm1heCgwLjA1LCBNYXRoLm1pbigyMCwgYmVmb3JlICogc2NhbGUpKTsKICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gYmVmb3JlKSB7CiAgICAgICAgICAgICAgICBwYW5YID0gcGFuWCAtIGNlbnRlclggKiAobmV4dCAvIGJlZm9yZSAtIDEpOwogICAgICAgICAgICAgICAgcGFuWSA9IHBhblkgLSBjZW50ZXJZICogKG5leHQgLyBiZWZvcmUgLSAxKTsKICAgICAgICAgICAgICAgIGFwcGx5Wm9vbShuZXh0KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgbGFzdFRvdWNoRGlzdCA9IGRpc3Q7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7IHBhc3NpdmU6IGZhbHNlIH0KICAgICAgICApOwogICAgICAgIHBhblN0YWdlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKCkgPT4gewogICAgICAgICAgaXNQYW5uaW5nID0gZmFsc2U7CiAgICAgICAgICBsYXN0VG91Y2hEaXN0ID0gbnVsbDsKICAgICAgICAgIHNldEN1cnNvcihwYW5Nb2RlIHx8IGFsbG93UGFuID8gJ2dyYWInIDogJycpOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGNvbnN0IHNjaGVkdWxlUHJldmlldyA9ICgpID0+IHsKICAgICAgICBpZiAoX3ByZXZpZXdUaW1lcikgY2xlYXJUaW1lb3V0KF9wcmV2aWV3VGltZXIpOwogICAgICAgIGNvbnN0IHJ1biA9ICgpID0+IHsKICAgICAgICAgIF9wcmV2aWV3VGltZXIgPSBudWxsOwogICAgICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcoKTsKICAgICAgICB9OwogICAgICAgIGlmICh3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjaykgewogICAgICAgICAgX3ByZXZpZXdUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gcmVxdWVzdElkbGVDYWxsYmFjayhydW4sIHsgdGltZW91dDogMTUwIH0pLCA1MCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF9wcmV2aWV3VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShydW4pLCA1MCk7CiAgICAgICAgfQogICAgICB9OwogICAgICAvLyBUcmFjayBkcmFnZ2luZyB0byByZWR1Y2Ugd29yayBhbmQgc2tpcCBkaXRoZXJpbmcgZHVyaW5nIGRyYWcKICAgICAgY29uc3QgbWFya0RyYWdTdGFydCA9ICgpID0+IHsKICAgICAgICBfaXNEcmFnZ2luZ1NpemUgPSB0cnVlOwogICAgICB9OwogICAgICBjb25zdCBtYXJrRHJhZ0VuZCA9ICgpID0+IHsKICAgICAgICBfaXNEcmFnZ2luZ1NpemUgPSBmYWxzZTsKICAgICAgICBzY2hlZHVsZVByZXZpZXcoKTsKICAgICAgfTsKICAgICAgd2lkdGhTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBtYXJrRHJhZ1N0YXJ0KTsKICAgICAgaGVpZ2h0U2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgbWFya0RyYWdTdGFydCk7CiAgICAgIHdpZHRoU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG1hcmtEcmFnRW5kKTsKICAgICAgaGVpZ2h0U2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG1hcmtEcmFnRW5kKTsKICAgICAgd2lkdGhTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7CiAgICAgICAgb25XaWR0aElucHV0KCk7CiAgICAgICAgc2NoZWR1bGVQcmV2aWV3KCk7CiAgICAgIH0pOwogICAgICBoZWlnaHRTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7CiAgICAgICAgb25IZWlnaHRJbnB1dCgpOwogICAgICAgIHNjaGVkdWxlUHJldmlldygpOwogICAgICB9KTsKCiAgICAgIC8vIE1hc2sgcGFpbnRpbmcgVVg6IGJydXNoIHNpemUsIG1vZGVzLCByb3cvY29sdW1uIGZpbGxzLCBhbmQgcHJlY2lzZSBjb29yZHMKICAgICAgbGV0IGRyYWdnaW5nTWFzayA9IGZhbHNlOwogICAgICBsZXQgbGFzdFBhaW50WCA9IC0xLAogICAgICAgIGxhc3RQYWludFkgPSAtMTsKICAgICAgbGV0IGJydXNoU2l6ZSA9IDE7CiAgICAgIGxldCByb3dDb2xTaXplID0gMTsKICAgICAgbGV0IG1hc2tNb2RlID0gJ2lnbm9yZSc7IC8vICdpZ25vcmUnIHwgJ3VuaWdub3JlJyB8ICd0b2dnbGUnCiAgICAgIGNvbnN0IGJydXNoRWwgPSByZXNpemVDb250YWluZXIucXVlcnlTZWxlY3RvcignI21hc2tCcnVzaFNpemUnKTsKICAgICAgY29uc3QgYnJ1c2hWYWxFbCA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbWFza0JydXNoU2l6ZVZhbHVlJyk7CiAgICAgIGNvbnN0IGJ0bklnbm9yZSA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjbWFza01vZGVJZ25vcmUnKTsKICAgICAgY29uc3QgYnRuVW5pZ25vcmUgPSByZXNpemVDb250YWluZXIucXVlcnlTZWxlY3RvcignI21hc2tNb2RlVW5pZ25vcmUnKTsKICAgICAgY29uc3QgYnRuVG9nZ2xlID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNtYXNrTW9kZVRvZ2dsZScpOwogICAgICBjb25zdCBjbGVhcklnbm9yZWRCdG5FbCA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjY2xlYXJJZ25vcmVkQnRuJyk7CiAgICAgIGNvbnN0IGludmVydE1hc2tCdG4gPSByZXNpemVDb250YWluZXIucXVlcnlTZWxlY3RvcignI2ludmVydE1hc2tCdG4nKTsKICAgICAgY29uc3Qgcm93Q29sU2l6ZUVsID0gcmVzaXplQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNyb3dDb2xTaXplJyk7CiAgICAgIGNvbnN0IHJvd0NvbFNpemVWYWxFbCA9IHJlc2l6ZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcjcm93Q29sU2l6ZVZhbHVlJyk7CgogICAgICBjb25zdCB1cGRhdGVNb2RlQnV0dG9ucyA9ICgpID0+IHsKICAgICAgICBjb25zdCBtYXAgPSBbCiAgICAgICAgICBbYnRuSWdub3JlLCAnaWdub3JlJ10sCiAgICAgICAgICBbYnRuVW5pZ25vcmUsICd1bmlnbm9yZSddLAogICAgICAgICAgW2J0blRvZ2dsZSwgJ3RvZ2dsZSddLAogICAgICAgIF07CiAgICAgICAgZm9yIChjb25zdCBbZWwsIG1dIG9mIG1hcCkgewogICAgICAgICAgaWYgKCFlbCkgY29udGludWU7CiAgICAgICAgICBjb25zdCBhY3RpdmUgPSBtYXNrTW9kZSA9PT0gbTsKICAgICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIGFjdGl2ZSk7CiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsIGFjdGl2ZSA/ICd0cnVlJyA6ICdmYWxzZScpOwogICAgICAgIH0KICAgICAgfTsKICAgICAgY29uc3Qgc2V0TW9kZSA9IChtb2RlKSA9PiB7CiAgICAgICAgbWFza01vZGUgPSBtb2RlOwogICAgICAgIHVwZGF0ZU1vZGVCdXR0b25zKCk7CiAgICAgIH07CiAgICAgIGlmIChicnVzaEVsICYmIGJydXNoVmFsRWwpIHsKICAgICAgICBicnVzaEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4gewogICAgICAgICAgYnJ1c2hTaXplID0gcGFyc2VJbnQoYnJ1c2hFbC52YWx1ZSwgMTApIHx8IDE7CiAgICAgICAgICBicnVzaFZhbEVsLnRleHRDb250ZW50ID0gYnJ1c2hTaXplOwogICAgICAgIH0pOwogICAgICAgIGJydXNoVmFsRWwudGV4dENvbnRlbnQgPSBicnVzaEVsLnZhbHVlOwogICAgICAgIGJydXNoU2l6ZSA9IHBhcnNlSW50KGJydXNoRWwudmFsdWUsIDEwKSB8fCAxOwogICAgICB9CiAgICAgIGlmIChyb3dDb2xTaXplRWwgJiYgcm93Q29sU2l6ZVZhbEVsKSB7CiAgICAgICAgcm93Q29sU2l6ZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4gewogICAgICAgICAgcm93Q29sU2l6ZSA9IHBhcnNlSW50KHJvd0NvbFNpemVFbC52YWx1ZSwgMTApIHx8IDE7CiAgICAgICAgICByb3dDb2xTaXplVmFsRWwudGV4dENvbnRlbnQgPSByb3dDb2xTaXplOwogICAgICAgIH0pOwogICAgICAgIHJvd0NvbFNpemVWYWxFbC50ZXh0Q29udGVudCA9IHJvd0NvbFNpemVFbC52YWx1ZTsKICAgICAgICByb3dDb2xTaXplID0gcGFyc2VJbnQocm93Q29sU2l6ZUVsLnZhbHVlLCAxMCkgfHwgMTsKICAgICAgfQogICAgICBpZiAoYnRuSWdub3JlKSBidG5JZ25vcmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzZXRNb2RlKCdpZ25vcmUnKSk7CiAgICAgIGlmIChidG5Vbmlnbm9yZSkgYnRuVW5pZ25vcmUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzZXRNb2RlKCd1bmlnbm9yZScpKTsKICAgICAgaWYgKGJ0blRvZ2dsZSkgYnRuVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2V0TW9kZSgndG9nZ2xlJykpOwogICAgICAvLyBJbml0aWFsaXplIGJ1dHRvbiBzdGF0ZSAoZGVmYXVsdCB0byB0b2dnbGUgbW9kZSkKICAgICAgdXBkYXRlTW9kZUJ1dHRvbnMoKTsKCiAgICAgIGNvbnN0IG1hcENsaWVudFRvUGl4ZWwgPSAoY2xpZW50WCwgY2xpZW50WSkgPT4gewogICAgICAgIC8vIENvbXB1dGUgd2l0aG91dCByb3VuZGluZyB1bnRpbCBmaW5hbCBzdGVwIHRvIGF2b2lkIGRyaWZ0IGF0IGhpZ2hlciB6b29tCiAgICAgICAgY29uc3QgcmVjdCA9IGJhc2VDYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgY29uc3Qgc2NhbGVYID0gcmVjdC53aWR0aCAvIGJhc2VDYW52YXMud2lkdGg7CiAgICAgICAgY29uc3Qgc2NhbGVZID0gcmVjdC5oZWlnaHQgLyBiYXNlQ2FudmFzLmhlaWdodDsKICAgICAgICBjb25zdCBkeCA9IChjbGllbnRYIC0gcmVjdC5sZWZ0KSAvIHNjYWxlWDsKICAgICAgICBjb25zdCBkeSA9IChjbGllbnRZIC0gcmVjdC50b3ApIC8gc2NhbGVZOwogICAgICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKGR4KTsKICAgICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihkeSk7CiAgICAgICAgcmV0dXJuIHsgeCwgeSB9OwogICAgICB9OwoKICAgICAgY29uc3QgZW5zdXJlTWFzayA9ICh3LCBoKSA9PiB7CiAgICAgICAgaWYgKCFzdGF0ZS5yZXNpemVJZ25vcmVNYXNrIHx8IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2subGVuZ3RoICE9PSB3ICogaCkgewogICAgICAgICAgc3RhdGUucmVzaXplSWdub3JlTWFzayA9IG5ldyBVaW50OEFycmF5KHcgKiBoKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICBjb25zdCBwYWludENpcmNsZSA9IChjeCwgY3ksIHJhZGl1cywgdmFsdWUpID0+IHsKICAgICAgICBjb25zdCB3ID0gYmFzZUNhbnZhcy53aWR0aCwKICAgICAgICAgIGggPSBiYXNlQ2FudmFzLmhlaWdodDsKICAgICAgICBlbnN1cmVNYXNrKHcsIGgpOwogICAgICAgIGNvbnN0IHIyID0gcmFkaXVzICogcmFkaXVzOwogICAgICAgIGZvciAobGV0IHl5ID0gY3kgLSByYWRpdXM7IHl5IDw9IGN5ICsgcmFkaXVzOyB5eSsrKSB7CiAgICAgICAgICBpZiAoeXkgPCAwIHx8IHl5ID49IGgpIGNvbnRpbnVlOwogICAgICAgICAgZm9yIChsZXQgeHggPSBjeCAtIHJhZGl1czsgeHggPD0gY3ggKyByYWRpdXM7IHh4KyspIHsKICAgICAgICAgICAgaWYgKHh4IDwgMCB8fCB4eCA+PSB3KSBjb250aW51ZTsKICAgICAgICAgICAgY29uc3QgZHggPSB4eCAtIGN4LAogICAgICAgICAgICAgIGR5ID0geXkgLSBjeTsKICAgICAgICAgICAgaWYgKGR4ICogZHggKyBkeSAqIGR5IDw9IHIyKSB7CiAgICAgICAgICAgICAgY29uc3QgaWR4ID0geXkgKiB3ICsgeHg7CiAgICAgICAgICAgICAgbGV0IHZhbCA9IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2tbaWR4XTsKICAgICAgICAgICAgICBpZiAobWFza01vZGUgPT09ICd0b2dnbGUnKSB7CiAgICAgICAgICAgICAgICB2YWwgPSB2YWwgPyAwIDogMTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hc2tNb2RlID09PSAnaWdub3JlJykgewogICAgICAgICAgICAgICAgdmFsID0gMTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFsID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3RhdGUucmVzaXplSWdub3JlTWFza1tpZHhdID0gdmFsOwogICAgICAgICAgICAgIGlmIChfbWFza0RhdGEpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBpZHggKiA0OwogICAgICAgICAgICAgICAgaWYgKHZhbCkgewogICAgICAgICAgICAgICAgICBfbWFza0RhdGFbcF0gPSAyNTU7CiAgICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwICsgMV0gPSAwOwogICAgICAgICAgICAgICAgICBfbWFza0RhdGFbcCArIDJdID0gMDsKICAgICAgICAgICAgICAgICAgX21hc2tEYXRhW3AgKyAzXSA9IDE1MDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwXSA9IDA7CiAgICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwICsgMV0gPSAwOwogICAgICAgICAgICAgICAgICBfbWFza0RhdGFbcCArIDJdID0gMDsKICAgICAgICAgICAgICAgICAgX21hc2tEYXRhW3AgKyAzXSA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfbWFya0RpcnR5KHh4LCB5eSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgY29uc3QgcGFpbnRSb3cgPSAoeSwgdmFsdWUpID0+IHsKICAgICAgICBjb25zdCB3ID0gYmFzZUNhbnZhcy53aWR0aCwKICAgICAgICAgIGggPSBiYXNlQ2FudmFzLmhlaWdodDsKICAgICAgICBlbnN1cmVNYXNrKHcsIGgpOwogICAgICAgIGlmICh5IDwgMCB8fCB5ID49IGgpIHJldHVybjsKCiAgICAgICAgLy8gUGFpbnQgbXVsdGlwbGUgcm93cyBiYXNlZCBvbiByb3dDb2xTaXplCiAgICAgICAgY29uc3QgaGFsZlNpemUgPSBNYXRoLmZsb29yKHJvd0NvbFNpemUgLyAyKTsKICAgICAgICBjb25zdCBzdGFydFkgPSBNYXRoLm1heCgwLCB5IC0gaGFsZlNpemUpOwogICAgICAgIGNvbnN0IGVuZFkgPSBNYXRoLm1pbihoIC0gMSwgeSArIGhhbGZTaXplKTsKCiAgICAgICAgZm9yIChsZXQgcm93WSA9IHN0YXJ0WTsgcm93WSA8PSBlbmRZOyByb3dZKyspIHsKICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdzsgeCsrKSB7CiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHJvd1kgKiB3ICsgeDsKICAgICAgICAgICAgbGV0IHZhbCA9IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2tbaWR4XTsKICAgICAgICAgICAgaWYgKG1hc2tNb2RlID09PSAndG9nZ2xlJykgewogICAgICAgICAgICAgIHZhbCA9IHZhbCA/IDAgOiAxOwogICAgICAgICAgICB9IGVsc2UgaWYgKG1hc2tNb2RlID09PSAnaWdub3JlJykgewogICAgICAgICAgICAgIHZhbCA9IDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFsID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdGF0ZS5yZXNpemVJZ25vcmVNYXNrW2lkeF0gPSB2YWw7CiAgICAgICAgICAgIGlmIChfbWFza0RhdGEpIHsKICAgICAgICAgICAgICBjb25zdCBwID0gaWR4ICogNDsKICAgICAgICAgICAgICBpZiAodmFsKSB7CiAgICAgICAgICAgICAgICBfbWFza0RhdGFbcF0gPSAyNTU7CiAgICAgICAgICAgICAgICBfbWFza0RhdGFbcCArIDFdID0gMDsKICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwICsgMl0gPSAwOwogICAgICAgICAgICAgICAgX21hc2tEYXRhW3AgKyAzXSA9IDE1MDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX21hc2tEYXRhW3BdID0gMDsKICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwICsgMV0gPSAwOwogICAgICAgICAgICAgICAgX21hc2tEYXRhW3AgKyAyXSA9IDA7CiAgICAgICAgICAgICAgICBfbWFza0RhdGFbcCArIDNdID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChfbWFza0RhdGEpIHsKICAgICAgICAgICAgX21hcmtEaXJ0eSgwLCByb3dZKTsKICAgICAgICAgICAgX21hcmtEaXJ0eSh3IC0gMSwgcm93WSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgY29uc3QgcGFpbnRDb2x1bW4gPSAoeCwgdmFsdWUpID0+IHsKICAgICAgICBjb25zdCB3ID0gYmFzZUNhbnZhcy53aWR0aCwKICAgICAgICAgIGggPSBiYXNlQ2FudmFzLmhlaWdodDsKICAgICAgICBlbnN1cmVNYXNrKHcsIGgpOwogICAgICAgIGlmICh4IDwgMCB8fCB4ID49IHcpIHJldHVybjsKCiAgICAgICAgLy8gUGFpbnQgbXVsdGlwbGUgY29sdW1ucyBiYXNlZCBvbiByb3dDb2xTaXplCiAgICAgICAgY29uc3QgaGFsZlNpemUgPSBNYXRoLmZsb29yKHJvd0NvbFNpemUgLyAyKTsKICAgICAgICBjb25zdCBzdGFydFggPSBNYXRoLm1heCgwLCB4IC0gaGFsZlNpemUpOwogICAgICAgIGNvbnN0IGVuZFggPSBNYXRoLm1pbih3IC0gMSwgeCArIGhhbGZTaXplKTsKCiAgICAgICAgZm9yIChsZXQgY29sWCA9IHN0YXJ0WDsgY29sWCA8PSBlbmRYOyBjb2xYKyspIHsKICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaDsgeSsrKSB7CiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHkgKiB3ICsgY29sWDsKICAgICAgICAgICAgbGV0IHZhbCA9IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2tbaWR4XTsKICAgICAgICAgICAgaWYgKG1hc2tNb2RlID09PSAndG9nZ2xlJykgewogICAgICAgICAgICAgIHZhbCA9IHZhbCA/IDAgOiAxOwogICAgICAgICAgICB9IGVsc2UgaWYgKG1hc2tNb2RlID09PSAnaWdub3JlJykgewogICAgICAgICAgICAgIHZhbCA9IDE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFsID0gMDsKICAgICAgICAgICAgfQogICAgICAgICAgICBzdGF0ZS5yZXNpemVJZ25vcmVNYXNrW2lkeF0gPSB2YWw7CiAgICAgICAgICAgIGlmIChfbWFza0RhdGEpIHsKICAgICAgICAgICAgICBjb25zdCBwID0gaWR4ICogNDsKICAgICAgICAgICAgICBpZiAodmFsKSB7CiAgICAgICAgICAgICAgICBfbWFza0RhdGFbcF0gPSAyNTU7CiAgICAgICAgICAgICAgICBfbWFza0RhdGFbcCArIDFdID0gMDsKICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwICsgMl0gPSAwOwogICAgICAgICAgICAgICAgX21hc2tEYXRhW3AgKyAzXSA9IDE1MDsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX21hc2tEYXRhW3BdID0gMDsKICAgICAgICAgICAgICAgIF9tYXNrRGF0YVtwICsgMV0gPSAwOwogICAgICAgICAgICAgICAgX21hc2tEYXRhW3AgKyAyXSA9IDA7CiAgICAgICAgICAgICAgICBfbWFza0RhdGFbcCArIDNdID0gMDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChfbWFza0RhdGEpIHsKICAgICAgICAgICAgX21hcmtEaXJ0eShjb2xYLCAwKTsKICAgICAgICAgICAgX21hcmtEaXJ0eShjb2xYLCBoIC0gMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwoKICAgICAgY29uc3QgcmVkcmF3TWFza092ZXJsYXkgPSAoKSA9PiB7CiAgICAgICAgLy8gT25seSBmbHVzaCB0aGUgZGlydHkgcmVnaW9uOyBmdWxsIHJlYnVpbGQgaGFwcGVucyBvbiBzaXplIGNoYW5nZQogICAgICAgIF9mbHVzaERpcnR5KCk7CiAgICAgIH07CgogICAgICBjb25zdCBoYW5kbGVQYWludCA9IChlKSA9PiB7CiAgICAgICAgLy8gU3VwcHJlc3MgcGFpbnRpbmcgd2hpbGUgcGFubmluZwogICAgICAgIGlmICgoZS5idXR0b25zICYgNCkgPT09IDQgfHwgKGUuYnV0dG9ucyAmIDIpID09PSAyIHx8IGFsbG93UGFuKSByZXR1cm47CiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBtYXBDbGllbnRUb1BpeGVsKGUuY2xpZW50WCwgZS5jbGllbnRZKTsKICAgICAgICBjb25zdCB3ID0gYmFzZUNhbnZhcy53aWR0aCwKICAgICAgICAgIGggPSBiYXNlQ2FudmFzLmhlaWdodDsKICAgICAgICBpZiAoeCA8IDAgfHwgeSA8IDAgfHwgeCA+PSB3IHx8IHkgPj0gaCkgcmV0dXJuOwogICAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoYnJ1c2hTaXplIC8gMikpOwogICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7CiAgICAgICAgICBwYWludFJvdyh5KTsKICAgICAgICB9IGVsc2UgaWYgKGUuYWx0S2V5KSB7CiAgICAgICAgICBwYWludENvbHVtbih4KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcGFpbnRDaXJjbGUoeCwgeSwgcmFkaXVzKTsKICAgICAgICB9CiAgICAgICAgbGFzdFBhaW50WCA9IHg7CiAgICAgICAgbGFzdFBhaW50WSA9IHk7CiAgICAgICAgcmVkcmF3TWFza092ZXJsYXkoKTsKICAgICAgfTsKCiAgICAgIG1hc2tDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGUpID0+IHsKICAgICAgICBpZiAoZS5idXR0b24gPT09IDEgfHwgZS5idXR0b24gPT09IDIgfHwgYWxsb3dQYW4pIHJldHVybjsgLy8gbGV0IHBhbiBoYW5kbGVyIG1hbmFnZQogICAgICAgIGRyYWdnaW5nTWFzayA9IHRydWU7CiAgICAgICAgaGFuZGxlUGFpbnQoZSk7CiAgICAgIH0pOwogICAgICAvLyBBdm9pZCBoaWphY2tpbmcgdG91Y2ggZ2VzdHVyZXMgZm9yIHBhbm5pbmcvem9vbWluZwogICAgICBtYXNrQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoCiAgICAgICAgJ3RvdWNoc3RhcnQnLAogICAgICAgIChlKSA9PiB7CiAgICAgICAgICAvKiBsZXQgcGFuU3RhZ2UgaGFuZGxlICovCiAgICAgICAgfSwKICAgICAgICB7IHBhc3NpdmU6IHRydWUgfQogICAgICApOwogICAgICBtYXNrQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoCiAgICAgICAgJ3RvdWNobW92ZScsCiAgICAgICAgKGUpID0+IHsKICAgICAgICAgIC8qIGxldCBwYW5TdGFnZSBoYW5kbGUgKi8KICAgICAgICB9LAogICAgICAgIHsgcGFzc2l2ZTogdHJ1ZSB9CiAgICAgICk7CiAgICAgIG1hc2tDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigKICAgICAgICAndG91Y2hlbmQnLAogICAgICAgIChlKSA9PiB7CiAgICAgICAgICAvKiBsZXQgcGFuU3RhZ2UgaGFuZGxlICovCiAgICAgICAgfSwKICAgICAgICB7IHBhc3NpdmU6IHRydWUgfQogICAgICApOwogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGUpID0+IHsKICAgICAgICBpZiAoZHJhZ2dpbmdNYXNrKSBoYW5kbGVQYWludChlKTsKICAgICAgfSk7CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4gewogICAgICAgIGlmIChkcmFnZ2luZ01hc2spIHsKICAgICAgICAgIGRyYWdnaW5nTWFzayA9IGZhbHNlOwogICAgICAgICAgc2F2ZUJvdFNldHRpbmdzKCk7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlmIChjbGVhcklnbm9yZWRCdG5FbCkKICAgICAgICBjbGVhcklnbm9yZWRCdG5FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICAgIGNvbnN0IHcgPSBiYXNlQ2FudmFzLndpZHRoLAogICAgICAgICAgICBoID0gYmFzZUNhbnZhcy5oZWlnaHQ7CiAgICAgICAgICBpZiAoc3RhdGUucmVzaXplSWdub3JlTWFzaykgc3RhdGUucmVzaXplSWdub3JlTWFzay5maWxsKDApOwogICAgICAgICAgX2Vuc3VyZU1hc2tPdmVybGF5QnVmZmVycyh3LCBoLCB0cnVlKTsKICAgICAgICAgIF91cGRhdGVSZXNpemVQcmV2aWV3KCk7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICB9KTsKCiAgICAgIGlmIChpbnZlcnRNYXNrQnRuKQogICAgICAgIGludmVydE1hc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7CiAgICAgICAgICBpZiAoIXN0YXRlLnJlc2l6ZUlnbm9yZU1hc2spIHJldHVybjsKICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGUucmVzaXplSWdub3JlTWFzay5sZW5ndGg7IGkrKykKICAgICAgICAgICAgc3RhdGUucmVzaXplSWdub3JlTWFza1tpXSA9IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2tbaV0gPyAwIDogMTsKICAgICAgICAgIGNvbnN0IHcgPSBiYXNlQ2FudmFzLndpZHRoLAogICAgICAgICAgICBoID0gYmFzZUNhbnZhcy5oZWlnaHQ7CiAgICAgICAgICBfZW5zdXJlTWFza092ZXJsYXlCdWZmZXJzKHcsIGgsIHRydWUpOwogICAgICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcoKTsKICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIH0pOwoKICAgICAgY29uZmlybVJlc2l6ZS5vbmNsaWNrID0gYXN5bmMgKCkgPT4gewogICAgICAgIGNvbnN0IG5ld1dpZHRoID0gcGFyc2VJbnQod2lkdGhTbGlkZXIudmFsdWUsIDEwKTsKICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSBwYXJzZUludChoZWlnaHRTbGlkZXIudmFsdWUsIDEwKTsKCiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIGZpbmFsIHBhbGV0dGVkIGltYWdlIGRhdGEKICAgICAgICBjb25zdCB0ZW1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7CiAgICAgICAgY29uc3QgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICB0ZW1wQ2FudmFzLndpZHRoID0gbmV3V2lkdGg7CiAgICAgICAgdGVtcENhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7CiAgICAgICAgdGVtcEN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTsKICAgICAgICBpZiAoYmFzZVByb2Nlc3NvciAhPT0gcHJvY2Vzc29yICYmICghYmFzZVByb2Nlc3Nvci5pbWcgfHwgIWJhc2VQcm9jZXNzb3IuY2FudmFzKSkgewogICAgICAgICAgYXdhaXQgYmFzZVByb2Nlc3Nvci5sb2FkKCk7CiAgICAgICAgfQogICAgICAgIHRlbXBDdHguZHJhd0ltYWdlKGJhc2VQcm9jZXNzb3IuaW1nLCAwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTsKICAgICAgICBjb25zdCBpbWdEYXRhID0gdGVtcEN0eC5nZXRJbWFnZURhdGEoMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7CiAgICAgICAgY29uc3QgZGF0YSA9IGltZ0RhdGEuZGF0YTsKICAgICAgICBjb25zdCB0VGhyZXNoMiA9IHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZCB8fCBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRDsKICAgICAgICBsZXQgdG90YWxWYWxpZFBpeGVscyA9IDA7CiAgICAgICAgY29uc3QgbWFzayA9CiAgICAgICAgICBzdGF0ZS5yZXNpemVJZ25vcmVNYXNrICYmIHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2subGVuZ3RoID09PSBuZXdXaWR0aCAqIG5ld0hlaWdodAogICAgICAgICAgICA/IHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2sKICAgICAgICAgICAgOiBudWxsOwoKICAgICAgICBjb25zdCBhcHBseUZTRGl0aGVyRmluYWwgPSBhc3luYyAoKSA9PiB7CiAgICAgICAgICBjb25zdCB3ID0gbmV3V2lkdGgsCiAgICAgICAgICAgIGggPSBuZXdIZWlnaHQ7CiAgICAgICAgICBjb25zdCBuID0gdyAqIGg7CiAgICAgICAgICBjb25zdCB7IHdvcmssIGVsaWdpYmxlIH0gPSBlbnN1cmVEaXRoZXJCdWZmZXJzKG4pOwogICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoOyB5KyspIHsKICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3OyB4KyspIHsKICAgICAgICAgICAgICBjb25zdCBpZHggPSB5ICogdyArIHg7CiAgICAgICAgICAgICAgY29uc3QgaTQgPSBpZHggKiA0OwogICAgICAgICAgICAgIGNvbnN0IHIgPSBkYXRhW2k0XSwKICAgICAgICAgICAgICAgIGcgPSBkYXRhW2k0ICsgMV0sCiAgICAgICAgICAgICAgICBiID0gZGF0YVtpNCArIDJdLAogICAgICAgICAgICAgICAgYSA9IGRhdGFbaTQgKyAzXTsKICAgICAgICAgICAgICBjb25zdCBtYXNrZWQgPSBtYXNrICYmIG1hc2tbaWR4XTsKICAgICAgICAgICAgICBjb25zdCBpc0VsaWdpYmxlID0KICAgICAgICAgICAgICAgICFtYXNrZWQgJiYKICAgICAgICAgICAgICAgIChzdGF0ZS5wYWludFRyYW5zcGFyZW50UGl4ZWxzIHx8IGEgPj0gdFRocmVzaDIpICYmCiAgICAgICAgICAgICAgICAoc3RhdGUucGFpbnRXaGl0ZVBpeGVscyB8fCAhVXRpbHMuaXNXaGl0ZVBpeGVsKHIsIGcsIGIpKTsKICAgICAgICAgICAgICBlbGlnaWJsZVtpZHhdID0gaXNFbGlnaWJsZSA/IDEgOiAwOwogICAgICAgICAgICAgIHdvcmtbaWR4ICogM10gPSByOwogICAgICAgICAgICAgIHdvcmtbaWR4ICogMyArIDFdID0gZzsKICAgICAgICAgICAgICB3b3JrW2lkeCAqIDMgKyAyXSA9IGI7CiAgICAgICAgICAgICAgaWYgKCFpc0VsaWdpYmxlKSB7CiAgICAgICAgICAgICAgICBkYXRhW2k0ICsgM10gPSAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBZaWVsZCB0byBrZWVwIFVJIHJlc3BvbnNpdmUKICAgICAgICAgICAgaWYgKCh5ICYgMTUpID09PSAwKSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCBkaWZmdXNlID0gKG54LCBueSwgZXIsIGVnLCBlYiwgZmFjdG9yKSA9PiB7CiAgICAgICAgICAgIGlmIChueCA8IDAgfHwgbnggPj0gdyB8fCBueSA8IDAgfHwgbnkgPj0gaCkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCBuaWR4ID0gbnkgKiB3ICsgbng7CiAgICAgICAgICAgIGlmICghZWxpZ2libGVbbmlkeF0pIHJldHVybjsKICAgICAgICAgICAgY29uc3QgYmFzZSA9IG5pZHggKiAzOwogICAgICAgICAgICB3b3JrW2Jhc2VdID0gTWF0aC5taW4oMjU1LCBNYXRoLm1heCgwLCB3b3JrW2Jhc2VdICsgZXIgKiBmYWN0b3IpKTsKICAgICAgICAgICAgd29ya1tiYXNlICsgMV0gPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIHdvcmtbYmFzZSArIDFdICsgZWcgKiBmYWN0b3IpKTsKICAgICAgICAgICAgd29ya1tiYXNlICsgMl0gPSBNYXRoLm1pbigyNTUsIE1hdGgubWF4KDAsIHdvcmtbYmFzZSArIDJdICsgZWIgKiBmYWN0b3IpKTsKICAgICAgICAgIH07CgogICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoOyB5KyspIHsKICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3OyB4KyspIHsKICAgICAgICAgICAgICBjb25zdCBpZHggPSB5ICogdyArIHg7CiAgICAgICAgICAgICAgaWYgKCFlbGlnaWJsZVtpZHhdKSBjb250aW51ZTsKICAgICAgICAgICAgICBjb25zdCBiYXNlID0gaWR4ICogMzsKICAgICAgICAgICAgICBjb25zdCByMCA9IHdvcmtbYmFzZV0sCiAgICAgICAgICAgICAgICBnMCA9IHdvcmtbYmFzZSArIDFdLAogICAgICAgICAgICAgICAgYjAgPSB3b3JrW2Jhc2UgKyAyXTsKICAgICAgICAgICAgICBjb25zdCBbbnIsIG5nLCBuYl0gPSBVdGlscy5maW5kQ2xvc2VzdFBhbGV0dGVDb2xvcigKICAgICAgICAgICAgICAgIHIwLAogICAgICAgICAgICAgICAgZzAsCiAgICAgICAgICAgICAgICBiMCwKICAgICAgICAgICAgICAgIHN0YXRlLmFjdGl2ZUNvbG9yUGFsZXR0ZQogICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgY29uc3QgaTQgPSBpZHggKiA0OwogICAgICAgICAgICAgIGRhdGFbaTRdID0gbnI7CiAgICAgICAgICAgICAgZGF0YVtpNCArIDFdID0gbmc7CiAgICAgICAgICAgICAgZGF0YVtpNCArIDJdID0gbmI7CiAgICAgICAgICAgICAgZGF0YVtpNCArIDNdID0gMjU1OwogICAgICAgICAgICAgIHRvdGFsVmFsaWRQaXhlbHMrKzsKCiAgICAgICAgICAgICAgY29uc3QgZXIgPSByMCAtIG5yOwogICAgICAgICAgICAgIGNvbnN0IGVnID0gZzAgLSBuZzsKICAgICAgICAgICAgICBjb25zdCBlYiA9IGIwIC0gbmI7CgogICAgICAgICAgICAgIGRpZmZ1c2UoeCArIDEsIHksIGVyLCBlZywgZWIsIDcgLyAxNik7CiAgICAgICAgICAgICAgZGlmZnVzZSh4IC0gMSwgeSArIDEsIGVyLCBlZywgZWIsIDMgLyAxNik7CiAgICAgICAgICAgICAgZGlmZnVzZSh4LCB5ICsgMSwgZXIsIGVnLCBlYiwgNSAvIDE2KTsKICAgICAgICAgICAgICBkaWZmdXNlKHggKyAxLCB5ICsgMSwgZXIsIGVnLCBlYiwgMSAvIDE2KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBZaWVsZCBldmVyeSByb3cgdG8gcmVkdWNlIGphbmsKICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgaWYgKHN0YXRlLmRpdGhlcmluZ0VuYWJsZWQpIHsKICAgICAgICAgIGF3YWl0IGFwcGx5RlNEaXRoZXJGaW5hbCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHsKICAgICAgICAgICAgY29uc3QgciA9IGRhdGFbaV0sCiAgICAgICAgICAgICAgZyA9IGRhdGFbaSArIDFdLAogICAgICAgICAgICAgIGIgPSBkYXRhW2kgKyAyXSwKICAgICAgICAgICAgICBhID0gZGF0YVtpICsgM107CiAgICAgICAgICAgIGNvbnN0IG1hc2tlZCA9IG1hc2sgJiYgbWFza1tpID4+IDJdOwogICAgICAgICAgICBjb25zdCBpc1RyYW5zcGFyZW50ID0gKCFzdGF0ZS5wYWludFRyYW5zcGFyZW50UGl4ZWxzICYmIGEgPCB0VGhyZXNoMikgfHwgbWFza2VkOwogICAgICAgICAgICBjb25zdCBpc1doaXRlQW5kU2tpcHBlZCA9ICFzdGF0ZS5wYWludFdoaXRlUGl4ZWxzICYmIFV0aWxzLmlzV2hpdGVQaXhlbChyLCBnLCBiKTsKICAgICAgICAgICAgaWYgKGlzVHJhbnNwYXJlbnQgfHwgaXNXaGl0ZUFuZFNraXBwZWQpIHsKICAgICAgICAgICAgICBkYXRhW2kgKyAzXSA9IDA7IC8vIG92ZXJsYXkgdHJhbnNwYXJlbmN5CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdG90YWxWYWxpZFBpeGVscysrOwogICAgICAgICAgICBjb25zdCBbbnIsIG5nLCBuYl0gPSBVdGlscy5maW5kQ2xvc2VzdFBhbGV0dGVDb2xvcihyLCBnLCBiLCBzdGF0ZS5hY3RpdmVDb2xvclBhbGV0dGUpOwogICAgICAgICAgICBkYXRhW2ldID0gbnI7CiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gbmc7CiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gbmI7CiAgICAgICAgICAgIGRhdGFbaSArIDNdID0gMjU1OwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0ZW1wQ3R4LnB1dEltYWdlRGF0YShpbWdEYXRhLCAwLCAwKTsKCiAgICAgICAgLy8gU2F2ZSB0aGUgZmluYWwgcGl4ZWwgZGF0YSBmb3IgcGFpbnRpbmcKICAgICAgICAvLyBQZXJzaXN0IHRoZSBwYWxldHRlZCAoYW5kIHBvc3NpYmx5IGRpdGhlcmVkKSBwaXhlbHMgc28gcGFpbnRpbmcgdXNlcyB0aGUgc2FtZSBvdXRwdXQgc2VlbiBpbiBvdmVybGF5CiAgICAgICAgY29uc3QgcGFsZXR0ZWRQaXhlbHMgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoaW1nRGF0YS5kYXRhKTsKICAgICAgICBzdGF0ZS5pbWFnZURhdGEucGl4ZWxzID0gcGFsZXR0ZWRQaXhlbHM7CiAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLndpZHRoID0gbmV3V2lkdGg7CiAgICAgICAgc3RhdGUuaW1hZ2VEYXRhLmhlaWdodCA9IG5ld0hlaWdodDsKICAgICAgICBzdGF0ZS5pbWFnZURhdGEudG90YWxQaXhlbHMgPSB0b3RhbFZhbGlkUGl4ZWxzOwogICAgICAgIHN0YXRlLnRvdGFsUGl4ZWxzID0gdG90YWxWYWxpZFBpeGVsczsKICAgICAgICBzdGF0ZS5wYWludGVkUGl4ZWxzID0gMDsKCiAgICAgICAgc3RhdGUucmVzaXplU2V0dGluZ3MgPSB7CiAgICAgICAgICBiYXNlV2lkdGg6IHdpZHRoLAogICAgICAgICAgYmFzZUhlaWdodDogaGVpZ2h0LAogICAgICAgICAgd2lkdGg6IG5ld1dpZHRoLAogICAgICAgICAgaGVpZ2h0OiBuZXdIZWlnaHQsCiAgICAgICAgfTsKICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKCiAgICAgICAgY29uc3QgZmluYWxJbWFnZUJpdG1hcCA9IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKHRlbXBDYW52YXMpOwogICAgICAgIGF3YWl0IG92ZXJsYXlNYW5hZ2VyLnNldEltYWdlKGZpbmFsSW1hZ2VCaXRtYXApOwogICAgICAgIG92ZXJsYXlNYW5hZ2VyLmVuYWJsZSgpOwogICAgICAgIHRvZ2dsZU92ZXJsYXlCdG4uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7CiAgICAgICAgdG9nZ2xlT3ZlcmxheUJ0bi5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICd0cnVlJyk7CgogICAgICAgIC8vIEtlZXAgc3RhdGUuaW1hZ2VEYXRhLnByb2Nlc3NvciBhcyB0aGUgb3JpZ2luYWwtYmFzZWQgc291cmNlOyBwYWludGluZyB1c2VzIHBhbGV0dGVkIHBpeGVscyBhbHJlYWR5IHN0b3JlZAoKICAgICAgICB1cGRhdGVTdGF0cygpOwogICAgICAgIHVwZGF0ZVVJKCdyZXNpemVTdWNjZXNzJywgJ3N1Y2Nlc3MnLCB7CiAgICAgICAgICB3aWR0aDogbmV3V2lkdGgsCiAgICAgICAgICBoZWlnaHQ6IG5ld0hlaWdodCwKICAgICAgICB9KTsKICAgICAgICBjbG9zZVJlc2l6ZURpYWxvZygpOwogICAgICB9OwoKICAgICAgZG93bmxvYWRQcmV2aWV3QnRuLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbnN0IHcgPSBiYXNlQ2FudmFzLndpZHRoLAogICAgICAgICAgICBoID0gYmFzZUNhbnZhcy5oZWlnaHQ7CiAgICAgICAgICBjb25zdCBvdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTsKICAgICAgICAgIG91dC53aWR0aCA9IHc7CiAgICAgICAgICBvdXQuaGVpZ2h0ID0gaDsKICAgICAgICAgIGNvbnN0IG9jdHggPSBvdXQuZ2V0Q29udGV4dCgnMmQnKTsKICAgICAgICAgIG9jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7CiAgICAgICAgICBvY3R4LmRyYXdJbWFnZShiYXNlQ2FudmFzLCAwLCAwKTsKICAgICAgICAgIG9jdHguZHJhd0ltYWdlKG1hc2tDYW52YXMsIDAsIDApOwogICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSAnd3BsYWNlLXByZXZpZXcucG5nJzsKICAgICAgICAgIGxpbmsuaHJlZiA9IG91dC50b0RhdGFVUkwoKTsKICAgICAgICAgIGxpbmsuY2xpY2soKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBkb3dubG9hZCBwcmV2aWV3OicsIGUpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIGNhbmNlbFJlc2l6ZS5vbmNsaWNrID0gY2xvc2VSZXNpemVEaWFsb2c7CgogICAgICByZXNpemVPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICByZXNpemVDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CgogICAgICAvLyBSZWluaXRpYWxpemUgY29sb3IgcGFsZXR0ZSB3aXRoIGN1cnJlbnQgYXZhaWxhYmxlIGNvbG9ycwogICAgICBpbml0aWFsaXplQ29sb3JQYWxldHRlKHJlc2l6ZUNvbnRhaW5lcik7CgogICAgICBfdXBkYXRlUmVzaXplUHJldmlldygpOwogICAgICBfcmVzaXplRGlhbG9nQ2xlYW51cCA9ICgpID0+IHsKICAgICAgICB0cnkgewogICAgICAgICAgem9vbVNsaWRlci5yZXBsYWNlV2l0aCh6b29tU2xpZGVyLmNsb25lTm9kZSh0cnVlKSk7CiAgICAgICAgfSBjYXRjaCB7fQogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoem9vbUluQnRuKSB6b29tSW5CdG4ucmVwbGFjZVdpdGgoem9vbUluQnRuLmNsb25lTm9kZSh0cnVlKSk7CiAgICAgICAgfSBjYXRjaCB7fQogICAgICAgIHRyeSB7CiAgICAgICAgICBpZiAoem9vbU91dEJ0bikgem9vbU91dEJ0bi5yZXBsYWNlV2l0aCh6b29tT3V0QnRuLmNsb25lTm9kZSh0cnVlKSk7CiAgICAgICAgfSBjYXRjaCB7fQogICAgICB9OwogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBpZiAodHlwZW9mIGNvbXB1dGVGaXRab29tID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBjb25zdCB6ID0gY29tcHV0ZUZpdFpvb20oKTsKICAgICAgICAgIGlmICghaXNOYU4oeikgJiYgaXNGaW5pdGUoeikpIHsKICAgICAgICAgICAgYXBwbHlab29tKHopOwogICAgICAgICAgICBjZW50ZXJJblZpZXcoKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2VudGVySW5WaWV3KCk7CiAgICAgICAgfQogICAgICB9LCAwKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbG9zZVJlc2l6ZURpYWxvZygpIHsKICAgICAgdHJ5IHsKICAgICAgICBpZiAodHlwZW9mIF9yZXNpemVEaWFsb2dDbGVhbnVwID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBfcmVzaXplRGlhbG9nQ2xlYW51cCgpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCB7fQogICAgICByZXNpemVPdmVybGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgIHJlc2l6ZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICBfdXBkYXRlUmVzaXplUHJldmlldyA9ICgpID0+IHt9OwogICAgICB0cnkgewogICAgICAgIGlmICh0eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbicgJiYgX3BhblJhZikgewogICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoX3BhblJhZik7CiAgICAgICAgfQogICAgICB9IGNhdGNoIHt9CiAgICAgIHRyeSB7CiAgICAgICAgaWYgKF9wcmV2aWV3VGltZXIpIHsKICAgICAgICAgIGNsZWFyVGltZW91dChfcHJldmlld1RpbWVyKTsKICAgICAgICAgIF9wcmV2aWV3VGltZXIgPSBudWxsOwogICAgICAgIH0KICAgICAgfSBjYXRjaCB7fQogICAgICBfbWFza0ltYWdlRGF0YSA9IG51bGw7CiAgICAgIF9tYXNrRGF0YSA9IG51bGw7CiAgICAgIF9kaXJ0eSA9IG51bGw7CiAgICAgIF9kaXRoZXJXb3JrQnVmID0gbnVsbDsKICAgICAgX2RpdGhlckVsaWdpYmxlQnVmID0gbnVsbDsKICAgICAgX3Jlc2l6ZURpYWxvZ0NsZWFudXAgPSBudWxsOwogICAgfQoKICAgIGlmICh1cGxvYWRCdG4pIHsKICAgICAgdXBsb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4gewogICAgICAgIGNvbnN0IGF2YWlsYWJsZUNvbG9ycyA9IFV0aWxzLmV4dHJhY3RBdmFpbGFibGVDb2xvcnMoKTsKICAgICAgICBpZiAoYXZhaWxhYmxlQ29sb3JzID09PSBudWxsIHx8IGF2YWlsYWJsZUNvbG9ycy5sZW5ndGggPCAxMCkgewogICAgICAgICAgdXBkYXRlVUkoJ25vQ29sb3JzRm91bmQnLCAnZXJyb3InKTsKICAgICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdub0NvbG9yc0ZvdW5kJyksICdlcnJvcicpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFzdGF0ZS5jb2xvcnNDaGVja2VkKSB7CiAgICAgICAgICBzdGF0ZS5hdmFpbGFibGVDb2xvcnMgPSBhdmFpbGFibGVDb2xvcnM7CiAgICAgICAgICBzdGF0ZS5jb2xvcnNDaGVja2VkID0gdHJ1ZTsKICAgICAgICAgIHVwZGF0ZVVJKCdjb2xvcnNGb3VuZCcsICdzdWNjZXNzJywgeyBjb3VudDogYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCB9KTsKICAgICAgICAgIHVwZGF0ZVN0YXRzKCk7CiAgICAgICAgICBzZWxlY3RQb3NCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIC8vIE9ubHkgZW5hYmxlIHJlc2l6ZSBidXR0b24gaWYgaW1hZ2UgaXMgYWxzbyBsb2FkZWQKICAgICAgICAgIGlmIChzdGF0ZS5pbWFnZUxvYWRlZCkgewogICAgICAgICAgICByZXNpemVCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICB1cGRhdGVVSSgnbG9hZGluZ0ltYWdlJywgJ2RlZmF1bHQnKTsKICAgICAgICAgIGNvbnN0IGltYWdlU3JjID0gYXdhaXQgVXRpbHMuY3JlYXRlSW1hZ2VVcGxvYWRlcigpOwogICAgICAgICAgaWYgKCFpbWFnZVNyYykgewogICAgICAgICAgICB1cGRhdGVVSSgnY29sb3JzRm91bmQnLCAnc3VjY2VzcycsIHsKICAgICAgICAgICAgICBjb3VudDogc3RhdGUuYXZhaWxhYmxlQ29sb3JzLmxlbmd0aCwKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCBwcm9jZXNzb3IgPSBuZXcgSW1hZ2VQcm9jZXNzb3IoaW1hZ2VTcmMpOwogICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLmxvYWQoKTsKCiAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHByb2Nlc3Nvci5nZXREaW1lbnNpb25zKCk7CiAgICAgICAgICBjb25zdCBwaXhlbHMgPSBwcm9jZXNzb3IuZ2V0UGl4ZWxEYXRhKCk7CgogICAgICAgICAgbGV0IHRvdGFsVmFsaWRQaXhlbHMgPSAwOwogICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwaXhlbHMubGVuZ3RoOyBpICs9IDQpIHsKICAgICAgICAgICAgY29uc3QgaXNUcmFuc3BhcmVudCA9CiAgICAgICAgICAgICAgIXN0YXRlLnBhaW50VHJhbnNwYXJlbnRQaXhlbHMgJiYKICAgICAgICAgICAgICBwaXhlbHNbaSArIDNdIDwgKHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZCB8fCBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRCk7CiAgICAgICAgICAgIGNvbnN0IGlzV2hpdGVBbmRTa2lwcGVkID0KICAgICAgICAgICAgICAhc3RhdGUucGFpbnRXaGl0ZVBpeGVscyAmJgogICAgICAgICAgICAgIFV0aWxzLmlzV2hpdGVQaXhlbChwaXhlbHNbaV0sIHBpeGVsc1tpICsgMV0sIHBpeGVsc1tpICsgMl0pOwogICAgICAgICAgICBpZiAoIWlzVHJhbnNwYXJlbnQgJiYgIWlzV2hpdGVBbmRTa2lwcGVkKSB7CiAgICAgICAgICAgICAgdG90YWxWYWxpZFBpeGVscysrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgc3RhdGUuaW1hZ2VEYXRhID0gewogICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICBwaXhlbHMsCiAgICAgICAgICAgIHRvdGFsUGl4ZWxzOiB0b3RhbFZhbGlkUGl4ZWxzLAogICAgICAgICAgICBwcm9jZXNzb3IsCiAgICAgICAgICB9OwoKICAgICAgICAgIHN0YXRlLnRvdGFsUGl4ZWxzID0gdG90YWxWYWxpZFBpeGVsczsKICAgICAgICAgIHN0YXRlLnBhaW50ZWRQaXhlbHMgPSAwOwogICAgICAgICAgc3RhdGUuaW1hZ2VMb2FkZWQgPSB0cnVlOwogICAgICAgICAgc3RhdGUubGFzdFBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07CgogICAgICAgICAgLy8gSW5pdGlhbGl6ZSBwYWludGVkIG1hcCBmb3IgdHJhY2tpbmcKICAgICAgICAgIFV0aWxzLmluaXRpYWxpemVQYWludGVkTWFwKHdpZHRoLCBoZWlnaHQpOwoKICAgICAgICAgIC8vIE5ldyBpbWFnZTogY2xlYXIgcHJldmlvdXMgcmVzaXplIHNldHRpbmdzCiAgICAgICAgICBzdGF0ZS5yZXNpemVTZXR0aW5ncyA9IG51bGw7CiAgICAgICAgICAvLyBBbHNvIGNsZWFyIGFueSBwcmV2aW91cyBpZ25vcmUgbWFzawogICAgICAgICAgc3RhdGUucmVzaXplSWdub3JlTWFzayA9IG51bGw7CiAgICAgICAgICAvLyBTYXZlIG9yaWdpbmFsIGltYWdlIGZvciB0aGlzIGJyb3dzZXIgKGRhdGFVcmwgKyBkaW1zKQogICAgICAgICAgc3RhdGUub3JpZ2luYWxJbWFnZSA9IHsgZGF0YVVybDogaW1hZ2VTcmMsIHdpZHRoLCBoZWlnaHQgfTsKICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwoKICAgICAgICAgIC8vIFVzZSB0aGUgb3JpZ2luYWwgaW1hZ2UgZm9yIHRoZSBvdmVybGF5IGluaXRpYWxseQogICAgICAgICAgY29uc3QgaW1hZ2VCaXRtYXAgPSBhd2FpdCBjcmVhdGVJbWFnZUJpdG1hcChwcm9jZXNzb3IuaW1nKTsKICAgICAgICAgIGF3YWl0IG92ZXJsYXlNYW5hZ2VyLnNldEltYWdlKGltYWdlQml0bWFwKTsKICAgICAgICAgIG92ZXJsYXlNYW5hZ2VyLmVuYWJsZSgpOwogICAgICAgICAgdG9nZ2xlT3ZlcmxheUJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgdG9nZ2xlT3ZlcmxheUJ0bi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTsKICAgICAgICAgIHRvZ2dsZU92ZXJsYXlCdG4uc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAndHJ1ZScpOwoKICAgICAgICAgIC8vIE9ubHkgZW5hYmxlIHJlc2l6ZSBidXR0b24gaWYgY29sb3JzIGhhdmUgYWxzbyBiZWVuIGNhcHR1cmVkCiAgICAgICAgICBpZiAoc3RhdGUuY29sb3JzQ2hlY2tlZCkgewogICAgICAgICAgICByZXNpemVCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICAgIHNhdmVCdG4uZGlzYWJsZWQgPSBmYWxzZTsKCiAgICAgICAgICBpZiAoc3RhdGUuc3RhcnRQb3NpdGlvbikgewogICAgICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgfQoKICAgICAgICAgIHVwZGF0ZVN0YXRzKCk7CiAgICAgICAgICB1cGRhdGVEYXRhQnV0dG9ucygpOwogICAgICAgICAgdXBkYXRlVUkoJ2ltYWdlTG9hZGVkJywgJ3N1Y2Nlc3MnLCB7IGNvdW50OiB0b3RhbFZhbGlkUGl4ZWxzIH0pOwogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgdXBkYXRlVUkoJ2ltYWdlRXJyb3InLCAnZXJyb3InKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmIChyZXNpemVCdG4pIHsKICAgICAgcmVzaXplQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIGlmIChzdGF0ZS5pbWFnZUxvYWRlZCAmJiBzdGF0ZS5pbWFnZURhdGEucHJvY2Vzc29yICYmIHN0YXRlLmNvbG9yc0NoZWNrZWQpIHsKICAgICAgICAgIHNob3dSZXNpemVEaWFsb2coc3RhdGUuaW1hZ2VEYXRhLnByb2Nlc3Nvcik7CiAgICAgICAgfSBlbHNlIGlmICghc3RhdGUuY29sb3JzQ2hlY2tlZCkgewogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ3VwbG9hZEltYWdlRmlyc3RDb2xvcnMnKSwgJ3dhcm5pbmcnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmIChzZWxlY3RQb3NCdG4pIHsKICAgICAgc2VsZWN0UG9zQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4gewogICAgICAgIGlmIChzdGF0ZS5zZWxlY3RpbmdQb3NpdGlvbikgcmV0dXJuOwoKICAgICAgICBzdGF0ZS5zZWxlY3RpbmdQb3NpdGlvbiA9IHRydWU7CiAgICAgICAgc3RhdGUuc3RhcnRQb3NpdGlvbiA9IG51bGw7CiAgICAgICAgc3RhdGUucmVnaW9uID0gbnVsbDsKICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7CgogICAgICAgIFV0aWxzLnNob3dBbGVydChVdGlscy50KCdzZWxlY3RQb3NpdGlvbkFsZXJ0JyksICdpbmZvJyk7CiAgICAgICAgdXBkYXRlVUkoJ3dhaXRpbmdQb3NpdGlvbicsICdkZWZhdWx0Jyk7CgogICAgICAgIGNvbnN0IHRlbXBGZXRjaCA9IGFzeW5jICh1cmwsIG9wdGlvbnMpID0+IHsKICAgICAgICAgIGlmICgKICAgICAgICAgICAgdHlwZW9mIHVybCA9PT0gJ3N0cmluZycgJiYKICAgICAgICAgICAgdXJsLmluY2x1ZGVzKCdodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmUvczAvcGl4ZWwvJykgJiYKICAgICAgICAgICAgb3B0aW9ucz8ubWV0aG9kPy50b1VwcGVyQ2FzZSgpID09PSAnUE9TVCcKICAgICAgICAgICkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb3JpZ2luYWxGZXRjaCh1cmwsIG9wdGlvbnMpOwogICAgICAgICAgICAgIGNvbnN0IGNsb25lZFJlc3BvbnNlID0gcmVzcG9uc2UuY2xvbmUoKTsKICAgICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY2xvbmVkUmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBpZiAoZGF0YT8ucGFpbnRlZCA9PT0gMSkgewogICAgICAgICAgICAgICAgY29uc3QgcmVnaW9uTWF0Y2ggPSB1cmwubWF0Y2goL1wvcGl4ZWxcLyhcZCspXC8oXGQrKS8pOwogICAgICAgICAgICAgICAgaWYgKHJlZ2lvbk1hdGNoICYmIHJlZ2lvbk1hdGNoLmxlbmd0aCA+PSAzKSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlLnJlZ2lvbiA9IHsKICAgICAgICAgICAgICAgICAgICB4OiBOdW1iZXIucGFyc2VJbnQocmVnaW9uTWF0Y2hbMV0pLAogICAgICAgICAgICAgICAgICAgIHk6IE51bWJlci5wYXJzZUludChyZWdpb25NYXRjaFsyXSksCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2Uob3B0aW9ucy5ib2R5KTsKICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkPy5jb29yZHMgJiYgQXJyYXkuaXNBcnJheShwYXlsb2FkLmNvb3JkcykpIHsKICAgICAgICAgICAgICAgICAgc3RhdGUuc3RhcnRQb3NpdGlvbiA9IHsKICAgICAgICAgICAgICAgICAgICB4OiBwYXlsb2FkLmNvb3Jkc1swXSwKICAgICAgICAgICAgICAgICAgICB5OiBwYXlsb2FkLmNvb3Jkc1sxXSwKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgc3RhdGUubGFzdFBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07CgogICAgICAgICAgICAgICAgICBhd2FpdCBvdmVybGF5TWFuYWdlci5zZXRQb3NpdGlvbihzdGF0ZS5zdGFydFBvc2l0aW9uLCBzdGF0ZS5yZWdpb24pOwoKICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmltYWdlTG9hZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgd2luZG93LmZldGNoID0gb3JpZ2luYWxGZXRjaDsKICAgICAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW5nUG9zaXRpb24gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgdXBkYXRlVUkoJ3Bvc2l0aW9uU2V0JywgJ3N1Y2Nlc3MnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2godXJsLCBvcHRpb25zKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRmV0Y2godXJsLCBvcHRpb25zKTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBvcmlnaW5hbEZldGNoID0gd2luZG93LmZldGNoOwogICAgICAgIHdpbmRvdy5mZXRjaCA9IHRlbXBGZXRjaDsKCiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICBpZiAoc3RhdGUuc2VsZWN0aW5nUG9zaXRpb24pIHsKICAgICAgICAgICAgd2luZG93LmZldGNoID0gb3JpZ2luYWxGZXRjaDsKICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW5nUG9zaXRpb24gPSBmYWxzZTsKICAgICAgICAgICAgdXBkYXRlVUkoJ3Bvc2l0aW9uVGltZW91dCcsICdlcnJvcicpOwogICAgICAgICAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgncG9zaXRpb25UaW1lb3V0JyksICdlcnJvcicpOwogICAgICAgICAgfQogICAgICAgIH0sIDEyMDAwMCk7CiAgICAgIH0pOwogICAgfQoKICAgIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UGFpbnRpbmcoKSB7CiAgICAgIGlmICghc3RhdGUuaW1hZ2VMb2FkZWQgfHwgIXN0YXRlLnN0YXJ0UG9zaXRpb24gfHwgIXN0YXRlLnJlZ2lvbikgewogICAgICAgIHVwZGF0ZVVJKCdtaXNzaW5nUmVxdWlyZW1lbnRzJywgJ2Vycm9yJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGF3YWl0IGVuc3VyZVRva2VuKCk7CiAgICAgIGlmICghdHVybnN0aWxlVG9rZW4pIHJldHVybjsKCiAgICAgIHN0YXRlLnJ1bm5pbmcgPSB0cnVlOwogICAgICBzdGF0ZS5zdG9wRmxhZyA9IGZhbHNlOwogICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7CiAgICAgIHN0b3BCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgdXBsb2FkQnRuLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgc2VsZWN0UG9zQnRuLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgcmVzaXplQnRuLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgc2F2ZUJ0bi5kaXNhYmxlZCA9IHRydWU7CiAgICAgIHRvZ2dsZU92ZXJsYXlCdG4uZGlzYWJsZWQgPSB0cnVlOwoKICAgICAgdXBkYXRlVUkoJ3N0YXJ0UGFpbnRpbmdNc2cnLCAnc3VjY2VzcycpOwoKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCBwcm9jZXNzSW1hZ2UoKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3I6JywgZSk7CiAgICAgICAgdXBkYXRlVUkoJ3BhaW50aW5nRXJyb3InLCAnZXJyb3InKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBzdGF0ZS5ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgc3RvcEJ0bi5kaXNhYmxlZCA9IHRydWU7CiAgICAgICAgc2F2ZUJ0bi5kaXNhYmxlZCA9IGZhbHNlOwoKICAgICAgICBpZiAoc3RhdGUuc3RvcEZsYWcpIHsKICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgIHVwbG9hZEJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgc2VsZWN0UG9zQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICByZXNpemVCdG4uZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgdG9nZ2xlT3ZlcmxheUJ0bi5kaXNhYmxlZCA9IGZhbHNlOwogICAgICB9CiAgICB9CgogICAgaWYgKHN0YXJ0QnRuKSB7CiAgICAgIHN0YXJ0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3RhcnRQYWludGluZyk7CiAgICB9CgogICAgaWYgKHN0b3BCdG4pIHsKICAgICAgc3RvcEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICBzdGF0ZS5zdG9wRmxhZyA9IHRydWU7CiAgICAgICAgc3RhdGUucnVubmluZyA9IGZhbHNlOwogICAgICAgIHN0b3BCdG4uZGlzYWJsZWQgPSB0cnVlOwogICAgICAgIHVwZGF0ZVVJKCdwYWludGluZ1N0b3BwZWRCeVVzZXInLCAnd2FybmluZycpOwoKICAgICAgICBpZiAoc3RhdGUuaW1hZ2VMb2FkZWQgJiYgc3RhdGUucGFpbnRlZFBpeGVscyA+IDApIHsKICAgICAgICAgIFV0aWxzLnNhdmVQcm9ncmVzcygpOwogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2F1dG9TYXZlZCcpLCAnc3VjY2VzcycpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgY29uc3QgY2hlY2tTYXZlZFByb2dyZXNzID0gKCkgPT4gewogICAgICBjb25zdCBzYXZlZERhdGEgPSBVdGlscy5sb2FkUHJvZ3Jlc3MoKTsKICAgICAgaWYgKHNhdmVkRGF0YSAmJiBzYXZlZERhdGEuc3RhdGUucGFpbnRlZFBpeGVscyA+IDApIHsKICAgICAgICBjb25zdCBzYXZlZERhdGUgPSBuZXcgRGF0ZShzYXZlZERhdGEudGltZXN0YW1wKS50b0xvY2FsZVN0cmluZygpOwogICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5yb3VuZCgKICAgICAgICAgIChzYXZlZERhdGEuc3RhdGUucGFpbnRlZFBpeGVscyAvIHNhdmVkRGF0YS5zdGF0ZS50b3RhbFBpeGVscykgKiAxMDAKICAgICAgICApOwoKICAgICAgICBVdGlscy5zaG93QWxlcnQoCiAgICAgICAgICBgJHtVdGlscy50KCdzYXZlZERhdGFGb3VuZCcpfVxuXG5gICsKICAgICAgICAgICAgYFNhdmVkOiAke3NhdmVkRGF0ZX1cbmAgKwogICAgICAgICAgICBgUHJvZ3Jlc3M6ICR7c2F2ZWREYXRhLnN0YXRlLnBhaW50ZWRQaXhlbHN9LyR7c2F2ZWREYXRhLnN0YXRlLnRvdGFsUGl4ZWxzfSBwaXhlbHMgKCR7cHJvZ3Jlc3N9JSlcbmAgKwogICAgICAgICAgICBgJHtVdGlscy50KCdjbGlja0xvYWRUb0NvbnRpbnVlJyl9YCwKICAgICAgICAgICdpbmZvJwogICAgICAgICk7CiAgICAgIH0KICAgIH07CgogICAgc2V0VGltZW91dChjaGVja1NhdmVkUHJvZ3Jlc3MsIDEwMDApOwoKICAgIGlmIChjb29sZG93blNsaWRlciAmJiBjb29sZG93bklucHV0ICYmIGNvb2xkb3duVmFsdWUgJiYgY29vbGRvd25EZWNyZWFzZSAmJiBjb29sZG93bkluY3JlYXNlKSB7CiAgICAgIGNvbnN0IHVwZGF0ZUNvb2xkb3duID0gKG5ld1ZhbHVlKSA9PiB7CiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oc3RhdGUubWF4Q2hhcmdlcyB8fCA5OTksIHBhcnNlSW50KG5ld1ZhbHVlKSkpOwogICAgICAgIHN0YXRlLmNvb2xkb3duQ2hhcmdlVGhyZXNob2xkID0gdGhyZXNob2xkOwogICAgICAgIAogICAgICAgIC8vIFVwZGF0ZSBib3RoIGNvbnRyb2xzICh2YWx1ZSBzaG93cyBpbiBpbnB1dCwgbGFiZWwgc2hvd3MgdW5pdCBvbmx5KQogICAgICAgIGNvb2xkb3duU2xpZGVyLnZhbHVlID0gdGhyZXNob2xkOwogICAgICAgIGNvb2xkb3duSW5wdXQudmFsdWUgPSB0aHJlc2hvbGQ7CiAgICAgICAgY29vbGRvd25WYWx1ZS50ZXh0Q29udGVudCA9IGAke1V0aWxzLnQoJ2NoYXJnZXMnKX1gOwogICAgICAgIAogICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgIE5vdGlmaWNhdGlvbk1hbmFnZXIucmVzZXRFZGdlVHJhY2tpbmcoKTsgLy8gcHJldmVudCBzcHVyaW91cyBub3RpZnkgYWZ0ZXIgdGhyZXNob2xkIGNoYW5nZQogICAgICB9OwoKICAgICAgLy8gU2xpZGVyIGV2ZW50IGxpc3RlbmVyCiAgICAgIGNvb2xkb3duU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHsKICAgICAgICB1cGRhdGVDb29sZG93bihlLnRhcmdldC52YWx1ZSk7CiAgICAgIH0pOwoKICAgICAgLy8gTnVtYmVyIGlucHV0IGV2ZW50IGxpc3RlbmVyCiAgICAgIGNvb2xkb3duSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4gewogICAgICAgIHVwZGF0ZUNvb2xkb3duKGUudGFyZ2V0LnZhbHVlKTsKICAgICAgfSk7CgogICAgICAvLyBEZWNyZWFzZSBidXR0b24KICAgICAgY29vbGRvd25EZWNyZWFzZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICB1cGRhdGVDb29sZG93bihwYXJzZUludChjb29sZG93bklucHV0LnZhbHVlKSAtIDEpOwogICAgICB9KTsKCiAgICAgIC8vIEluY3JlYXNlIGJ1dHRvbgogICAgICBjb29sZG93bkluY3JlYXNlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgIHVwZGF0ZUNvb2xkb3duKHBhcnNlSW50KGNvb2xkb3duSW5wdXQudmFsdWUpICsgMSk7CiAgICAgIH0pOwoKICAgICAgLy8gQWRkIHNjcm9sbC10by1hZGp1c3QgZm9yIGNvb2xkb3duIHNsaWRlcgogICAgICBVdGlscy5jcmVhdGVTY3JvbGxUb0FkanVzdChjb29sZG93blNsaWRlciwgdXBkYXRlQ29vbGRvd24sIDEsIHN0YXRlLm1heENoYXJnZXMsIDEpOwogICAgfQoKICAgIGxvYWRCb3RTZXR0aW5ncygpOwogICAgLy8gRW5zdXJlIG5vdGlmaWNhdGlvbiBwb2xsZXIgcmVmbGVjdHMgY3VycmVudCBzZXR0aW5ncwogICAgTm90aWZpY2F0aW9uTWFuYWdlci5zeW5jRnJvbVN0YXRlKCk7CiAgfQoKICBmdW5jdGlvbiBnZXRNc1RvVGFyZ2V0Q2hhcmdlcyhjdXJyZW50LCB0YXJnZXQsIGNvb2xkb3duLCBpbnRlcnZhbE1zID0gMCkgewogICAgY29uc3QgcmVtYWluaW5nQ2hhcmdlcyA9IHRhcmdldCAtIGN1cnJlbnQ7CiAgICByZXR1cm4gTWF0aC5tYXgoMCwgcmVtYWluaW5nQ2hhcmdlcyAqIGNvb2xkb3duIC0gaW50ZXJ2YWxNcyk7CiAgfQoKICBmdW5jdGlvbiB1cGRhdGVDaGFyZ2VzVGhyZXNob2xkVUkoaW50ZXJ2YWxNcykgewogICAgaWYgKHN0YXRlLnN0b3BGbGFnKSByZXR1cm47CgogICAgY29uc3QgdGhyZXNob2xkID0gc3RhdGUuY29vbGRvd25DaGFyZ2VUaHJlc2hvbGQ7CiAgICBjb25zdCByZW1haW5pbmdNcyA9IGdldE1zVG9UYXJnZXRDaGFyZ2VzKAogICAgICBzdGF0ZS5wcmVjaXNlQ3VycmVudENoYXJnZXMsCiAgICAgIHRocmVzaG9sZCwKICAgICAgc3RhdGUuY29vbGRvd24sCiAgICAgIGludGVydmFsTXMKICAgICk7CiAgICBjb25zdCB0aW1lVGV4dCA9IFV0aWxzLm1zVG9UaW1lVGV4dChyZW1haW5pbmdNcyk7CgogICAgdXBkYXRlVUkoCiAgICAgICdub0NoYXJnZXNUaHJlc2hvbGQnLAogICAgICAnd2FybmluZycsCiAgICAgIHsKICAgICAgICB0aHJlc2hvbGQsCiAgICAgICAgY3VycmVudDogc3RhdGUuZGlzcGxheUNoYXJnZXMsCiAgICAgICAgdGltZTogdGltZVRleHQsCiAgICAgIH0sCiAgICAgIHRydWUKICAgICk7CiAgfQoKICBmdW5jdGlvbiBnZW5lcmF0ZUNvb3JkaW5hdGVzKHdpZHRoLCBoZWlnaHQsIG1vZGUsIGRpcmVjdGlvbiwgc25ha2UsIGJsb2NrV2lkdGgsIGJsb2NrSGVpZ2h0KSB7CiAgICBjb25zdCBjb29yZHMgPSBbXTsKICAgIGNvbnNvbGUubG9nKAogICAgICAnR2VuZXJhdGluZyBjb29yZGluYXRlcyB3aXRoIFxuICBtb2RlOicsCiAgICAgIG1vZGUsCiAgICAgICdcbiAgZGlyZWN0aW9uOicsCiAgICAgIGRpcmVjdGlvbiwKICAgICAgJ1xuICBzbmFrZTonLAogICAgICBzbmFrZSwKICAgICAgJ1xuICBibG9ja1dpZHRoOicsCiAgICAgIGJsb2NrV2lkdGgsCiAgICAgICdcbiAgYmxvY2tIZWlnaHQ6JywKICAgICAgYmxvY2tIZWlnaHQKICAgICk7CiAgICAvLyAtLS0tLS0tLS0gU3RhbmRhcmQgNCBjb3JuZXJzIHRyYXZlcnNhbCAtLS0tLS0tLS0tCiAgICBsZXQgeFN0YXJ0LCB4RW5kLCB4U3RlcDsKICAgIGxldCB5U3RhcnQsIHlFbmQsIHlTdGVwOwogICAgc3dpdGNoIChkaXJlY3Rpb24pIHsKICAgICAgY2FzZSAndG9wLWxlZnQnOgogICAgICAgIHhTdGFydCA9IDA7CiAgICAgICAgeEVuZCA9IHdpZHRoOwogICAgICAgIHhTdGVwID0gMTsKICAgICAgICB5U3RhcnQgPSAwOwogICAgICAgIHlFbmQgPSBoZWlnaHQ7CiAgICAgICAgeVN0ZXAgPSAxOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICd0b3AtcmlnaHQnOgogICAgICAgIHhTdGFydCA9IHdpZHRoIC0gMTsKICAgICAgICB4RW5kID0gLTE7CiAgICAgICAgeFN0ZXAgPSAtMTsKICAgICAgICB5U3RhcnQgPSAwOwogICAgICAgIHlFbmQgPSBoZWlnaHQ7CiAgICAgICAgeVN0ZXAgPSAxOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdib3R0b20tbGVmdCc6CiAgICAgICAgeFN0YXJ0ID0gMDsKICAgICAgICB4RW5kID0gd2lkdGg7CiAgICAgICAgeFN0ZXAgPSAxOwogICAgICAgIHlTdGFydCA9IGhlaWdodCAtIDE7CiAgICAgICAgeUVuZCA9IC0xOwogICAgICAgIHlTdGVwID0gLTE7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgJ2JvdHRvbS1yaWdodCc6CiAgICAgICAgeFN0YXJ0ID0gd2lkdGggLSAxOwogICAgICAgIHhFbmQgPSAtMTsKICAgICAgICB4U3RlcCA9IC0xOwogICAgICAgIHlTdGFydCA9IGhlaWdodCAtIDE7CiAgICAgICAgeUVuZCA9IC0xOwogICAgICAgIHlTdGVwID0gLTE7CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGRpcmVjdGlvbjogJHtkaXJlY3Rpb259YCk7CiAgICB9CgogICAgLy8gLS0tLS0tLS0tIFRyYXZlcnNhbCBtb2RlcyAtLS0tLS0tLS0tCiAgICBpZiAobW9kZSA9PT0gJ3Jvd3MnKSB7CiAgICAgIGZvciAobGV0IHkgPSB5U3RhcnQ7IHkgIT09IHlFbmQ7IHkgKz0geVN0ZXApIHsKICAgICAgICBpZiAoc25ha2UgJiYgKHkgLSB5U3RhcnQpICUgMiAhPT0gMCkgewogICAgICAgICAgZm9yIChsZXQgeCA9IHhFbmQgLSB4U3RlcDsgeCAhPT0geFN0YXJ0IC0geFN0ZXA7IHggLT0geFN0ZXApIHsKICAgICAgICAgICAgY29vcmRzLnB1c2goW3gsIHldKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZm9yIChsZXQgeCA9IHhTdGFydDsgeCAhPT0geEVuZDsgeCArPSB4U3RlcCkgewogICAgICAgICAgICBjb29yZHMucHVzaChbeCwgeV0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIGlmIChtb2RlID09PSAnY29sdW1ucycpIHsKICAgICAgZm9yIChsZXQgeCA9IHhTdGFydDsgeCAhPT0geEVuZDsgeCArPSB4U3RlcCkgewogICAgICAgIGlmIChzbmFrZSAmJiAoeCAtIHhTdGFydCkgJSAyICE9PSAwKSB7CiAgICAgICAgICBmb3IgKGxldCB5ID0geUVuZCAtIHlTdGVwOyB5ICE9PSB5U3RhcnQgLSB5U3RlcDsgeSAtPSB5U3RlcCkgewogICAgICAgICAgICBjb29yZHMucHVzaChbeCwgeV0pOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmb3IgKGxldCB5ID0geVN0YXJ0OyB5ICE9PSB5RW5kOyB5ICs9IHlTdGVwKSB7CiAgICAgICAgICAgIGNvb3Jkcy5wdXNoKFt4LCB5XSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdjaXJjbGUtb3V0JykgewogICAgICBjb25zdCBjeCA9IE1hdGguZmxvb3Iod2lkdGggLyAyKTsKICAgICAgY29uc3QgY3kgPSBNYXRoLmZsb29yKGhlaWdodCAvIDIpOwogICAgICBjb25zdCBtYXhSYWRpdXMgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KGN4ICogY3ggKyBjeSAqIGN5KSk7CgogICAgICBmb3IgKGxldCByID0gMDsgciA8PSBtYXhSYWRpdXM7IHIrKykgewogICAgICAgIGZvciAobGV0IHkgPSBjeSAtIHI7IHkgPD0gY3kgKyByOyB5KyspIHsKICAgICAgICAgIGZvciAobGV0IHggPSBjeCAtIHI7IHggPD0gY3ggKyByOyB4KyspIHsKICAgICAgICAgICAgaWYgKHggPj0gMCAmJiB4IDwgd2lkdGggJiYgeSA+PSAwICYmIHkgPCBoZWlnaHQpIHsKICAgICAgICAgICAgICBjb25zdCBkaXN0ID0gTWF0aC5tYXgoTWF0aC5hYnMoeCAtIGN4KSwgTWF0aC5hYnMoeSAtIGN5KSk7CiAgICAgICAgICAgICAgaWYgKGRpc3QgPT09IHIpIGNvb3Jkcy5wdXNoKFt4LCB5XSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2NpcmNsZS1pbicpIHsKICAgICAgY29uc3QgY3ggPSBNYXRoLmZsb29yKHdpZHRoIC8gMik7CiAgICAgIGNvbnN0IGN5ID0gTWF0aC5mbG9vcihoZWlnaHQgLyAyKTsKICAgICAgY29uc3QgbWF4UmFkaXVzID0gTWF0aC5jZWlsKE1hdGguc3FydChjeCAqIGN4ICsgY3kgKiBjeSkpOwoKICAgICAgZm9yIChsZXQgciA9IG1heFJhZGl1czsgciA+PSAwOyByLS0pIHsKICAgICAgICBmb3IgKGxldCB5ID0gY3kgLSByOyB5IDw9IGN5ICsgcjsgeSsrKSB7CiAgICAgICAgICBmb3IgKGxldCB4ID0gY3ggLSByOyB4IDw9IGN4ICsgcjsgeCsrKSB7CiAgICAgICAgICAgIGlmICh4ID49IDAgJiYgeCA8IHdpZHRoICYmIHkgPj0gMCAmJiB5IDwgaGVpZ2h0KSB7CiAgICAgICAgICAgICAgY29uc3QgZGlzdCA9IE1hdGgubWF4KE1hdGguYWJzKHggLSBjeCksIE1hdGguYWJzKHkgLSBjeSkpOwogICAgICAgICAgICAgIGlmIChkaXN0ID09PSByKSBjb29yZHMucHVzaChbeCwgeV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdibG9ja3MnIHx8IG1vZGUgPT09ICdzaHVmZmxlLWJsb2NrcycpIHsKICAgICAgY29uc3QgYmxvY2tzID0gW107CiAgICAgIGZvciAobGV0IGJ5ID0gMDsgYnkgPCBoZWlnaHQ7IGJ5ICs9IGJsb2NrSGVpZ2h0KSB7CiAgICAgICAgZm9yIChsZXQgYnggPSAwOyBieCA8IHdpZHRoOyBieCArPSBibG9ja1dpZHRoKSB7CiAgICAgICAgICBjb25zdCBibG9jayA9IFtdOwogICAgICAgICAgZm9yIChsZXQgeSA9IGJ5OyB5IDwgTWF0aC5taW4oYnkgKyBibG9ja0hlaWdodCwgaGVpZ2h0KTsgeSsrKSB7CiAgICAgICAgICAgIGZvciAobGV0IHggPSBieDsgeCA8IE1hdGgubWluKGJ4ICsgYmxvY2tXaWR0aCwgd2lkdGgpOyB4KyspIHsKICAgICAgICAgICAgICBibG9jay5wdXNoKFt4LCB5XSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJsb2Nrcy5wdXNoKGJsb2NrKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChtb2RlID09PSAnc2h1ZmZsZS1ibG9ja3MnKSB7CiAgICAgICAgLy8gU2ltcGxlIEZpc2hlci1ZYXRlcyBzaHVmZmxlCiAgICAgICAgZm9yIChsZXQgaSA9IGJsb2Nrcy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7CiAgICAgICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7CiAgICAgICAgICBbYmxvY2tzW2ldLCBibG9ja3Nbal1dID0gW2Jsb2Nrc1tqXSwgYmxvY2tzW2ldXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIC8vIENvbmNhdGVuYXRlIGFsbCBibG9ja3MKICAgICAgZm9yIChjb25zdCBibG9jayBvZiBibG9ja3MpIHsKICAgICAgICBjb29yZHMucHVzaCguLi5ibG9jayk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtb2RlOiAke21vZGV9YCk7CiAgICB9CgogICAgcmV0dXJuIGNvb3JkczsKICB9CgogIGFzeW5jIGZ1bmN0aW9uIGZsdXNoUGl4ZWxCYXRjaChwaXhlbEJhdGNoKSB7CiAgICBpZiAoIXBpeGVsQmF0Y2ggfHwgcGl4ZWxCYXRjaC5waXhlbHMubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTsKCiAgICBjb25zdCBiYXRjaFNpemUgPSBwaXhlbEJhdGNoLnBpeGVscy5sZW5ndGg7CiAgICBjb25zb2xlLmxvZygKICAgICAgYPCfk6YgU2VuZGluZyBiYXRjaCB3aXRoICR7YmF0Y2hTaXplfSBwaXhlbHMgKHJlZ2lvbjogJHtwaXhlbEJhdGNoLnJlZ2lvblh9LCR7cGl4ZWxCYXRjaC5yZWdpb25ZfSlgCiAgICApOwogICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IHNlbmRCYXRjaFdpdGhSZXRyeSgKICAgICAgcGl4ZWxCYXRjaC5waXhlbHMsCiAgICAgIHBpeGVsQmF0Y2gucmVnaW9uWCwKICAgICAgcGl4ZWxCYXRjaC5yZWdpb25ZCiAgICApOwogICAgaWYgKHN1Y2Nlc3MpIHsKICAgICAgcGl4ZWxCYXRjaC5waXhlbHMuZm9yRWFjaCgocCkgPT4gewogICAgICAgIHN0YXRlLnBhaW50ZWRQaXhlbHMrKzsKICAgICAgICBVdGlscy5tYXJrUGl4ZWxQYWludGVkKHAueCwgcC55LCBwaXhlbEJhdGNoLnJlZ2lvblgsIHBpeGVsQmF0Y2gucmVnaW9uWSk7CiAgICAgIH0pOwogICAgICBzdGF0ZS5mdWxsQ2hhcmdlRGF0YSA9IHsKICAgICAgICAuLi5zdGF0ZS5mdWxsQ2hhcmdlRGF0YSwKICAgICAgICBzcGVudFNpbmNlU2hvdDogc3RhdGUuZnVsbENoYXJnZURhdGEuc3BlbnRTaW5jZVNob3QgKyBiYXRjaFNpemUsCiAgICAgIH07CiAgICAgIHVwZGF0ZVN0YXRzKCk7CiAgICAgIHVwZGF0ZVVJKCdwYWludGluZ1Byb2dyZXNzJywgJ2RlZmF1bHQnLCB7CiAgICAgICAgcGFpbnRlZDogc3RhdGUucGFpbnRlZFBpeGVscywKICAgICAgICB0b3RhbDogc3RhdGUudG90YWxQaXhlbHMsCiAgICAgIH0pOwogICAgICBVdGlscy5wZXJmb3JtU21hcnRTYXZlKCk7CgogICAgICBpZiAoQ09ORklHLlBBSU5USU5HX1NQRUVEX0VOQUJMRUQgJiYgc3RhdGUucGFpbnRpbmdTcGVlZCA+IDAgJiYgYmF0Y2hTaXplID4gMCkgewogICAgICAgIGNvbnN0IGRlbGF5UGVyUGl4ZWwgPSAxMDAwIC8gc3RhdGUucGFpbnRpbmdTcGVlZDsKICAgICAgICBjb25zdCB0b3RhbERlbGF5ID0gTWF0aC5tYXgoMTAwLCBkZWxheVBlclBpeGVsICogYmF0Y2hTaXplKTsKICAgICAgICBhd2FpdCBVdGlscy5zbGVlcCh0b3RhbERlbGF5KTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5lcnJvcihg4p2MIEJhdGNoIGZhaWxlZCBwZXJtYW5lbnRseSBhZnRlciByZXRyaWVzLiBTdG9wcGluZyBwYWludGluZy5gKTsKICAgICAgc3RhdGUuc3RvcEZsYWcgPSB0cnVlOwogICAgICB1cGRhdGVVSSgncGFpbnRpbmdCYXRjaEZhaWxlZCcsICdlcnJvcicpOwogICAgfQoKICAgIHBpeGVsQmF0Y2gucGl4ZWxzID0gW107CiAgICByZXR1cm4gc3VjY2VzczsKICB9CgogIGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NJbWFnZSgpIHsKICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgcGl4ZWxzIH0gPSBzdGF0ZS5pbWFnZURhdGE7CiAgICBjb25zdCB7IHg6IHN0YXJ0WCwgeTogc3RhcnRZIH0gPSBzdGF0ZS5zdGFydFBvc2l0aW9uOwogICAgY29uc3QgeyB4OiByZWdpb25YLCB5OiByZWdpb25ZIH0gPSBzdGF0ZS5yZWdpb247CgogICAgLy8gdG9kbyBmb3JjZSBsb2FkIHRpbGVzCiAgICBjb25zdCB0aWxlc1JlYWR5ID0gYXdhaXQgb3ZlcmxheU1hbmFnZXIud2FpdEZvclRpbGVzKAogICAgICByZWdpb25YLAogICAgICByZWdpb25ZLAogICAgICB3aWR0aCwKICAgICAgaGVpZ2h0LAogICAgICBzdGFydFgsCiAgICAgIHN0YXJ0WSwKICAgICAgMTAwMDAgLy8gdGltZW91dCAxMHMKICAgICk7CgogICAgaWYgKCF0aWxlc1JlYWR5KSB7CiAgICAgIHVwZGF0ZVVJKCdvdmVybGF5VGlsZXNOb3RMb2FkZWQnLCAnZXJyb3InKTsKICAgICAgc3RhdGUuc3RvcEZsYWcgPSB0cnVlOwogICAgICByZXR1cm47CiAgICB9CgogICAgbGV0IHBpeGVsQmF0Y2ggPSBudWxsOwogICAgbGV0IHNraXBwZWRQaXhlbHMgPSB7CiAgICAgIHRyYW5zcGFyZW50OiAwLAogICAgICB3aGl0ZTogMCwKICAgICAgYWxyZWFkeVBhaW50ZWQ6IDAsCiAgICAgIGNvbG9yVW5hdmFpbGFibGU6IDAsCiAgICB9OwoKICAgIGNvbnN0IHRyYW5zcGFyZW5jeVRocmVzaG9sZCA9CiAgICAgIHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZCB8fCBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRDsKCiAgICBmdW5jdGlvbiBjaGVja1BpeGVsRWxpZ2liaWxpdHkoeCwgeSkgewogICAgICBjb25zdCBpZHggPSAoeSAqIHdpZHRoICsgeCkgKiA0OwogICAgICBjb25zdCByID0gcGl4ZWxzW2lkeF0sCiAgICAgICAgZyA9IHBpeGVsc1tpZHggKyAxXSwKICAgICAgICBiID0gcGl4ZWxzW2lkeCArIDJdLAogICAgICAgIGEgPSBwaXhlbHNbaWR4ICsgM107CgogICAgICBpZiAoIXN0YXRlLnBhaW50VHJhbnNwYXJlbnRQaXhlbHMgJiYgYSA8IHRyYW5zcGFyZW5jeVRocmVzaG9sZCkKICAgICAgICByZXR1cm4gewogICAgICAgICAgZWxpZ2libGU6IGZhbHNlLAogICAgICAgICAgcmVhc29uOiAndHJhbnNwYXJlbnQnLAogICAgICAgIH07CiAgICAgIGlmICghc3RhdGUucGFpbnRXaGl0ZVBpeGVscyAmJiBVdGlscy5pc1doaXRlUGl4ZWwociwgZywgYikpCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGVsaWdpYmxlOiBmYWxzZSwKICAgICAgICAgIHJlYXNvbjogJ3doaXRlJywKICAgICAgICB9OwoKICAgICAgbGV0IHRhcmdldFJnYiA9IFV0aWxzLmlzV2hpdGVQaXhlbChyLCBnLCBiKQogICAgICAgID8gWzI1NSwgMjU1LCAyNTVdCiAgICAgICAgOiBVdGlscy5maW5kQ2xvc2VzdFBhbGV0dGVDb2xvcihyLCBnLCBiLCBzdGF0ZS5hY3RpdmVDb2xvclBhbGV0dGUpOwoKICAgICAgLy8gVGVtcGxhdGUgY29sb3IgSUQsIG5vcm1hbGl6ZWQvbWFwcGVkIHRvIHRoZSBuZWFyZXN0IGF2YWlsYWJsZSBjb2xvciBpbiBvdXIgcGFsZXR0ZS4KICAgICAgLy8gRXhhbXBsZTogdGVtcGxhdGUgcmVxdWlyZXMgIlNsYXRlIiwgYnV0IHdlIG9ubHkgaGF2ZSAiRGFyayBHcmF5IiBhdmFpbGFibGUKICAgICAgLy8g4oaSIG1hcHBlZFRhcmdldENvbG9ySWQgPSBJRCBvZiBEYXJrIEdyYXkuCiAgICAgIC8vCiAgICAgIC8vIElmIGBzdGF0ZS5wYWludFVuYXZhaWxhYmxlUGl4ZWxzYCBpcyBlbmFibGVkLCB0aGUgcGFpbnRpbmcgd291bGQgc3RvcCBlYXJsaWVyCiAgICAgIC8vIGJlY2F1c2UgIlNsYXRlIiB3YXMgbm90IGZvdW5kIChudWxsIHJldHVybmVkKS4KICAgICAgLy8KICAgICAgLy8gRWxzZSwgdGhlIHRlbXBsYXRlICJTbGF0ZSIgaXMgbWFwcGVkIHRvIHRoZSBjbG9zZXN0IGF2YWlsYWJsZSBjb2xvciAoZS5nLiwgIkRhcmsgR3JheSIpLAogICAgICAvLyBhbmQgd2UgcHJvY2VlZCB3aXRoIHBhaW50aW5nIHVzaW5nIHRoYXQgbWFwcGVkIGNvbG9yLgogICAgICAvLwogICAgICAvLyBJbiB0aGlzIGNhc2UsIGlmIHRoZSBjYW52YXMgcGl4ZWwgaXMgYWxyZWFkeSBTbGF0ZSAobWFwcGVkIHRvIGF2YWlsYWJsZSBEYXJrIEdyYXkpLAogICAgICAvLyB3ZSBza2lwIHBhaW50aW5nLCBzaW5jZSB0ZW1wbGF0ZSBhbmQgY2FudmFzIGJvdGggcmVzb2x2ZSB0byB0aGUgc2FtZSBhdmFpbGFibGUgY29sb3IgKERhcmsgR3JheSkuCiAgICAgIGNvbnN0IG1hcHBlZFRhcmdldENvbG9ySWQgPSBVdGlscy5yZXNvbHZlQ29sb3IoCiAgICAgICAgdGFyZ2V0UmdiLAogICAgICAgIHN0YXRlLmF2YWlsYWJsZUNvbG9ycywKICAgICAgICAhc3RhdGUucGFpbnRVbmF2YWlsYWJsZVBpeGVscwogICAgICApOwoKICAgICAgLy8gVGVjaG5pY2FsbHksIGNoZWNraW5nIG9ubHkgYCFtYXBwZWRUYXJnZXRDb2xvcklkLmlkYCB3b3VsZCBiZSBlbm91Z2gsCiAgICAgIC8vIGJ1dCBjb21iaW5lZCB3aXRoIGBzdGF0ZS5wYWludFVuYXZhaWxhYmxlUGl4ZWxzYCBpdCBtYWtlcyB0aGUgbG9naWMgZXhwbGljaXQ6CiAgICAgIC8vIHdlIG9ubHkgc2tpcCB3aGVuIHRoZSB0ZW1wbGF0ZSBjb2xvciBjYW5ub3QgYmUgbWFwcGVkIEFORCBzdHJpY3QgbW9kZSBpcyBvbi4KICAgICAgaWYgKCFzdGF0ZS5wYWludFVuYXZhaWxhYmxlUGl4ZWxzICYmICFtYXBwZWRUYXJnZXRDb2xvcklkLmlkKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGVsaWdpYmxlOiBmYWxzZSwKICAgICAgICAgIHJlYXNvbjogJ2NvbG9yVW5hdmFpbGFibGUnLAogICAgICAgICAgciwKICAgICAgICAgIGcsCiAgICAgICAgICBiLAogICAgICAgICAgYSwKICAgICAgICAgIG1hcHBlZENvbG9ySWQ6IG1hcHBlZFRhcmdldENvbG9ySWQuaWQsCiAgICAgICAgfTsKICAgICAgfQogICAgICByZXR1cm4geyBlbGlnaWJsZTogdHJ1ZSwgciwgZywgYiwgYSwgbWFwcGVkQ29sb3JJZDogbWFwcGVkVGFyZ2V0Q29sb3JJZC5pZCB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHNraXBQaXhlbChyZWFzb24sIGlkLCByZ2IsIHgsIHkpIHsKICAgICAgaWYgKHJlYXNvbiAhPT0gJ3RyYW5zcGFyZW50JykgewogICAgICAgIGNvbnNvbGUubG9nKGBTa2lwcGVkIHBpeGVsIGZvciAke3JlYXNvbn0gKGlkOiAke2lkfSwgKCR7cmdiLmpvaW4oJywgJyl9KSkgYXQgKCR7eH0sICR7eX0pYCk7CiAgICAgIH0KICAgICAgc2tpcHBlZFBpeGVsc1tyZWFzb25dKys7CiAgICB9CgogICAgdHJ5IHsKICAgICAgY29uc3QgY29vcmRzID0gZ2VuZXJhdGVDb29yZGluYXRlcygKICAgICAgICB3aWR0aCwKICAgICAgICBoZWlnaHQsCiAgICAgICAgc3RhdGUuY29vcmRpbmF0ZU1vZGUsCiAgICAgICAgc3RhdGUuY29vcmRpbmF0ZURpcmVjdGlvbiwKICAgICAgICBzdGF0ZS5jb29yZGluYXRlU25ha2UsCiAgICAgICAgc3RhdGUuYmxvY2tXaWR0aCwKICAgICAgICBzdGF0ZS5ibG9ja0hlaWdodAogICAgICApOwoKICAgICAgb3V0ZXJMb29wOiBmb3IgKGNvbnN0IFt4LCB5XSBvZiBjb29yZHMpIHsKICAgICAgICBpZiAoc3RhdGUuc3RvcEZsYWcpIHsKICAgICAgICAgIGlmIChwaXhlbEJhdGNoICYmIHBpeGVsQmF0Y2gucGl4ZWxzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgICAgYPCfjq8gU2VuZGluZyBsYXN0IGJhdGNoIGJlZm9yZSBzdG9wIHdpdGggJHtwaXhlbEJhdGNoLnBpeGVscy5sZW5ndGh9IHBpeGVsc2AKICAgICAgICAgICAgKTsKICAgICAgICAgICAgYXdhaXQgZmx1c2hQaXhlbEJhdGNoKHBpeGVsQmF0Y2gpOwogICAgICAgICAgfQogICAgICAgICAgc3RhdGUubGFzdFBvc2l0aW9uID0geyB4LCB5IH07CiAgICAgICAgICB1cGRhdGVVSSgncGFpbnRpbmdQYXVzZWQnLCAnd2FybmluZycsIHsgeCwgeSB9KTsKICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBVbm5lY2Vzc2FyeUxhYmVsT25CcmVha1N0YXRlbWVudEpTCiAgICAgICAgICBicmVhayBvdXRlckxvb3A7CiAgICAgICAgfQoKICAgICAgICBjb25zdCB0YXJnZXRQaXhlbEluZm8gPSBjaGVja1BpeGVsRWxpZ2liaWxpdHkoeCwgeSk7CiAgICAgICAgbGV0IGFic1ggPSBzdGFydFggKyB4OwogICAgICAgIGxldCBhYnNZID0gc3RhcnRZICsgeTsKCiAgICAgICAgbGV0IGFkZGVyWCA9IE1hdGguZmxvb3IoYWJzWCAvIDEwMDApOwogICAgICAgIGxldCBhZGRlclkgPSBNYXRoLmZsb29yKGFic1kgLyAxMDAwKTsKICAgICAgICBsZXQgcGl4ZWxYID0gYWJzWCAlIDEwMDA7CiAgICAgICAgbGV0IHBpeGVsWSA9IGFic1kgJSAxMDAwOwoKICAgICAgICAvLyBUZW1wbGF0ZSBjb2xvciBJRCwgbm9ybWFsaXplZC9tYXBwZWQgdG8gdGhlIG5lYXJlc3QgYXZhaWxhYmxlIGNvbG9yIGluIG91ciBwYWxldHRlLgogICAgICAgIC8vIEV4YW1wbGU6IHRlbXBsYXRlIHJlcXVpcmVzICJTbGF0ZSIsIGJ1dCB3ZSBvbmx5IGhhdmUgIkRhcmsgR3JheSIgYXZhaWxhYmxlCiAgICAgICAgLy8g4oaSIG1hcHBlZFRhcmdldENvbG9ySWQgPSBJRCBvZiBEYXJrIEdyYXkuCiAgICAgICAgLy8KICAgICAgICAvLyBJZiBgc3RhdGUucGFpbnRVbmF2YWlsYWJsZVBpeGVsc2AgaXMgZW5hYmxlZCwgdGhlIHBhaW50aW5nIHdvdWxkIHN0b3AgZWFybGllcgogICAgICAgIC8vIGJlY2F1c2UgIlNsYXRlIiB3YXMgbm90IGZvdW5kIChudWxsIHJldHVybmVkKS4KICAgICAgICAvLwogICAgICAgIC8vIEVsc2UsIHRoZSB0ZW1wbGF0ZSAiU2xhdGUiIGlzIG1hcHBlZCB0byB0aGUgY2xvc2VzdCBhdmFpbGFibGUgY29sb3IgKGUuZy4sICJEYXJrIEdyYXkiKSwKICAgICAgICAvLyBhbmQgd2UgcHJvY2VlZCB3aXRoIHBhaW50aW5nIHVzaW5nIHRoYXQgbWFwcGVkIGNvbG9yLgogICAgICAgIC8vCiAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCBpZiB0aGUgY2FudmFzIHBpeGVsIGlzIGFscmVhZHkgU2xhdGUgKG1hcHBlZCB0byBhdmFpbGFibGUgRGFyayBHcmF5KSwKICAgICAgICAvLyB3ZSBza2lwIHBhaW50aW5nLCBzaW5jZSB0ZW1wbGF0ZSBhbmQgY2FudmFzIGJvdGggcmVzb2x2ZSB0byB0aGUgc2FtZSBhdmFpbGFibGUgY29sb3IgKERhcmsgR3JheSkuCiAgICAgICAgY29uc3QgdGFyZ2V0TWFwcGVkQ29sb3JJZCA9IHRhcmdldFBpeGVsSW5mby5tYXBwZWRDb2xvcklkOwoKICAgICAgICBpZiAoIXRhcmdldFBpeGVsSW5mby5lbGlnaWJsZSkgewogICAgICAgICAgc2tpcFBpeGVsKAogICAgICAgICAgICB0YXJnZXRQaXhlbEluZm8ucmVhc29uLAogICAgICAgICAgICB0YXJnZXRNYXBwZWRDb2xvcklkLAogICAgICAgICAgICBbdGFyZ2V0UGl4ZWxJbmZvLnIsIHRhcmdldFBpeGVsSW5mby5nLCB0YXJnZXRQaXhlbEluZm8uYl0sCiAgICAgICAgICAgIHBpeGVsWCwKICAgICAgICAgICAgcGl4ZWxZCiAgICAgICAgICApOwogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICAvLyBjb25zb2xlLmxvZyhgW0RFQlVHXSBQaXhlbCBhdCAoJHtwaXhlbFh9LCAke3BpeGVsWX0pIGVsaWdpYmxlOiBSR0I9JHt0YXJnZXRQaXhlbEluZm8ucn0sICR7dGFyZ2V0UGl4ZWxJbmZvLmd9LCAke3RhcmdldFBpeGVsSW5mby5ifSwKICAgICAgICAvLyAgYWxwaGE9JHt0YXJnZXRQaXhlbEluZm8uYX0sIG1hcHBlZENvbG9ySWQ9JHt0YXJnZXRNYXBwZWRDb2xvcklkfWApOwoKICAgICAgICBpZiAoCiAgICAgICAgICAhcGl4ZWxCYXRjaCB8fAogICAgICAgICAgcGl4ZWxCYXRjaC5yZWdpb25YICE9PSByZWdpb25YICsgYWRkZXJYIHx8CiAgICAgICAgICBwaXhlbEJhdGNoLnJlZ2lvblkgIT09IHJlZ2lvblkgKyBhZGRlclkKICAgICAgICApIHsKICAgICAgICAgIGlmIChwaXhlbEJhdGNoICYmIHBpeGVsQmF0Y2gucGl4ZWxzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coCiAgICAgICAgICAgICAgYPCfjI0gU2VuZGluZyByZWdpb24tY2hhbmdlIGJhdGNoIHdpdGggJHtwaXhlbEJhdGNoLnBpeGVscy5sZW5ndGh9IHBpeGVscyAoc3dpdGNoaW5nIHRvIHJlZ2lvbiAkewogICAgICAgICAgICAgICAgcmVnaW9uWCArIGFkZGVyWAogICAgICAgICAgICAgIH0sJHtyZWdpb25ZICsgYWRkZXJZfSlgCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBmbHVzaFBpeGVsQmF0Y2gocGl4ZWxCYXRjaCk7CgogICAgICAgICAgICBpZiAoc3VjY2VzcykgewogICAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIENPTkZJRy5QQUlOVElOR19TUEVFRF9FTkFCTEVEICYmCiAgICAgICAgICAgICAgICBzdGF0ZS5wYWludGluZ1NwZWVkID4gMCAmJgogICAgICAgICAgICAgICAgcGl4ZWxCYXRjaC5waXhlbHMubGVuZ3RoID4gMAogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgY29uc3QgYmF0Y2hEZWxheUZhY3RvciA9IE1hdGgubWF4KDEsIDEwMCAvIHN0YXRlLnBhaW50aW5nU3BlZWQpOwogICAgICAgICAgICAgICAgY29uc3QgdG90YWxEZWxheSA9IE1hdGgubWF4KDEwMCwgYmF0Y2hEZWxheUZhY3RvciAqIHBpeGVsQmF0Y2gucGl4ZWxzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBhd2FpdCBVdGlscy5zbGVlcCh0b3RhbERlbGF5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdXBkYXRlU3RhdHMoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgQmF0Y2ggZmFpbGVkIHBlcm1hbmVudGx5IGFmdGVyIHJldHJpZXMuIFN0b3BwaW5nIHBhaW50aW5nLmApOwogICAgICAgICAgICAgIHN0YXRlLnN0b3BGbGFnID0gdHJ1ZTsKICAgICAgICAgICAgICB1cGRhdGVVSSgncGFpbnRpbmdCYXRjaEZhaWxlZCcsICdlcnJvcicpOwogICAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBVbm5lY2Vzc2FyeUxhYmVsT25CcmVha1N0YXRlbWVudEpTCiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXJMb29wOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcGl4ZWxCYXRjaCA9IHsKICAgICAgICAgICAgcmVnaW9uWDogcmVnaW9uWCArIGFkZGVyWCwKICAgICAgICAgICAgcmVnaW9uWTogcmVnaW9uWSArIGFkZGVyWSwKICAgICAgICAgICAgcGl4ZWxzOiBbXSwKICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgdGlsZUtleVBhcnRzID0gW3BpeGVsQmF0Y2gucmVnaW9uWCwgcGl4ZWxCYXRjaC5yZWdpb25ZXTsKCiAgICAgICAgICBjb25zdCB0aWxlUGl4ZWxSR0JBID0gYXdhaXQgb3ZlcmxheU1hbmFnZXIuZ2V0VGlsZVBpeGVsQ29sb3IoCiAgICAgICAgICAgIHRpbGVLZXlQYXJ0c1swXSwKICAgICAgICAgICAgdGlsZUtleVBhcnRzWzFdLAogICAgICAgICAgICBwaXhlbFgsCiAgICAgICAgICAgIHBpeGVsWQogICAgICAgICAgKTsKCiAgICAgICAgICBpZiAodGlsZVBpeGVsUkdCQSAmJiBBcnJheS5pc0FycmF5KHRpbGVQaXhlbFJHQkEpKSB7CiAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIGFjdHVhbCBjYW52YXMgcGl4ZWwgY29sb3IgdG8gdGhlIGNsb3Nlc3QgYXZhaWxhYmxlIGNvbG9yLgogICAgICAgICAgICAvLyAoVGhlIHJhdyBjYW52YXMgUkdCIFtlciwgZWcsIGViXSBpcyBtYXBwZWQgaW50byBzdGF0ZS5hdmFpbGFibGVDb2xvcnMpCiAgICAgICAgICAgIC8vIHNvIHRoYXQgY29tcGFyaXNvbiBpcyBjb25zaXN0ZW50IHdpdGggdGFyZ2V0TWFwcGVkQ29sb3JJZC4KICAgICAgICAgICAgY29uc3QgbWFwcGVkQ2FudmFzQ29sb3IgPSBVdGlscy5yZXNvbHZlQ29sb3IoCiAgICAgICAgICAgICAgdGlsZVBpeGVsUkdCQS5zbGljZSgwLCAzKSwKICAgICAgICAgICAgICBzdGF0ZS5hdmFpbGFibGVDb2xvcnMKICAgICAgICAgICAgKTsKICAgICAgICAgICAgY29uc3QgaXNNYXRjaCA9IG1hcHBlZENhbnZhc0NvbG9yLmlkID09PSB0YXJnZXRNYXBwZWRDb2xvcklkOwogICAgICAgICAgICBpZiAoaXNNYXRjaCkgewogICAgICAgICAgICAgIHNraXBQaXhlbCgKICAgICAgICAgICAgICAgICdhbHJlYWR5UGFpbnRlZCcsCiAgICAgICAgICAgICAgICB0YXJnZXRNYXBwZWRDb2xvcklkLAogICAgICAgICAgICAgICAgW3RhcmdldFBpeGVsSW5mby5yLCB0YXJnZXRQaXhlbEluZm8uZywgdGFyZ2V0UGl4ZWxJbmZvLmJdLAogICAgICAgICAgICAgICAgcGl4ZWxYLAogICAgICAgICAgICAgICAgcGl4ZWxZCiAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zb2xlLmRlYnVnKAogICAgICAgICAgICAgIGBbQ09NUEFSRV0gUGl4ZWwgYXQg8J+TjSAoJHtwaXhlbFh9LCAke3BpeGVsWX0pIGluIHJlZ2lvbiAoJHsKICAgICAgICAgICAgICAgIHJlZ2lvblggKyBhZGRlclgKICAgICAgICAgICAgICB9LCAke3JlZ2lvblkgKyBhZGRlcll9KVxuYCArCiAgICAgICAgICAgICAgICBgICDilJzilIDilIAgQ3VycmVudCBjb2xvcjogcmdiKCR7dGlsZVBpeGVsUkdCQS5zbGljZSgwLCAzKS5qb2luKCcsICcpfSkgKGlkOiAke21hcHBlZENhbnZhc0NvbG9yLmlkfSlcbmAgKwogICAgICAgICAgICAgICAgYCAg4pSc4pSA4pSAIFRhcmdldCBjb2xvcjogIHJnYigke3RhcmdldFBpeGVsSW5mby5yfSwgJHt0YXJnZXRQaXhlbEluZm8uZ30sICR7dGFyZ2V0UGl4ZWxJbmZvLmJ9KSAoaWQ6ICR7dGFyZ2V0TWFwcGVkQ29sb3JJZH0pXG5gICsKICAgICAgICAgICAgICAgIGAgIOKUlOKUgOKUgCBTdGF0dXM6ICR7CiAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPyAn4pyFIEFscmVhZHkgcGFpbnRlZCDihpIgU0tJUCcgOiAn8J+UtCBOZWVkcyBwYWludCDihpIgUEFJTlQnCiAgICAgICAgICAgICAgICB9XG5gCiAgICAgICAgICAgICk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS5lcnJvcihgW0RFQlVHXSBFcnJvciBjaGVja2luZyBleGlzdGluZyBwaXhlbCBhdCAoJHtwaXhlbFh9LCAke3BpeGVsWX0pOmAsIGUpOwogICAgICAgICAgdXBkYXRlVUkoJ3BhaW50aW5nUGl4ZWxDaGVja0ZhaWxlZCcsICdlcnJvcicsIHsgeDogcGl4ZWxYLCB5OiBwaXhlbFkgfSk7CiAgICAgICAgICBzdGF0ZS5zdG9wRmxhZyA9IHRydWU7CiAgICAgICAgICAvLyBub2luc3BlY3Rpb24gVW5uZWNlc3NhcnlMYWJlbE9uQnJlYWtTdGF0ZW1lbnRKUwogICAgICAgICAgYnJlYWsgb3V0ZXJMb29wOwogICAgICAgIH0KCiAgICAgICAgcGl4ZWxCYXRjaC5waXhlbHMucHVzaCh7CiAgICAgICAgICB4OiBwaXhlbFgsCiAgICAgICAgICB5OiBwaXhlbFksCiAgICAgICAgICBjb2xvcjogdGFyZ2V0TWFwcGVkQ29sb3JJZCwKICAgICAgICAgIGxvY2FsWDogeCwKICAgICAgICAgIGxvY2FsWTogeSwKICAgICAgICB9KTsKCiAgICAgICAgY29uc3QgbWF4QmF0Y2hTaXplID0gY2FsY3VsYXRlQmF0Y2hTaXplKCk7CiAgICAgICAgaWYgKHBpeGVsQmF0Y2gucGl4ZWxzLmxlbmd0aCA+PSBtYXhCYXRjaFNpemUpIHsKICAgICAgICAgIGNvbnN0IG1vZGVUZXh0ID0KICAgICAgICAgICAgc3RhdGUuYmF0Y2hNb2RlID09PSAncmFuZG9tJwogICAgICAgICAgICAgID8gYHJhbmRvbSAoJHtzdGF0ZS5yYW5kb21CYXRjaE1pbn0tJHtzdGF0ZS5yYW5kb21CYXRjaE1heH0pYAogICAgICAgICAgICAgIDogJ25vcm1hbCc7CiAgICAgICAgICBjb25zb2xlLmxvZygKICAgICAgICAgICAgYPCfk6YgU2VuZGluZyBiYXRjaCB3aXRoICR7cGl4ZWxCYXRjaC5waXhlbHMubGVuZ3RofSBwaXhlbHMgKG1vZGU6ICR7bW9kZVRleHR9LCB0YXJnZXQ6ICR7bWF4QmF0Y2hTaXplfSlgCiAgICAgICAgICApOwogICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGZsdXNoUGl4ZWxCYXRjaChwaXhlbEJhdGNoKTsKICAgICAgICAgIGlmICghc3VjY2VzcykgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgQmF0Y2ggZmFpbGVkIHBlcm1hbmVudGx5IGFmdGVyIHJldHJpZXMuIFN0b3BwaW5nIHBhaW50aW5nLmApOwogICAgICAgICAgICBzdGF0ZS5zdG9wRmxhZyA9IHRydWU7CiAgICAgICAgICAgIHVwZGF0ZVVJKCdwYWludGluZ0JhdGNoRmFpbGVkJywgJ2Vycm9yJyk7CiAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBVbm5lY2Vzc2FyeUxhYmVsT25CcmVha1N0YXRlbWVudEpTCiAgICAgICAgICAgIGJyZWFrIG91dGVyTG9vcDsKICAgICAgICAgIH0KCiAgICAgICAgICBwaXhlbEJhdGNoLnBpeGVscyA9IFtdOwogICAgICAgIH0KCiAgICAgICAgaWYgKHN0YXRlLmRpc3BsYXlDaGFyZ2VzIDwgc3RhdGUuY29vbGRvd25DaGFyZ2VUaHJlc2hvbGQgJiYgIXN0YXRlLnN0b3BGbGFnKSB7CiAgICAgICAgICBhd2FpdCBVdGlscy5keW5hbWljU2xlZXAoKCkgPT4gewogICAgICAgICAgICBpZiAoc3RhdGUuZGlzcGxheUNoYXJnZXMgPj0gc3RhdGUuY29vbGRvd25DaGFyZ2VUaHJlc2hvbGQpIHsKICAgICAgICAgICAgICBOb3RpZmljYXRpb25NYW5hZ2VyLm1heWJlTm90aWZ5Q2hhcmdlc1JlYWNoZWQodHJ1ZSk7CiAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHN0YXRlLnN0b3BGbGFnKSByZXR1cm4gMDsKICAgICAgICAgICAgcmV0dXJuIGdldE1zVG9UYXJnZXRDaGFyZ2VzKAogICAgICAgICAgICAgIHN0YXRlLnByZWNpc2VDdXJyZW50Q2hhcmdlcywKICAgICAgICAgICAgICBzdGF0ZS5jb29sZG93bkNoYXJnZVRocmVzaG9sZCwKICAgICAgICAgICAgICBzdGF0ZS5jb29sZG93bgogICAgICAgICAgICApOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3RhdGUuc3RvcEZsYWcpIHsKICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBVbm5lY2Vzc2FyeUxhYmVsT25CcmVha1N0YXRlbWVudEpTCiAgICAgICAgICBicmVhayBvdXRlckxvb3A7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAocGl4ZWxCYXRjaCAmJiBwaXhlbEJhdGNoLnBpeGVscy5sZW5ndGggPiAwICYmICFzdGF0ZS5zdG9wRmxhZykgewogICAgICAgIGNvbnNvbGUubG9nKGDwn4+BIFNlbmRpbmcgZmluYWwgYmF0Y2ggd2l0aCAke3BpeGVsQmF0Y2gucGl4ZWxzLmxlbmd0aH0gcGl4ZWxzYCk7CiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGZsdXNoUGl4ZWxCYXRjaChwaXhlbEJhdGNoKTsKICAgICAgICBpZiAoIXN1Y2Nlc3MpIHsKICAgICAgICAgIGNvbnNvbGUud2FybigKICAgICAgICAgICAgYOKaoO+4jyBGaW5hbCBiYXRjaCBmYWlsZWQgd2l0aCAke3BpeGVsQmF0Y2gucGl4ZWxzLmxlbmd0aH0gcGl4ZWxzIGFmdGVyIGFsbCByZXRyaWVzLmAKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGZpbmFsbHkgewogICAgICBpZiAod2luZG93Ll9jaGFyZ2VzSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwod2luZG93Ll9jaGFyZ2VzSW50ZXJ2YWwpOwogICAgICB3aW5kb3cuX2NoYXJnZXNJbnRlcnZhbCA9IG51bGw7CiAgICB9CgogICAgaWYgKHN0YXRlLnN0b3BGbGFnKSB7CiAgICAgIC8vIFNhdmUgcHJvZ3Jlc3Mgd2hlbiBzdG9wcGVkIHRvIHByZXNlcnZlIHBhaW50ZWQgbWFwCiAgICAgIFV0aWxzLnNhdmVQcm9ncmVzcygpOwogICAgfSBlbHNlIHsKICAgICAgdXBkYXRlVUkoJ3BhaW50aW5nQ29tcGxldGUnLCAnc3VjY2VzcycsIHsgY291bnQ6IHN0YXRlLnBhaW50ZWRQaXhlbHMgfSk7CiAgICAgIHN0YXRlLmxhc3RQb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9OwogICAgICAvLyBLZWVwIHBhaW50ZWQgbWFwIHVudGlsIHVzZXIgc3RhcnRzIG5ldyBwcm9qZWN0CiAgICAgIC8vIHN0YXRlLnBhaW50ZWRNYXAgPSBudWxsICAvLyBDb21tZW50ZWQgb3V0IHRvIHByZXNlcnZlIGRhdGEKICAgICAgVXRpbHMuc2F2ZVByb2dyZXNzKCk7IC8vIFNhdmUgZmluYWwgY29tcGxldGUgc3RhdGUKICAgICAgb3ZlcmxheU1hbmFnZXIuY2xlYXIoKTsKICAgICAgY29uc3QgdG9nZ2xlT3ZlcmxheUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b2dnbGVPdmVybGF5QnRuJyk7CiAgICAgIGlmICh0b2dnbGVPdmVybGF5QnRuKSB7CiAgICAgICAgdG9nZ2xlT3ZlcmxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTsKICAgICAgICB0b2dnbGVPdmVybGF5QnRuLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIC8vIExvZyBza2lwIHN0YXRpc3RpY3MKICAgIGNvbnNvbGUubG9nKGDwn5OKIFBpeGVsIFN0YXRpc3RpY3M6YCk7CiAgICBjb25zb2xlLmxvZyhgICAgUGFpbnRlZDogJHtzdGF0ZS5wYWludGVkUGl4ZWxzfWApOwogICAgY29uc29sZS5sb2coYCAgIFNraXBwZWQgLSBUcmFuc3BhcmVudDogJHtza2lwcGVkUGl4ZWxzLnRyYW5zcGFyZW50fWApOwogICAgY29uc29sZS5sb2coYCAgIFNraXBwZWQgLSBXaGl0ZSAoZGlzYWJsZWQpOiAke3NraXBwZWRQaXhlbHMud2hpdGV9YCk7CiAgICBjb25zb2xlLmxvZyhgICAgU2tpcHBlZCAtIEFscmVhZHkgcGFpbnRlZDogJHtza2lwcGVkUGl4ZWxzLmFscmVhZHlQYWludGVkfWApOwogICAgY29uc29sZS5sb2coYCAgIFNraXBwZWQgLSBDb2xvciBVbmF2YWlsYWJsZTogJHtza2lwcGVkUGl4ZWxzLmNvbG9yVW5hdmFpbGFibGV9YCk7CiAgICBjb25zb2xlLmxvZygKICAgICAgYCAgIFRvdGFsIHByb2Nlc3NlZDogJHsKICAgICAgICBzdGF0ZS5wYWludGVkUGl4ZWxzICsKICAgICAgICBza2lwcGVkUGl4ZWxzLnRyYW5zcGFyZW50ICsKICAgICAgICBza2lwcGVkUGl4ZWxzLndoaXRlICsKICAgICAgICBza2lwcGVkUGl4ZWxzLmFscmVhZHlQYWludGVkICsKICAgICAgICBza2lwcGVkUGl4ZWxzLmNvbG9yVW5hdmFpbGFibGUKICAgICAgfWAKICAgICk7CgogICAgdXBkYXRlU3RhdHMoKTsKICB9CgogIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgYmF0Y2ggc2l6ZSBiYXNlZCBvbiBtb2RlCiAgZnVuY3Rpb24gY2FsY3VsYXRlQmF0Y2hTaXplKCkgewogICAgbGV0IHRhcmdldEJhdGNoU2l6ZTsKCiAgICBpZiAoc3RhdGUuYmF0Y2hNb2RlID09PSAncmFuZG9tJykgewogICAgICAvLyBHZW5lcmF0ZSByYW5kb20gYmF0Y2ggc2l6ZSB3aXRoaW4gdGhlIHNwZWNpZmllZCByYW5nZQogICAgICBjb25zdCBtaW4gPSBNYXRoLm1heCgxLCBzdGF0ZS5yYW5kb21CYXRjaE1pbik7CiAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KG1pbiwgc3RhdGUucmFuZG9tQmF0Y2hNYXgpOwogICAgICB0YXJnZXRCYXRjaFNpemUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOwogICAgICBjb25zb2xlLmxvZyhg8J+OsiBSYW5kb20gYmF0Y2ggc2l6ZSBnZW5lcmF0ZWQ6ICR7dGFyZ2V0QmF0Y2hTaXplfSAocmFuZ2U6ICR7bWlufS0ke21heH0pYCk7CiAgICB9IGVsc2UgewogICAgICAvLyBOb3JtYWwgbW9kZSAtIHVzZSB0aGUgZml4ZWQgcGFpbnRpbmdTcGVlZCB2YWx1ZQogICAgICB0YXJnZXRCYXRjaFNpemUgPSBzdGF0ZS5wYWludGluZ1NwZWVkOwogICAgfQoKICAgIC8vIEFsd2F5cyBsaW1pdCBieSBhdmFpbGFibGUgY2hhcmdlcwogICAgY29uc3QgbWF4QWxsb3dlZCA9IHN0YXRlLmRpc3BsYXlDaGFyZ2VzOwogICAgY29uc3QgZmluYWxCYXRjaFNpemUgPSBNYXRoLm1pbih0YXJnZXRCYXRjaFNpemUsIG1heEFsbG93ZWQpOwoKICAgIHJldHVybiBmaW5hbEJhdGNoU2l6ZTsKICB9CgogIC8vIEhlbHBlciBmdW5jdGlvbiB0byByZXRyeSBiYXRjaCB1bnRpbCBzdWNjZXNzIHdpdGggZXhwb25lbnRpYWwgYmFja29mZgogIGFzeW5jIGZ1bmN0aW9uIHNlbmRCYXRjaFdpdGhSZXRyeShwaXhlbHMsIHJlZ2lvblgsIHJlZ2lvblksIG1heFJldHJpZXMgPSBNQVhfQkFUQ0hfUkVUUklFUykgewogICAgbGV0IGF0dGVtcHQgPSAwOwogICAgd2hpbGUgKGF0dGVtcHQgPCBtYXhSZXRyaWVzICYmICFzdGF0ZS5zdG9wRmxhZykgewogICAgICBhdHRlbXB0Kys7CiAgICAgIGNvbnNvbGUubG9nKAogICAgICAgIGDwn5SEIEF0dGVtcHRpbmcgdG8gc2VuZCBiYXRjaCAoYXR0ZW1wdCAke2F0dGVtcHR9LyR7bWF4UmV0cmllc30pIGZvciByZWdpb24gJHtyZWdpb25YfSwke3JlZ2lvbll9IHdpdGggJHtwaXhlbHMubGVuZ3RofSBwaXhlbHNgCiAgICAgICk7CgogICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZW5kUGl4ZWxCYXRjaChwaXhlbHMsIHJlZ2lvblgsIHJlZ2lvblkpOwoKICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkgewogICAgICAgIGNvbnNvbGUubG9nKGDinIUgQmF0Y2ggc3VjY2VlZGVkIG9uIGF0dGVtcHQgJHthdHRlbXB0fWApOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ3Rva2VuX2Vycm9yJykgewogICAgICAgIGNvbnNvbGUubG9nKGDwn5SRIFRva2VuIGVycm9yIG9uIGF0dGVtcHQgJHthdHRlbXB0fSwgcmVnZW5lcmF0aW5nLi4uYCk7CiAgICAgICAgdXBkYXRlVUkoJ2NhcHRjaGFTb2x2aW5nJywgJ3dhcm5pbmcnKTsKICAgICAgICB0cnkgewogICAgICAgICAgYXdhaXQgaGFuZGxlQ2FwdGNoYSgpOwogICAgICAgICAgLy8gRG9uJ3QgY291bnQgdG9rZW4gcmVnZW5lcmF0aW9uIGFzIGEgZmFpbGVkIGF0dGVtcHQKICAgICAgICAgIGF0dGVtcHQtLTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBUb2tlbiByZWdlbmVyYXRpb24gZmFpbGVkIG9uIGF0dGVtcHQgJHthdHRlbXB0fTpgLCBlKTsKICAgICAgICAgIHVwZGF0ZVVJKCdjYXB0Y2hhRmFpbGVkJywgJ2Vycm9yJyk7CiAgICAgICAgICAvLyBXYWl0IGxvbmdlciBiZWZvcmUgcmV0cnlpbmcgYWZ0ZXIgdG9rZW4gZmFpbHVyZQogICAgICAgICAgYXdhaXQgVXRpbHMuc2xlZXAoNTAwMCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPIEJhdGNoIGZhaWxlZCBvbiBhdHRlbXB0ICR7YXR0ZW1wdH0sIHJldHJ5aW5nLi4uYCk7CiAgICAgICAgLy8gRXhwb25lbnRpYWwgYmFja29mZiB3aXRoIGppdHRlcgogICAgICAgIGNvbnN0IGJhc2VEZWxheSA9IE1hdGgubWluKDEwMDAgKiBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSksIDMwMDAwKTsgLy8gTWF4IDMwcwogICAgICAgIGNvbnN0IGppdHRlciA9IE1hdGgucmFuZG9tKCkgKiAxMDAwOyAvLyBBZGQgdXAgdG8gMXMgcmFuZG9tIGRlbGF5CiAgICAgICAgYXdhaXQgVXRpbHMuc2xlZXAoYmFzZURlbGF5ICsgaml0dGVyKTsKICAgICAgfQogICAgfQoKICAgIGlmIChhdHRlbXB0ID49IG1heFJldHJpZXMpIHsKICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICBg4p2MIEJhdGNoIGZhaWxlZCBhZnRlciAke21heFJldHJpZXN9IGF0dGVtcHRzIChNQVhfQkFUQ0hfUkVUUklFUz0ke01BWF9CQVRDSF9SRVRSSUVTfSkuIFRoaXMgd2lsbCBzdG9wIHBhaW50aW5nIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHMuYAogICAgICApOwogICAgICB1cGRhdGVVSSgncGFpbnRpbmdFcnJvcicsICdlcnJvcicpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgYXN5bmMgZnVuY3Rpb24gc2VuZFBpeGVsQmF0Y2gocGl4ZWxCYXRjaCwgcmVnaW9uWCwgcmVnaW9uWSkgewogICAgbGV0IHRva2VuID0gdHVybnN0aWxlVG9rZW47CgogICAgLy8gR2VuZXJhdGUgbmV3IHRva2VuIGlmIHdlIGRvbid0IGhhdmUgb25lCiAgICBpZiAoIXRva2VuKSB7CiAgICAgIHRyeSB7CiAgICAgICAgY29uc29sZS5sb2coJ/CflJEgR2VuZXJhdGluZyBUdXJuc3RpbGUgdG9rZW4gZm9yIHBpeGVsIGJhdGNoLi4uJyk7CiAgICAgICAgdG9rZW4gPSBhd2FpdCBoYW5kbGVDYXB0Y2hhKCk7CiAgICAgICAgdHVybnN0aWxlVG9rZW4gPSB0b2tlbjsgLy8gU3RvcmUgZm9yIHBvdGVudGlhbCByZXVzZQogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBGYWlsZWQgdG8gZ2VuZXJhdGUgVHVybnN0aWxlIHRva2VuOicsIGVycm9yKTsKICAgICAgICB0b2tlblByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgICAgX3Jlc29sdmVUb2tlbiA9IHJlc29sdmU7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuICd0b2tlbl9lcnJvcic7CiAgICAgIH0KICAgIH0KCiAgICBjb25zdCBjb29yZHMgPSBuZXcgQXJyYXkocGl4ZWxCYXRjaC5sZW5ndGggKiAyKTsKICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBBcnJheShwaXhlbEJhdGNoLmxlbmd0aCk7CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBpeGVsQmF0Y2gubGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgcGl4ZWwgPSBwaXhlbEJhdGNoW2ldOwogICAgICBjb29yZHNbaSAqIDJdID0gcGl4ZWwueDsKICAgICAgY29vcmRzW2kgKiAyICsgMV0gPSBwaXhlbC55OwogICAgICBjb2xvcnNbaV0gPSBwaXhlbC5jb2xvcjsKICAgIH0KCiAgICB0cnkgewogICAgICBjb25zdCBwYXlsb2FkID0geyBjb29yZHMsIGNvbG9ycywgdDogdG9rZW4gfTsKCiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmUvczAvcGl4ZWwvJHtyZWdpb25YfS8ke3JlZ2lvbll9YCwgewogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnIH0sCiAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJywKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSwKICAgICAgfSk7CgogICAgICBpZiAocmVzLnN0YXR1cyA9PT0gNDAzKSB7CiAgICAgICAgbGV0IGRhdGEgPSBudWxsOwogICAgICAgIHRyeSB7CiAgICAgICAgICBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTsKICAgICAgICB9IGNhdGNoIChfKSB7fQogICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCA0MDMgRm9yYmlkZGVuLiBUdXJuc3RpbGUgdG9rZW4gbWlnaHQgYmUgaW52YWxpZCBvciBleHBpcmVkLicpOwoKICAgICAgICAvLyBUcnkgdG8gZ2VuZXJhdGUgYSBuZXcgdG9rZW4gYW5kIHJldHJ5IG9uY2UKICAgICAgICB0cnkgewogICAgICAgICAgY29uc29sZS5sb2coJ/CflIQgUmVnZW5lcmF0aW5nIFR1cm5zdGlsZSB0b2tlbiBhZnRlciA0MDMuLi4nKTsKICAgICAgICAgIHRva2VuID0gYXdhaXQgaGFuZGxlQ2FwdGNoYSgpOwogICAgICAgICAgdHVybnN0aWxlVG9rZW4gPSB0b2tlbjsKCiAgICAgICAgICAvLyBSZXRyeSB0aGUgcmVxdWVzdCB3aXRoIG5ldyB0b2tlbgogICAgICAgICAgY29uc3QgcmV0cnlQYXlsb2FkID0geyBjb29yZHMsIGNvbG9ycywgdDogdG9rZW4gfTsKICAgICAgICAgIGNvbnN0IHJldHJ5UmVzID0gYXdhaXQgZmV0Y2goCiAgICAgICAgICAgIGBodHRwczovL2JhY2tlbmQud3BsYWNlLmxpdmUvczAvcGl4ZWwvJHtyZWdpb25YfS8ke3JlZ2lvbll9YCwKICAgICAgICAgICAgewogICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnIH0sCiAgICAgICAgICAgICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJywKICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXRyeVBheWxvYWQpLAogICAgICAgICAgICB9CiAgICAgICAgICApOwoKICAgICAgICAgIGlmIChyZXRyeVJlcy5zdGF0dXMgPT09IDQwMykgewogICAgICAgICAgICB0dXJuc3RpbGVUb2tlbiA9IG51bGw7CiAgICAgICAgICAgIHRva2VuUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgICAgX3Jlc29sdmVUb2tlbiA9IHJlc29sdmU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gJ3Rva2VuX2Vycm9yJzsKICAgICAgICAgIH0KCiAgICAgICAgICBjb25zdCByZXRyeURhdGEgPSBhd2FpdCByZXRyeVJlcy5qc29uKCk7CiAgICAgICAgICByZXR1cm4gcmV0cnlEYXRhPy5wYWludGVkID09PSBwaXhlbEJhdGNoLmxlbmd0aDsKICAgICAgICB9IGNhdGNoIChyZXRyeUVycm9yKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgVG9rZW4gcmVnZW5lcmF0aW9uIGZhaWxlZDonLCByZXRyeUVycm9yKTsKICAgICAgICAgIHR1cm5zdGlsZVRva2VuID0gbnVsbDsKICAgICAgICAgIHRva2VuUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgICAgICAgIF9yZXNvbHZlVG9rZW4gPSByZXNvbHZlOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gJ3Rva2VuX2Vycm9yJzsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpOwogICAgICByZXR1cm4gZGF0YT8ucGFpbnRlZCA9PT0gcGl4ZWxCYXRjaC5sZW5ndGg7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhdGNoIHBhaW50IHJlcXVlc3QgZmFpbGVkOicsIGUpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBzYXZlQm90U2V0dGluZ3MoKSB7CiAgICB0cnkgewogICAgICBjb25zdCBzZXR0aW5ncyA9IHsKICAgICAgICBwYWludGluZ1NwZWVkOiBzdGF0ZS5wYWludGluZ1NwZWVkLAogICAgICAgIHBhaW50aW5nU3BlZWRFbmFibGVkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5hYmxlU3BlZWRUb2dnbGUnKT8uY2hlY2tlZCwKICAgICAgICBiYXRjaE1vZGU6IHN0YXRlLmJhdGNoTW9kZSwgLy8gIm5vcm1hbCIgb3IgInJhbmRvbSIKICAgICAgICByYW5kb21CYXRjaE1pbjogc3RhdGUucmFuZG9tQmF0Y2hNaW4sCiAgICAgICAgcmFuZG9tQmF0Y2hNYXg6IHN0YXRlLnJhbmRvbUJhdGNoTWF4LAogICAgICAgIGNvb2xkb3duQ2hhcmdlVGhyZXNob2xkOiBzdGF0ZS5jb29sZG93bkNoYXJnZVRocmVzaG9sZCwKICAgICAgICB0b2tlblNvdXJjZTogc3RhdGUudG9rZW5Tb3VyY2UsIC8vICJnZW5lcmF0b3IiLCAiaHlicmlkIiwgb3IgIm1hbnVhbCIKICAgICAgICBtaW5pbWl6ZWQ6IHN0YXRlLm1pbmltaXplZCwKICAgICAgICBvdmVybGF5T3BhY2l0eTogc3RhdGUub3ZlcmxheU9wYWNpdHksCiAgICAgICAgYmx1ZU1hcmJsZUVuYWJsZWQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmFibGVCbHVlTWFyYmxlVG9nZ2xlJyk/LmNoZWNrZWQsCiAgICAgICAgZGl0aGVyaW5nRW5hYmxlZDogc3RhdGUuZGl0aGVyaW5nRW5hYmxlZCwKICAgICAgICBjb2xvck1hdGNoaW5nQWxnb3JpdGhtOiBzdGF0ZS5jb2xvck1hdGNoaW5nQWxnb3JpdGhtLAogICAgICAgIGVuYWJsZUNocm9tYVBlbmFsdHk6IHN0YXRlLmVuYWJsZUNocm9tYVBlbmFsdHksCiAgICAgICAgY2hyb21hUGVuYWx0eVdlaWdodDogc3RhdGUuY2hyb21hUGVuYWx0eVdlaWdodCwKICAgICAgICBjdXN0b21UcmFuc3BhcmVuY3lUaHJlc2hvbGQ6IHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZCwKICAgICAgICBjdXN0b21XaGl0ZVRocmVzaG9sZDogc3RhdGUuY3VzdG9tV2hpdGVUaHJlc2hvbGQsCiAgICAgICAgcGFpbnRXaGl0ZVBpeGVsczogc3RhdGUucGFpbnRXaGl0ZVBpeGVscywKICAgICAgICBwYWludFRyYW5zcGFyZW50UGl4ZWxzOiBzdGF0ZS5wYWludFRyYW5zcGFyZW50UGl4ZWxzLAogICAgICAgIHJlc2l6ZVNldHRpbmdzOiBzdGF0ZS5yZXNpemVTZXR0aW5ncywKICAgICAgICBwYWludFVuYXZhaWxhYmxlUGl4ZWxzOiBzdGF0ZS5wYWludFVuYXZhaWxhYmxlUGl4ZWxzLAogICAgICAgIGNvb3JkaW5hdGVNb2RlOiBzdGF0ZS5jb29yZGluYXRlTW9kZSwKICAgICAgICBjb29yZGluYXRlRGlyZWN0aW9uOiBzdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uLAogICAgICAgIGNvb3JkaW5hdGVTbmFrZTogc3RhdGUuY29vcmRpbmF0ZVNuYWtlLAogICAgICAgIGJsb2NrV2lkdGg6IHN0YXRlLmJsb2NrV2lkdGgsCiAgICAgICAgYmxvY2tIZWlnaHQ6IHN0YXRlLmJsb2NrSGVpZ2h0LCAvLyBTYXZlIGlnbm9yZSBtYXNrIChhcyBiYXNlNjQpIHdpdGggaXRzIGRpbWVuc2lvbnMKICAgICAgICByZXNpemVJZ25vcmVNYXNrOgogICAgICAgICAgc3RhdGUucmVzaXplSWdub3JlTWFzayAmJgogICAgICAgICAgc3RhdGUucmVzaXplU2V0dGluZ3MgJiYKICAgICAgICAgIHN0YXRlLnJlc2l6ZVNldHRpbmdzLndpZHRoICogc3RhdGUucmVzaXplU2V0dGluZ3MuaGVpZ2h0ID09PSBzdGF0ZS5yZXNpemVJZ25vcmVNYXNrLmxlbmd0aAogICAgICAgICAgICA/IHsKICAgICAgICAgICAgICAgIHc6IHN0YXRlLnJlc2l6ZVNldHRpbmdzLndpZHRoLAogICAgICAgICAgICAgICAgaDogc3RhdGUucmVzaXplU2V0dGluZ3MuaGVpZ2h0LAogICAgICAgICAgICAgICAgZGF0YTogYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLnN0YXRlLnJlc2l6ZUlnbm9yZU1hc2spKSwKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIDogbnVsbCwgLy8gTm90aWZpY2F0aW9ucwogICAgICAgIG5vdGlmaWNhdGlvbnNFbmFibGVkOiBzdGF0ZS5ub3RpZmljYXRpb25zRW5hYmxlZCwKICAgICAgICBub3RpZnlPbkNoYXJnZXNSZWFjaGVkOiBzdGF0ZS5ub3RpZnlPbkNoYXJnZXNSZWFjaGVkLAogICAgICAgIG5vdGlmeU9ubHlXaGVuVW5mb2N1c2VkOiBzdGF0ZS5ub3RpZnlPbmx5V2hlblVuZm9jdXNlZCwKICAgICAgICBub3RpZmljYXRpb25JbnRlcnZhbE1pbnV0ZXM6IHN0YXRlLm5vdGlmaWNhdGlvbkludGVydmFsTWludXRlcywKICAgICAgICBvcmlnaW5hbEltYWdlOiBzdGF0ZS5vcmlnaW5hbEltYWdlLAogICAgICB9OwogICAgICBDT05GSUcuUEFJTlRJTkdfU1BFRURfRU5BQkxFRCA9IHNldHRpbmdzLnBhaW50aW5nU3BlZWRFbmFibGVkOwogICAgICAvLyBBVVRPX0NBUFRDSEFfRU5BQkxFRCBpcyBhbHdheXMgdHJ1ZSAtIG5vIG5lZWQgdG8gc2F2ZS9sb2FkCgogICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnd3BsYWNlLWJvdC1zZXR0aW5ncycsIEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHNhdmUgYm90IHNldHRpbmdzOicsIGUpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gbG9hZEJvdFNldHRpbmdzKCkgewogICAgdHJ5IHsKICAgICAgY29uc3Qgc2F2ZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnd3BsYWNlLWJvdC1zZXR0aW5ncycpOwogICAgICBpZiAoIXNhdmVkKSByZXR1cm47CiAgICAgIGNvbnN0IHNldHRpbmdzID0gSlNPTi5wYXJzZShzYXZlZCk7CgogICAgICBzdGF0ZS5wYWludGluZ1NwZWVkID0gc2V0dGluZ3MucGFpbnRpbmdTcGVlZCB8fCBDT05GSUcuUEFJTlRJTkdfU1BFRUQuREVGQVVMVDsKICAgICAgc3RhdGUuYmF0Y2hNb2RlID0gc2V0dGluZ3MuYmF0Y2hNb2RlIHx8IENPTkZJRy5CQVRDSF9NT0RFOyAvLyBEZWZhdWx0IHRvICJub3JtYWwiCiAgICAgIHN0YXRlLnJhbmRvbUJhdGNoTWluID0gc2V0dGluZ3MucmFuZG9tQmF0Y2hNaW4gfHwgQ09ORklHLlJBTkRPTV9CQVRDSF9SQU5HRS5NSU47CiAgICAgIHN0YXRlLnJhbmRvbUJhdGNoTWF4ID0gc2V0dGluZ3MucmFuZG9tQmF0Y2hNYXggfHwgQ09ORklHLlJBTkRPTV9CQVRDSF9SQU5HRS5NQVg7CiAgICAgIHN0YXRlLmNvb2xkb3duQ2hhcmdlVGhyZXNob2xkID0KICAgICAgICBzZXR0aW5ncy5jb29sZG93bkNoYXJnZVRocmVzaG9sZCB8fCBDT05GSUcuQ09PTERPV05fQ0hBUkdFX1RIUkVTSE9MRDsKICAgICAgc3RhdGUudG9rZW5Tb3VyY2UgPSBzZXR0aW5ncy50b2tlblNvdXJjZSB8fCBDT05GSUcuVE9LRU5fU09VUkNFOyAvLyBEZWZhdWx0IHRvICJnZW5lcmF0b3IiCiAgICAgIHN0YXRlLm1pbmltaXplZCA9IHNldHRpbmdzLm1pbmltaXplZCA/PyBmYWxzZTsKICAgICAgQ09ORklHLlBBSU5USU5HX1NQRUVEX0VOQUJMRUQgPSBzZXR0aW5ncy5wYWludGluZ1NwZWVkRW5hYmxlZCA/PyBmYWxzZTsKICAgICAgQ09ORklHLkFVVE9fQ0FQVENIQV9FTkFCTEVEID0gc2V0dGluZ3MuYXV0b0NhcHRjaGFFbmFibGVkID8/IGZhbHNlOwogICAgICBzdGF0ZS5vdmVybGF5T3BhY2l0eSA9IHNldHRpbmdzLm92ZXJsYXlPcGFjaXR5ID8/IENPTkZJRy5PVkVSTEFZLk9QQUNJVFlfREVGQVVMVDsKICAgICAgc3RhdGUuYmx1ZU1hcmJsZUVuYWJsZWQgPSBzZXR0aW5ncy5ibHVlTWFyYmxlRW5hYmxlZCA/PyBDT05GSUcuT1ZFUkxBWS5CTFVFX01BUkJMRV9ERUZBVUxUOwogICAgICBzdGF0ZS5kaXRoZXJpbmdFbmFibGVkID0gc2V0dGluZ3MuZGl0aGVyaW5nRW5hYmxlZCA/PyBmYWxzZTsKICAgICAgc3RhdGUuY29sb3JNYXRjaGluZ0FsZ29yaXRobSA9IHNldHRpbmdzLmNvbG9yTWF0Y2hpbmdBbGdvcml0aG0gfHwgJ2xhYic7CiAgICAgIHN0YXRlLmVuYWJsZUNocm9tYVBlbmFsdHkgPSBzZXR0aW5ncy5lbmFibGVDaHJvbWFQZW5hbHR5ID8/IHRydWU7CiAgICAgIHN0YXRlLmNocm9tYVBlbmFsdHlXZWlnaHQgPSBzZXR0aW5ncy5jaHJvbWFQZW5hbHR5V2VpZ2h0ID8/IDAuMTU7CiAgICAgIHN0YXRlLmN1c3RvbVRyYW5zcGFyZW5jeVRocmVzaG9sZCA9CiAgICAgICAgc2V0dGluZ3MuY3VzdG9tVHJhbnNwYXJlbmN5VGhyZXNob2xkID8/IENPTkZJRy5UUkFOU1BBUkVOQ1lfVEhSRVNIT0xEOwogICAgICBzdGF0ZS5jdXN0b21XaGl0ZVRocmVzaG9sZCA9IHNldHRpbmdzLmN1c3RvbVdoaXRlVGhyZXNob2xkID8/IENPTkZJRy5XSElURV9USFJFU0hPTEQ7CiAgICAgIHN0YXRlLnBhaW50V2hpdGVQaXhlbHMgPSBzZXR0aW5ncy5wYWludFdoaXRlUGl4ZWxzID8/IHRydWU7CiAgICAgIHN0YXRlLnBhaW50VHJhbnNwYXJlbnRQaXhlbHMgPSBzZXR0aW5ncy5wYWludFRyYW5zcGFyZW50UGl4ZWxzID8/IGZhbHNlOwogICAgICBzdGF0ZS5yZXNpemVTZXR0aW5ncyA9IHNldHRpbmdzLnJlc2l6ZVNldHRpbmdzID8/IG51bGw7CiAgICAgIHN0YXRlLm9yaWdpbmFsSW1hZ2UgPSBzZXR0aW5ncy5vcmlnaW5hbEltYWdlID8/IG51bGw7CiAgICAgIHN0YXRlLnBhaW50VW5hdmFpbGFibGVQaXhlbHMgPSBzZXR0aW5ncy5wYWludFVuYXZhaWxhYmxlUGl4ZWxzID8/IENPTkZJRy5QQUlOVF9VTkFWQUlMQUJMRTsKICAgICAgc3RhdGUuY29vcmRpbmF0ZU1vZGUgPSBzZXR0aW5ncy5jb29yZGluYXRlTW9kZSA/PyBDT05GSUcuQ09PUkRJTkFURV9NT0RFOwogICAgICBzdGF0ZS5jb29yZGluYXRlRGlyZWN0aW9uID0gc2V0dGluZ3MuY29vcmRpbmF0ZURpcmVjdGlvbiA/PyBDT05GSUcuQ09PUkRJTkFURV9ESVJFQ1RJT047CiAgICAgIHN0YXRlLmNvb3JkaW5hdGVTbmFrZSA9IHNldHRpbmdzLmNvb3JkaW5hdGVTbmFrZSA/PyBDT05GSUcuQ09PUkRJTkFURV9TTkFLRTsKICAgICAgc3RhdGUuYmxvY2tXaWR0aCA9IHNldHRpbmdzLmJsb2NrV2lkdGggPz8gQ09ORklHLkNPT1JESU5BVEVfQkxPQ0tfV0lEVEg7CiAgICAgIHN0YXRlLmJsb2NrSGVpZ2h0ID0gc2V0dGluZ3MuYmxvY2tIZWlnaHQgPz8gQ09ORklHLkNPT1JESU5BVEVfQkxPQ0tfSEVJR0hUOwogICAgICAvLyBOb3RpZmljYXRpb25zCiAgICAgIHN0YXRlLm5vdGlmaWNhdGlvbnNFbmFibGVkID0gc2V0dGluZ3Mubm90aWZpY2F0aW9uc0VuYWJsZWQgPz8gQ09ORklHLk5PVElGSUNBVElPTlMuRU5BQkxFRDsKICAgICAgc3RhdGUubm90aWZ5T25DaGFyZ2VzUmVhY2hlZCA9CiAgICAgICAgc2V0dGluZ3Mubm90aWZ5T25DaGFyZ2VzUmVhY2hlZCA/PyBDT05GSUcuTk9USUZJQ0FUSU9OUy5PTl9DSEFSR0VTX1JFQUNIRUQ7CiAgICAgIHN0YXRlLm5vdGlmeU9ubHlXaGVuVW5mb2N1c2VkID0KICAgICAgICBzZXR0aW5ncy5ub3RpZnlPbmx5V2hlblVuZm9jdXNlZCA/PyBDT05GSUcuTk9USUZJQ0FUSU9OUy5PTkxZX1dIRU5fVU5GT0NVU0VEOwogICAgICBzdGF0ZS5ub3RpZmljYXRpb25JbnRlcnZhbE1pbnV0ZXMgPQogICAgICAgIHNldHRpbmdzLm5vdGlmaWNhdGlvbkludGVydmFsTWludXRlcyA/PyBDT05GSUcuTk9USUZJQ0FUSU9OUy5SRVBFQVRfTUlOVVRFUzsKICAgICAgLy8gUmVzdG9yZSBpZ25vcmUgbWFzayBpZiBkaW1zIG1hdGNoIGN1cnJlbnQgcmVzaXplU2V0dGluZ3MKICAgICAgaWYgKAogICAgICAgIHNldHRpbmdzLnJlc2l6ZUlnbm9yZU1hc2sgJiYKICAgICAgICBzZXR0aW5ncy5yZXNpemVJZ25vcmVNYXNrLmRhdGEgJiYKICAgICAgICBzdGF0ZS5yZXNpemVTZXR0aW5ncyAmJgogICAgICAgIHNldHRpbmdzLnJlc2l6ZUlnbm9yZU1hc2sudyA9PT0gc3RhdGUucmVzaXplU2V0dGluZ3Mud2lkdGggJiYKICAgICAgICBzZXR0aW5ncy5yZXNpemVJZ25vcmVNYXNrLmggPT09IHN0YXRlLnJlc2l6ZVNldHRpbmdzLmhlaWdodAogICAgICApIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29uc3QgYmluID0gYXRvYihzZXR0aW5ncy5yZXNpemVJZ25vcmVNYXNrLmRhdGEpOwogICAgICAgICAgY29uc3QgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYmluLmxlbmd0aCk7CiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbi5sZW5ndGg7IGkrKykgYXJyW2ldID0gYmluLmNoYXJDb2RlQXQoaSk7CiAgICAgICAgICBzdGF0ZS5yZXNpemVJZ25vcmVNYXNrID0gYXJyOwogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgc3RhdGUucmVzaXplSWdub3JlTWFzayA9IG51bGw7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHN0YXRlLnJlc2l6ZUlnbm9yZU1hc2sgPSBudWxsOwogICAgICB9CiAgICAgIC8vIEluaXRpYWxpemUgY29vcmRpbmF0ZSBnZW5lcmF0aW9uIFVJCiAgICAgIGNvbnN0IGNvb3JkaW5hdGVNb2RlU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nvb3JkaW5hdGVNb2RlU2VsZWN0Jyk7CiAgICAgIGlmIChjb29yZGluYXRlTW9kZVNlbGVjdCkgY29vcmRpbmF0ZU1vZGVTZWxlY3QudmFsdWUgPSBzdGF0ZS5jb29yZGluYXRlTW9kZTsKCiAgICAgIGNvbnN0IGNvb3JkaW5hdGVEaXJlY3Rpb25TZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29vcmRpbmF0ZURpcmVjdGlvblNlbGVjdCcpOwogICAgICBpZiAoY29vcmRpbmF0ZURpcmVjdGlvblNlbGVjdCkgY29vcmRpbmF0ZURpcmVjdGlvblNlbGVjdC52YWx1ZSA9IHN0YXRlLmNvb3JkaW5hdGVEaXJlY3Rpb247CgogICAgICBjb25zdCBjb29yZGluYXRlU25ha2VUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29vcmRpbmF0ZVNuYWtlVG9nZ2xlJyk7CiAgICAgIGlmIChjb29yZGluYXRlU25ha2VUb2dnbGUpIGNvb3JkaW5hdGVTbmFrZVRvZ2dsZS5jaGVja2VkID0gc3RhdGUuY29vcmRpbmF0ZVNuYWtlOwoKICAgICAgY29uc3Qgc2V0dGluZ3NDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd3BsYWNlLXNldHRpbmdzLWNvbnRhaW5lcicpOwogICAgICBjb25zdCBkaXJlY3Rpb25Db250cm9scyA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNkaXJlY3Rpb25Db250cm9scycpOwogICAgICBjb25zdCBzbmFrZUNvbnRyb2xzID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcignI3NuYWtlQ29udHJvbHMnKTsKICAgICAgY29uc3QgYmxvY2tDb250cm9scyA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNibG9ja0NvbnRyb2xzJyk7CiAgICAgIFV0aWxzLnVwZGF0ZUNvb3JkaW5hdGVVSSh7CiAgICAgICAgbW9kZTogc3RhdGUuY29vcmRpbmF0ZU1vZGUsCiAgICAgICAgZGlyZWN0aW9uQ29udHJvbHMsCiAgICAgICAgc25ha2VDb250cm9scywKICAgICAgICBibG9ja0NvbnRyb2xzLAogICAgICB9KTsKCiAgICAgIGNvbnN0IHBhaW50VW5hdmFpbGFibGVQaXhlbHNUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZScpOwogICAgICBpZiAocGFpbnRVbmF2YWlsYWJsZVBpeGVsc1RvZ2dsZSkgewogICAgICAgIHBhaW50VW5hdmFpbGFibGVQaXhlbHNUb2dnbGUuY2hlY2tlZCA9IHN0YXRlLnBhaW50VW5hdmFpbGFibGVQaXhlbHM7CiAgICAgIH0KCiAgICAgIGNvbnN0IHNldHRpbmdzUGFpbnRXaGl0ZVRvZ2dsZSA9IHNldHRpbmdzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJyNzZXR0aW5nc1BhaW50V2hpdGVUb2dnbGUnKTsKICAgICAgaWYgKHNldHRpbmdzUGFpbnRXaGl0ZVRvZ2dsZSkgewogICAgICAgIHNldHRpbmdzUGFpbnRXaGl0ZVRvZ2dsZS5jaGVja2VkID0gc3RhdGUucGFpbnRXaGl0ZVBpeGVsczsKICAgICAgfQoKICAgICAgY29uc3Qgc2V0dGluZ3NQYWludFRyYW5zcGFyZW50VG9nZ2xlID0gc2V0dGluZ3NDb250YWluZXIucXVlcnlTZWxlY3RvcigKICAgICAgICAnI3NldHRpbmdzUGFpbnRUcmFuc3BhcmVudFRvZ2dsZScKICAgICAgKTsKICAgICAgaWYgKHNldHRpbmdzUGFpbnRUcmFuc3BhcmVudFRvZ2dsZSkgewogICAgICAgIHNldHRpbmdzUGFpbnRUcmFuc3BhcmVudFRvZ2dsZS5jaGVja2VkID0gc3RhdGUucGFpbnRUcmFuc3BhcmVudFBpeGVsczsKICAgICAgfQoKICAgICAgY29uc3Qgc3BlZWRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3BlZWRTbGlkZXInKTsKICAgICAgY29uc3Qgc3BlZWRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcGVlZElucHV0Jyk7CiAgICAgIGNvbnN0IHNwZWVkVmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3BlZWRWYWx1ZScpOwogICAgICBpZiAoc3BlZWRTbGlkZXIpIHNwZWVkU2xpZGVyLnZhbHVlID0gc3RhdGUucGFpbnRpbmdTcGVlZDsKICAgICAgaWYgKHNwZWVkSW5wdXQpIHNwZWVkSW5wdXQudmFsdWUgPSBzdGF0ZS5wYWludGluZ1NwZWVkOwogICAgICBpZiAoc3BlZWRWYWx1ZSkgc3BlZWRWYWx1ZS50ZXh0Q29udGVudCA9IGBwaXhlbHNgOwoKICAgICAgY29uc3QgZW5hYmxlU3BlZWRUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW5hYmxlU3BlZWRUb2dnbGUnKTsKICAgICAgaWYgKGVuYWJsZVNwZWVkVG9nZ2xlKSBlbmFibGVTcGVlZFRvZ2dsZS5jaGVja2VkID0gQ09ORklHLlBBSU5USU5HX1NQRUVEX0VOQUJMRUQ7CgogICAgICAvLyBCYXRjaCBtb2RlIFVJIGluaXRpYWxpemF0aW9uCiAgICAgIGNvbnN0IGJhdGNoTW9kZVNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYXRjaE1vZGVTZWxlY3QnKTsKICAgICAgaWYgKGJhdGNoTW9kZVNlbGVjdCkgYmF0Y2hNb2RlU2VsZWN0LnZhbHVlID0gc3RhdGUuYmF0Y2hNb2RlOwoKICAgICAgY29uc3Qgbm9ybWFsQmF0Y2hDb250cm9scyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3JtYWxCYXRjaENvbnRyb2xzJyk7CiAgICAgIGNvbnN0IHJhbmRvbUJhdGNoQ29udHJvbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tQmF0Y2hDb250cm9scycpOwoKICAgICAgLy8gU2hvdy9oaWRlIGFwcHJvcHJpYXRlIGNvbnRyb2xzIGJhc2VkIG9uIGJhdGNoIG1vZGUKICAgICAgaWYgKG5vcm1hbEJhdGNoQ29udHJvbHMgJiYgcmFuZG9tQmF0Y2hDb250cm9scykgewogICAgICAgIGlmIChzdGF0ZS5iYXRjaE1vZGUgPT09ICdyYW5kb20nKSB7CiAgICAgICAgICBub3JtYWxCYXRjaENvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICByYW5kb21CYXRjaENvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBub3JtYWxCYXRjaENvbnRyb2xzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgcmFuZG9tQmF0Y2hDb250cm9scy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIH0KICAgICAgfQoKICAgICAgY29uc3QgcmFuZG9tQmF0Y2hNaW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tQmF0Y2hNaW4nKTsKICAgICAgaWYgKHJhbmRvbUJhdGNoTWluKSByYW5kb21CYXRjaE1pbi52YWx1ZSA9IHN0YXRlLnJhbmRvbUJhdGNoTWluOwoKICAgICAgY29uc3QgcmFuZG9tQmF0Y2hNYXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tQmF0Y2hNYXgnKTsKICAgICAgaWYgKHJhbmRvbUJhdGNoTWF4KSByYW5kb21CYXRjaE1heC52YWx1ZSA9IHN0YXRlLnJhbmRvbUJhdGNoTWF4OwoKICAgICAgLy8gQVVUT19DQVBUQ0hBX0VOQUJMRUQgaXMgYWx3YXlzIHRydWUgLSBubyB0b2dnbGUgdG8gc2V0CgogICAgICBjb25zdCBjb29sZG93blNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb29sZG93blNsaWRlcicpOwogICAgICBjb25zdCBjb29sZG93bklucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nvb2xkb3duSW5wdXQnKTsKICAgICAgY29uc3QgY29vbGRvd25WYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb29sZG93blZhbHVlJyk7CiAgICAgIGlmIChjb29sZG93blNsaWRlcikgY29vbGRvd25TbGlkZXIudmFsdWUgPSBzdGF0ZS5jb29sZG93bkNoYXJnZVRocmVzaG9sZDsKICAgICAgaWYgKGNvb2xkb3duSW5wdXQpIGNvb2xkb3duSW5wdXQudmFsdWUgPSBzdGF0ZS5jb29sZG93bkNoYXJnZVRocmVzaG9sZDsKICAgICAgaWYgKGNvb2xkb3duVmFsdWUpIGNvb2xkb3duVmFsdWUudGV4dENvbnRlbnQgPSBgJHtVdGlscy50KCdjaGFyZ2VzJyl9YDsKCiAgICAgIGNvbnN0IG92ZXJsYXlPcGFjaXR5U2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ292ZXJsYXlPcGFjaXR5U2xpZGVyJyk7CiAgICAgIGlmIChvdmVybGF5T3BhY2l0eVNsaWRlcikgb3ZlcmxheU9wYWNpdHlTbGlkZXIudmFsdWUgPSBzdGF0ZS5vdmVybGF5T3BhY2l0eTsKICAgICAgY29uc3Qgb3ZlcmxheU9wYWNpdHlWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdmVybGF5T3BhY2l0eVZhbHVlJyk7CiAgICAgIGlmIChvdmVybGF5T3BhY2l0eVZhbHVlKQogICAgICAgIG92ZXJsYXlPcGFjaXR5VmFsdWUudGV4dENvbnRlbnQgPSBgJHtNYXRoLnJvdW5kKHN0YXRlLm92ZXJsYXlPcGFjaXR5ICogMTAwKX0lYDsKICAgICAgY29uc3QgZW5hYmxlQmx1ZU1hcmJsZVRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmFibGVCbHVlTWFyYmxlVG9nZ2xlJyk7CiAgICAgIGlmIChlbmFibGVCbHVlTWFyYmxlVG9nZ2xlKSBlbmFibGVCbHVlTWFyYmxlVG9nZ2xlLmNoZWNrZWQgPSBzdGF0ZS5ibHVlTWFyYmxlRW5hYmxlZDsKCiAgICAgIGNvbnN0IHRva2VuU291cmNlU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rva2VuU291cmNlU2VsZWN0Jyk7CiAgICAgIGlmICh0b2tlblNvdXJjZVNlbGVjdCkgdG9rZW5Tb3VyY2VTZWxlY3QudmFsdWUgPSBzdGF0ZS50b2tlblNvdXJjZTsKCiAgICAgIGNvbnN0IGNvbG9yQWxnb3JpdGhtU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbG9yQWxnb3JpdGhtU2VsZWN0Jyk7CiAgICAgIGlmIChjb2xvckFsZ29yaXRobVNlbGVjdCkgY29sb3JBbGdvcml0aG1TZWxlY3QudmFsdWUgPSBzdGF0ZS5jb2xvck1hdGNoaW5nQWxnb3JpdGhtOwogICAgICBjb25zdCBlbmFibGVDaHJvbWFQZW5hbHR5VG9nZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VuYWJsZUNocm9tYVBlbmFsdHlUb2dnbGUnKTsKICAgICAgaWYgKGVuYWJsZUNocm9tYVBlbmFsdHlUb2dnbGUpIGVuYWJsZUNocm9tYVBlbmFsdHlUb2dnbGUuY2hlY2tlZCA9IHN0YXRlLmVuYWJsZUNocm9tYVBlbmFsdHk7CiAgICAgIGNvbnN0IGNocm9tYVBlbmFsdHlXZWlnaHRTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hyb21hUGVuYWx0eVdlaWdodFNsaWRlcicpOwogICAgICBpZiAoY2hyb21hUGVuYWx0eVdlaWdodFNsaWRlcikgY2hyb21hUGVuYWx0eVdlaWdodFNsaWRlci52YWx1ZSA9IHN0YXRlLmNocm9tYVBlbmFsdHlXZWlnaHQ7CiAgICAgIGNvbnN0IGNocm9tYVdlaWdodFZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nocm9tYVdlaWdodFZhbHVlJyk7CiAgICAgIGlmIChjaHJvbWFXZWlnaHRWYWx1ZSkgY2hyb21hV2VpZ2h0VmFsdWUudGV4dENvbnRlbnQgPSBzdGF0ZS5jaHJvbWFQZW5hbHR5V2VpZ2h0OwogICAgICBjb25zdCB0cmFuc3BhcmVuY3lUaHJlc2hvbGRJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0cmFuc3BhcmVuY3lUaHJlc2hvbGRJbnB1dCcpOwogICAgICBpZiAodHJhbnNwYXJlbmN5VGhyZXNob2xkSW5wdXQpCiAgICAgICAgdHJhbnNwYXJlbmN5VGhyZXNob2xkSW5wdXQudmFsdWUgPSBzdGF0ZS5jdXN0b21UcmFuc3BhcmVuY3lUaHJlc2hvbGQ7CiAgICAgIGNvbnN0IHdoaXRlVGhyZXNob2xkSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2hpdGVUaHJlc2hvbGRJbnB1dCcpOwogICAgICBpZiAod2hpdGVUaHJlc2hvbGRJbnB1dCkgd2hpdGVUaHJlc2hvbGRJbnB1dC52YWx1ZSA9IHN0YXRlLmN1c3RvbVdoaXRlVGhyZXNob2xkOwogICAgICAvLyBOb3RpZmljYXRpb25zIFVJCiAgICAgIGNvbnN0IG5vdGlmRW5hYmxlZFRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZkVuYWJsZWRUb2dnbGUnKTsKICAgICAgaWYgKG5vdGlmRW5hYmxlZFRvZ2dsZSkgbm90aWZFbmFibGVkVG9nZ2xlLmNoZWNrZWQgPSBzdGF0ZS5ub3RpZmljYXRpb25zRW5hYmxlZDsKICAgICAgY29uc3Qgbm90aWZPbkNoYXJnZXNUb2dnbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90aWZPbkNoYXJnZXNUb2dnbGUnKTsKICAgICAgaWYgKG5vdGlmT25DaGFyZ2VzVG9nZ2xlKSBub3RpZk9uQ2hhcmdlc1RvZ2dsZS5jaGVja2VkID0gc3RhdGUubm90aWZ5T25DaGFyZ2VzUmVhY2hlZDsKICAgICAgY29uc3Qgbm90aWZPbmx5VW5mb2N1c2VkVG9nZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vdGlmT25seVVuZm9jdXNlZFRvZ2dsZScpOwogICAgICBpZiAobm90aWZPbmx5VW5mb2N1c2VkVG9nZ2xlKQogICAgICAgIG5vdGlmT25seVVuZm9jdXNlZFRvZ2dsZS5jaGVja2VkID0gc3RhdGUubm90aWZ5T25seVdoZW5VbmZvY3VzZWQ7CiAgICAgIGNvbnN0IG5vdGlmSW50ZXJ2YWxJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RpZkludGVydmFsSW5wdXQnKTsKICAgICAgaWYgKG5vdGlmSW50ZXJ2YWxJbnB1dCkgbm90aWZJbnRlcnZhbElucHV0LnZhbHVlID0gc3RhdGUubm90aWZpY2F0aW9uSW50ZXJ2YWxNaW51dGVzOwogICAgICBOb3RpZmljYXRpb25NYW5hZ2VyLnJlc2V0RWRnZVRyYWNraW5nKCk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgYm90IHNldHRpbmdzOicsIGUpOwogICAgfQogIH0KCiAgLy8gSW5pdGlhbGl6ZSBUdXJuc3RpbGUgZ2VuZXJhdG9yIGludGVncmF0aW9uCiAgY29uc29sZS5sb2coJ/CfmoAgV1BsYWNlIEF1dG8tSW1hZ2Ugd2l0aCBUdXJuc3RpbGUgVG9rZW4gR2VuZXJhdG9yIGxvYWRlZCcpOwogIGNvbnNvbGUubG9nKCfwn5SRIFR1cm5zdGlsZSB0b2tlbiBnZW5lcmF0b3I6IEFMV0FZUyBFTkFCTEVEIChCYWNrZ3JvdW5kIG1vZGUpJyk7CiAgY29uc29sZS5sb2coJ/Cfjq8gTWFudWFsIHBpeGVsIGNhcHRjaGEgc29sdmluZzogQXZhaWxhYmxlIGFzIGZhbGxiYWNrL2FsdGVybmF0aXZlJyk7CiAgY29uc29sZS5sb2coJ/Cfk7EgVHVybnN0aWxlIHdpZGdldHM6IERJU0FCTEVEIC0gcHVyZSBiYWNrZ3JvdW5kIHRva2VuIGdlbmVyYXRpb24gb25seSEnKTsKCiAgLy8gRnVuY3Rpb24gdG8gZW5hYmxlIGZpbGUgb3BlcmF0aW9ucyBhZnRlciBpbml0aWFsIHN0YXJ0dXAgc2V0dXAgaXMgY29tcGxldGUKICBmdW5jdGlvbiBlbmFibGVGaWxlT3BlcmF0aW9ucygpIHsKICAgIHN0YXRlLmluaXRpYWxTZXR1cENvbXBsZXRlID0gdHJ1ZTsKCiAgICBjb25zdCBsb2FkQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvYWRCdG4nKTsKICAgIGNvbnN0IGxvYWRGcm9tRmlsZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2FkRnJvbUZpbGVCdG4nKTsKICAgIGNvbnN0IHVwbG9hZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN1cGxvYWRCdG4nKTsKCiAgICBpZiAobG9hZEJ0bikgewogICAgICBsb2FkQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgIGxvYWRCdG4udGl0bGUgPSAnJzsKICAgICAgLy8gQWRkIGEgc3VidGxlIGFuaW1hdGlvbiB0byBpbmRpY2F0ZSB0aGUgYnV0dG9uIGlzIG5vdyBhdmFpbGFibGUKICAgICAgbG9hZEJ0bi5zdHlsZS5hbmltYXRpb24gPSAncHVsc2UgMC42cyBlYXNlLWluLW91dCc7CiAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIGlmIChsb2FkQnRuKSBsb2FkQnRuLnN0eWxlLmFuaW1hdGlvbiA9ICcnOwogICAgICB9LCA2MDApOwogICAgICBjb25zb2xlLmxvZygn4pyFIExvYWQgUHJvZ3Jlc3MgYnV0dG9uIGVuYWJsZWQgYWZ0ZXIgaW5pdGlhbCBzZXR1cCcpOwogICAgfQoKICAgIGlmIChsb2FkRnJvbUZpbGVCdG4pIHsKICAgICAgbG9hZEZyb21GaWxlQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgIGxvYWRGcm9tRmlsZUJ0bi50aXRsZSA9ICcnOwogICAgICAvLyBBZGQgYSBzdWJ0bGUgYW5pbWF0aW9uIHRvIGluZGljYXRlIHRoZSBidXR0b24gaXMgbm93IGF2YWlsYWJsZQogICAgICBsb2FkRnJvbUZpbGVCdG4uc3R5bGUuYW5pbWF0aW9uID0gJ3B1bHNlIDAuNnMgZWFzZS1pbi1vdXQnOwogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBpZiAobG9hZEZyb21GaWxlQnRuKSBsb2FkRnJvbUZpbGVCdG4uc3R5bGUuYW5pbWF0aW9uID0gJyc7CiAgICAgIH0sIDYwMCk7CiAgICAgIGNvbnNvbGUubG9nKCfinIUgTG9hZCBmcm9tIEZpbGUgYnV0dG9uIGVuYWJsZWQgYWZ0ZXIgaW5pdGlhbCBzZXR1cCcpOwogICAgfQoKICAgIGlmICh1cGxvYWRCdG4pIHsKICAgICAgdXBsb2FkQnRuLmRpc2FibGVkID0gZmFsc2U7CiAgICAgIHVwbG9hZEJ0bi50aXRsZSA9ICcnOwogICAgICAvLyBBZGQgYSBzdWJ0bGUgYW5pbWF0aW9uIHRvIGluZGljYXRlIHRoZSBidXR0b24gaXMgbm93IGF2YWlsYWJsZQogICAgICB1cGxvYWRCdG4uc3R5bGUuYW5pbWF0aW9uID0gJ3B1bHNlIDAuNnMgZWFzZS1pbi1vdXQnOwogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICBpZiAodXBsb2FkQnRuKSB1cGxvYWRCdG4uc3R5bGUuYW5pbWF0aW9uID0gJyc7CiAgICAgIH0sIDYwMCk7CiAgICAgIGNvbnNvbGUubG9nKCfinIUgVXBsb2FkIEltYWdlIGJ1dHRvbiBlbmFibGVkIGFmdGVyIGluaXRpYWwgc2V0dXAnKTsKICAgIH0KCiAgICAvLyBTaG93IGEgbm90aWZpY2F0aW9uIHRoYXQgZmlsZSBvcGVyYXRpb25zIGFyZSBub3cgYXZhaWxhYmxlCiAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgnZmlsZU9wZXJhdGlvbnNBdmFpbGFibGUnKSwgJ3N1Y2Nlc3MnKTsKICB9CgogIC8vIE9wdGltaXplZCB0b2tlbiBpbml0aWFsaXphdGlvbiB3aXRoIGJldHRlciB0aW1pbmcgYW5kIGVycm9yIGhhbmRsaW5nCiAgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZVRva2VuR2VuZXJhdG9yKCkgewogICAgLy8gU2tpcCBpZiBhbHJlYWR5IGhhdmUgdmFsaWQgdG9rZW4KICAgIGlmIChpc1Rva2VuVmFsaWQoKSkgewogICAgICBjb25zb2xlLmxvZygn4pyFIFZhbGlkIHRva2VuIGFscmVhZHkgYXZhaWxhYmxlLCBza2lwcGluZyBpbml0aWFsaXphdGlvbicpOwogICAgICB1cGRhdGVVSSgndG9rZW5SZWFkeScsICdzdWNjZXNzJyk7CiAgICAgIGVuYWJsZUZpbGVPcGVyYXRpb25zKCk7IC8vIEVuYWJsZSBmaWxlIG9wZXJhdGlvbnMgc2luY2UgaW5pdGlhbCBzZXR1cCBpcyBjb21wbGV0ZQogICAgICByZXR1cm47CiAgICB9CgogICAgdHJ5IHsKICAgICAgY29uc29sZS5sb2coJ/CflKcgSW5pdGlhbGl6aW5nIFR1cm5zdGlsZSB0b2tlbiBnZW5lcmF0b3IuLi4nKTsKICAgICAgdXBkYXRlVUkoJ2luaXRpYWxpemluZ1Rva2VuJywgJ2RlZmF1bHQnKTsKCiAgICAgIGNvbnNvbGUubG9nKCdBdHRlbXB0aW5nIHRvIGxvYWQgVHVybnN0aWxlIHNjcmlwdC4uLicpOwogICAgICBhd2FpdCBVdGlscy5sb2FkVHVybnN0aWxlKCk7CiAgICAgIGNvbnNvbGUubG9nKCdUdXJuc3RpbGUgc2NyaXB0IGxvYWRlZC4gQXR0ZW1wdGluZyB0byBnZW5lcmF0ZSB0b2tlbi4uLicpOwoKICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBoYW5kbGVDYXB0Y2hhV2l0aFJldHJ5KCk7CiAgICAgIGlmICh0b2tlbikgewogICAgICAgIHNldFR1cm5zdGlsZVRva2VuKHRva2VuKTsKICAgICAgICBjb25zb2xlLmxvZygn4pyFIFN0YXJ0dXAgdG9rZW4gZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseScpOwogICAgICAgIHVwZGF0ZVVJKCd0b2tlblJlYWR5JywgJ3N1Y2Nlc3MnKTsKICAgICAgICBVdGlscy5zaG93QWxlcnQoVXRpbHMudCgndG9rZW5HZW5lcmF0b3JSZWFkeScpLCAnc3VjY2VzcycpOwogICAgICAgIGVuYWJsZUZpbGVPcGVyYXRpb25zKCk7IC8vIEVuYWJsZSBmaWxlIG9wZXJhdGlvbnMgc2luY2UgaW5pdGlhbCBzZXR1cCBpcyBjb21wbGV0ZQogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUud2FybigKICAgICAgICAgICfimqDvuI8gU3RhcnR1cCB0b2tlbiBnZW5lcmF0aW9uIGZhaWxlZCAobm8gdG9rZW4gcmVjZWl2ZWQpLCB3aWxsIHJldHJ5IHdoZW4gbmVlZGVkJwogICAgICAgICk7CiAgICAgICAgdXBkYXRlVUkoJ3Rva2VuUmV0cnlMYXRlcicsICd3YXJuaW5nJyk7CiAgICAgICAgLy8gU3RpbGwgZW5hYmxlIGZpbGUgb3BlcmF0aW9ucyBldmVuIGlmIGluaXRpYWwgdG9rZW4gZ2VuZXJhdGlvbiBmYWlscwogICAgICAgIC8vIFVzZXJzIGNhbiBsb2FkIHByb2dyZXNzIGFuZCB1c2UgbWFudWFsL2h5YnJpZCBtb2RlcwogICAgICAgIGVuYWJsZUZpbGVPcGVyYXRpb25zKCk7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBDcml0aWNhbCBlcnJvciBkdXJpbmcgVHVybnN0aWxlIGluaXRpYWxpemF0aW9uOicsIGVycm9yKTsgLy8gTW9yZSBzcGVjaWZpYyBlcnJvcgogICAgICB1cGRhdGVVSSgndG9rZW5SZXRyeUxhdGVyJywgJ3dhcm5pbmcnKTsKICAgICAgLy8gU3RpbGwgZW5hYmxlIGZpbGUgb3BlcmF0aW9ucyBldmVuIGlmIGluaXRpYWwgc2V0dXAgZmFpbHMKICAgICAgLy8gVXNlcnMgY2FuIGxvYWQgcHJvZ3Jlc3MgYW5kIHVzZSBtYW51YWwvaHlicmlkIG1vZGVzCiAgICAgIGVuYWJsZUZpbGVPcGVyYXRpb25zKCk7CiAgICAgIC8vIERvbid0IHNob3cgZXJyb3IgYWxlcnQgZm9yIGluaXRpYWxpemF0aW9uIGZhaWx1cmVzLCBqdXN0IGxvZyB0aGVtCiAgICB9CiAgfQoKICAvLyBMb2FkIHRoZW1lIHByZWZlcmVuY2UgaW1tZWRpYXRlbHkgb24gc3RhcnR1cCBiZWZvcmUgY3JlYXRpbmcgVUkKICBsb2FkVGhlbWVQcmVmZXJlbmNlKCk7CiAgYXBwbHlUaGVtZSgpOwoKICBjcmVhdGVVSSgpLnRoZW4oKCkgPT4gewogICAgLy8gR2VuZXJhdGUgdG9rZW4gYXV0b21hdGljYWxseSBhZnRlciBVSSBpcyByZWFkeQogICAgc2V0VGltZW91dChpbml0aWFsaXplVG9rZW5HZW5lcmF0b3IsIDEwMDApOwoKICAgIC8vIEF0dGFjaCBhZHZhbmNlZCBjb2xvciBtYXRjaGluZyBsaXN0ZW5lcnMgKHJlc2l6ZSBkaWFsb2cpCiAgICBjb25zdCBhZHZhbmNlZEluaXQgPSAoKSA9PiB7CiAgICAgIGNvbnN0IGNocm9tYVNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaHJvbWFQZW5hbHR5V2VpZ2h0U2xpZGVyJyk7CiAgICAgIGNvbnN0IGNocm9tYVZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nocm9tYVdlaWdodFZhbHVlJyk7CiAgICAgIGNvbnN0IHJlc2V0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc2V0QWR2YW5jZWRDb2xvckJ0bicpOwogICAgICBjb25zdCBhbGdvU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbG9yQWxnb3JpdGhtU2VsZWN0Jyk7CiAgICAgIGNvbnN0IGNocm9tYVRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmFibGVDaHJvbWFQZW5hbHR5VG9nZ2xlJyk7CiAgICAgIGNvbnN0IHRyYW5zSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJhbnNwYXJlbmN5VGhyZXNob2xkSW5wdXQnKTsKICAgICAgY29uc3Qgd2hpdGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd3aGl0ZVRocmVzaG9sZElucHV0Jyk7CiAgICAgIGNvbnN0IGRpdGhlclRvZ2dsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbmFibGVEaXRoZXJpbmdUb2dnbGUnKTsKICAgICAgaWYgKGFsZ29TZWxlY3QpCiAgICAgICAgYWxnb1NlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgc3RhdGUuY29sb3JNYXRjaGluZ0FsZ29yaXRobSA9IGUudGFyZ2V0LnZhbHVlOwogICAgICAgICAgc2F2ZUJvdFNldHRpbmdzKCk7CiAgICAgICAgICBfdXBkYXRlUmVzaXplUHJldmlldygpOwogICAgICAgIH0pOwogICAgICBpZiAoY2hyb21hVG9nZ2xlKQogICAgICAgIGNocm9tYVRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgc3RhdGUuZW5hYmxlQ2hyb21hUGVuYWx0eSA9IGUudGFyZ2V0LmNoZWNrZWQ7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAgIF91cGRhdGVSZXNpemVQcmV2aWV3KCk7CiAgICAgICAgfSk7CiAgICAgIGlmIChjaHJvbWFTbGlkZXIgJiYgY2hyb21hVmFsdWUpCiAgICAgICAgY2hyb21hU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHsKICAgICAgICAgIHN0YXRlLmNocm9tYVBlbmFsdHlXZWlnaHQgPSBwYXJzZUZsb2F0KGUudGFyZ2V0LnZhbHVlKSB8fCAwLjE1OwogICAgICAgICAgY2hyb21hVmFsdWUudGV4dENvbnRlbnQgPSBzdGF0ZS5jaHJvbWFQZW5hbHR5V2VpZ2h0LnRvRml4ZWQoMik7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAgIF91cGRhdGVSZXNpemVQcmV2aWV3KCk7CiAgICAgICAgfSk7CiAgICAgIGlmICh0cmFuc0lucHV0KQogICAgICAgIHRyYW5zSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgICAgIGNvbnN0IHYgPSBwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApOwogICAgICAgICAgaWYgKCFpc05hTih2KSAmJiB2ID49IDAgJiYgdiA8PSAyNTUpIHsKICAgICAgICAgICAgc3RhdGUuY3VzdG9tVHJhbnNwYXJlbmN5VGhyZXNob2xkID0gdjsKICAgICAgICAgICAgQ09ORklHLlRSQU5TUEFSRU5DWV9USFJFU0hPTEQgPSB2OwogICAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAgICAgX3VwZGF0ZVJlc2l6ZVByZXZpZXcoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgaWYgKHdoaXRlSW5wdXQpCiAgICAgICAgd2hpdGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgY29uc3QgdiA9IHBhcnNlSW50KGUudGFyZ2V0LnZhbHVlLCAxMCk7CiAgICAgICAgICBpZiAoIWlzTmFOKHYpICYmIHYgPj0gMjAwICYmIHYgPD0gMjU1KSB7CiAgICAgICAgICAgIHN0YXRlLmN1c3RvbVdoaXRlVGhyZXNob2xkID0gdjsKICAgICAgICAgICAgQ09ORklHLldISVRFX1RIUkVTSE9MRCA9IHY7CiAgICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgICAgICBfdXBkYXRlUmVzaXplUHJldmlldygpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICBpZiAoZGl0aGVyVG9nZ2xlKQogICAgICAgIGRpdGhlclRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4gewogICAgICAgICAgc3RhdGUuZGl0aGVyaW5nRW5hYmxlZCA9IGUudGFyZ2V0LmNoZWNrZWQ7CiAgICAgICAgICBzYXZlQm90U2V0dGluZ3MoKTsKICAgICAgICAgIF91cGRhdGVSZXNpemVQcmV2aWV3KCk7CiAgICAgICAgfSk7CiAgICAgIGlmIChyZXNldEJ0bikKICAgICAgICByZXNldEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICAgIHN0YXRlLmNvbG9yTWF0Y2hpbmdBbGdvcml0aG0gPSAnbGFiJzsKICAgICAgICAgIHN0YXRlLmVuYWJsZUNocm9tYVBlbmFsdHkgPSB0cnVlOwogICAgICAgICAgc3RhdGUuY2hyb21hUGVuYWx0eVdlaWdodCA9IDAuMTU7CiAgICAgICAgICBzdGF0ZS5jdXN0b21UcmFuc3BhcmVuY3lUaHJlc2hvbGQgPSBDT05GSUcuVFJBTlNQQVJFTkNZX1RIUkVTSE9MRCA9IDEwMDsKICAgICAgICAgIHN0YXRlLmN1c3RvbVdoaXRlVGhyZXNob2xkID0gQ09ORklHLldISVRFX1RIUkVTSE9MRCA9IDI1MDsKICAgICAgICAgIHNhdmVCb3RTZXR0aW5ncygpOwogICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2xvckFsZ29yaXRobVNlbGVjdCcpOwogICAgICAgICAgaWYgKGEpIGEudmFsdWUgPSAnbGFiJzsKICAgICAgICAgIGNvbnN0IGN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VuYWJsZUNocm9tYVBlbmFsdHlUb2dnbGUnKTsKICAgICAgICAgIGlmIChjdCkgY3QuY2hlY2tlZCA9IHRydWU7CiAgICAgICAgICBpZiAoY2hyb21hU2xpZGVyKSBjaHJvbWFTbGlkZXIudmFsdWUgPSAwLjE1OwogICAgICAgICAgaWYgKGNocm9tYVZhbHVlKSBjaHJvbWFWYWx1ZS50ZXh0Q29udGVudCA9ICcwLjE1JzsKICAgICAgICAgIGlmICh0cmFuc0lucHV0KSB0cmFuc0lucHV0LnZhbHVlID0gMTAwOwogICAgICAgICAgaWYgKHdoaXRlSW5wdXQpIHdoaXRlSW5wdXQudmFsdWUgPSAyNTA7CiAgICAgICAgICBfdXBkYXRlUmVzaXplUHJldmlldygpOwogICAgICAgICAgVXRpbHMuc2hvd0FsZXJ0KFV0aWxzLnQoJ2FkdmFuY2VkQ29sb3JTZXR0aW5nc1Jlc2V0JyksICdzdWNjZXNzJyk7CiAgICAgICAgfSk7CiAgICB9OwogICAgLy8gRGVsYXkgdG8gZW5zdXJlIHJlc2l6ZSBVSSBidWlsdAogICAgc2V0VGltZW91dChhZHZhbmNlZEluaXQsIDUwMCk7CgogICAgLy8gQWRkIGNsZWFudXAgb24gcGFnZSB1bmxvYWQKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCAoKSA9PiB7CiAgICAgIFV0aWxzLmNsZWFudXBUdXJuc3RpbGUoKTsKICAgIH0pOwogIH0pOwp9KSgpOwo=";

  function injectBlobScript(code) {
    const blob = new Blob([code], { type: "text/javascript" });
    const url = URL.createObjectURL(blob);
    // with fallback to manual DOM injection.
    const target = document.head || document.documentElement;
    if (typeof GM_addElement === "function") {
      GM_addElement(target, "script", { src: url });
    } else {
      const s = document.createElement("script");
      s.src = url;
      target.appendChild(s);
    }
    log("injected script into page context");
  }

  (async () => {
    try {
      await whenReady(() =>
        document.querySelector(
          'canvas, #root, [data-testid="map"], [id*="map"]'
        )
      );
      const code = atob(PAYLOAD_B64);
      injectBlobScript(code);
    } catch (e) {
      err("Initialization error:", e);
      alert("Could not initialize. See console for details.");
    }
  })();
})();
